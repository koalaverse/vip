#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
ranger_fit %>%
vi("permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
pryr::named_dots
install.packages("pryr")
pryr::named_dots
#' @export
vi.workflow <- function(object, ...) {  # package: workflows
# dots <- list(...)
dots <- pryr::named_dots(...)
print(dots)
# if ("model" %in% dots) {
# Extract underlying model fit and pass that to `vi_model()`
vi(workflows::extract_fit_engine(object), ...)
# } else {
# vi(object, ...)
# }
}
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
ranger_fit %>%
vi("permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
?pryr::named_dots
#' @export
vi.workflow <- function(object, ...) {  # package: workflows
# dots <- list(...)
dots <- pryr::named_dots(...)
return(dots)
print(dots)
# if ("model" %in% dots) {
# Extract underlying model fit and pass that to `vi_model()`
vi(workflows::extract_fit_engine(object), ...)
# } else {
# vi(object, ...)
# }
}
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
z <- ranger_fit %>%
vi("permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
z
z$`"permute"`
c(T, T) || c(T, F)
?vi
#' @export
vi.workflow <- function(object, ...) {  # package: workflows
dots <- list(...)
# FIXME: Could potentially cause issues if user passes the `method` argument
# by position only
if (dots[["method"]] == "model" || "model" %in% dots) {
# Extract underlying model fit and pass that to `vi_model()`
vi(workflows::extract_fit_engine(object), ...)
} else {
vi(object, ...)
}
}
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
ranger_fit %>%
vi("permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
NULL == "model"
#' @export
vi.workflow <- function(object, ...) {  # package: workflows
dots <- list(...)
if (!is.null(dots[["method"]])) {
if (dots[["method"]] == "model") {
# Extract underlying model fit and pass that to `vi_model()`
vi(workflows::extract_fit_engine(object), ...)
}
}
# FIXME: Could potentially cause issues if user passes the `method` argument
# by position only
else if ("model" %in% dots) {
# Extract underlying model fit and pass that to `vi_model()`
vi(workflows::extract_fit_engine(object), ...)
} else {
vi(object, ...)
}
}
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
ranger_fit %>%
vi("permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
ranger_fit %>%
vi("permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
pred_fun(ranger_fit, bivariate_train)
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
ranger_fit %>%
vi(method = "permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
z <- ranger_fit %>%
vi(method = "permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
z
#' @export
vi.workflow <- function(object, ...) {  # package: workflows
dots <- list(...)
if (!is.null(dots[["method"]])) {
if (dots[["method"]] == "model") {
# Extract underlying model fit and pass that to `vi_model()`
print("A")
vi(workflows::extract_fit_engine(object), ...)
}
}
# FIXME: Could potentially cause issues if user passes the `method` argument
# by position only
else if ("model" %in% dots) {
# Extract underlying model fit and pass that to `vi_model()`
vi(workflows::extract_fit_engine(object), ...)
} else {
vi(object, ...)
}
}
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
z <- ranger_fit %>%
vi(method = "permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
#' @export
vi.workflow <- function(object, ...) {  # package: workflows
dots <- list(...)
print(dots)
if (!is.null(dots[["method"]])) {
if (dots[["method"]] == "model") {
# Extract underlying model fit and pass that to `vi_model()`
print("A")
vi(workflows::extract_fit_engine(object), ...)
}
}
# FIXME: Could potentially cause issues if user passes the `method` argument
# by position only
else if ("model" %in% dots) {
# Extract underlying model fit and pass that to `vi_model()`
vi(workflows::extract_fit_engine(object), ...)
} else {
print("B")
vi(object, ...)
}
}
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
z <- ranger_fit %>%
vi(method = "permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
#' @export
vi.workflow <- function(object, ...) {  # package: workflows
dots <- list(...)
print(dots)
if (!is.null(dots[["method"]])) {
print("C")
if (dots[["method"]] == "model") {
# Extract underlying model fit and pass that to `vi_model()`
print("A")
vi(workflows::extract_fit_engine(object), ...)
}
}
# FIXME: Could potentially cause issues if user passes the `method` argument
# by position only
else if ("model" %in% dots) {
# Extract underlying model fit and pass that to `vi_model()`
vi(workflows::extract_fit_engine(object), ...)
} else {
print("B")
vi(object, ...)
}
}
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
z <- ranger_fit %>%
vi(method = "permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
#' @export
vi.workflow <- function(object, ...) {  # package: workflows
dots <- list(...)
if (!is.null(dots[["method"]])) {
if (dots[["method"]] == "model") {
# Extract underlying model fit and pass that to `vi_model()`
vi(workflows::extract_fit_engine(object), ...)
} else {
vi(object, ...)
}
} else {
vi(object, ...)
}
}
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
z <- ranger_fit %>%
vi(method = "permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
#' @export
vi.workflow <- function(object, ...) {  # package: workflows
dots <- list(...)
if (!is.null(dots[["method"]])) {
if (dots[["method"]] == "model") {
# Extract underlying model fit and pass that to `vi_model()`
vi(workflows::extract_fit_engine(object), ...)
} else {
print("A")
vi(object, ...)
}
} else {
vi(object, ...)
}
}
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
z <- ranger_fit %>%
vi(method = "permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
#' @export
vi.workflow <- function(object, ...) {  # package: workflows
dots <- list(...)
if (!is.null(dots[["method"]])) {
if (dots[["method"]] == "model") {
# Extract underlying model fit and pass that to `vi_model()`
vi(workflows::extract_fit_engine(object), ...)
} else {
break
}
} else {
vi(object, ...)
}
}
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
z <- ranger_fit %>%
vi(method = "permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
#' @export
vi.workflow <- function(object, ...) {  # package: workflows
dots <- list(...)
if (!is.null(dots[["method"]])) {
if (dots[["method"]] == "model") {
# Extract underlying model fit and pass that to `vi_model()`
object <- workflows::extract_fit_engine(object)
}
}
vi(object, ...)
}
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
z <- ranger_fit %>%
vi(method = "permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
#' @export
vi.workflow <- function(object, ...) {  # package: workflows
dots <- list(...)
print(dots[["method"]])
if (!is.null(dots[["method"]])) {
if (dots[["method"]] == "model") {
# Extract underlying model fit and pass that to `vi_model()`
object <- workflows::extract_fit_engine(object)
}
}
vi(object, ...)
}
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
z <- ranger_fit %>%
vi(method = "permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
z
#' @export
vi.workflow <- function(object, ...) {  # package: workflows
dots <- list(...)
print(dots[["method"]])
# if (!is.null(dots[["method"]])) {
#   if (dots[["method"]] == "model") {
#     # Extract underlying model fit and pass that to `vi_model()`
#     object <- workflows::extract_fit_engine(object)
#   }
# }
# vi(object, ...)
}
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
z <- ranger_fit %>%
vi(method = "permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
z
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
ranger_fit %>%
extract_fit_engine() %>%
vi("permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
#' @export
vi.workflow <- function(object, ...) {  # package: workflows
dots <- list(...)
# print(dots[["method"]])
if (!is.null(dots[["method"]])) {
if (dots[["method"]] == "model") {
# Extract underlying model fit and pass that to `vi_model()`
object <- workflows::extract_fit_engine(object)
}
}
vi.default(object, ...)
}
#>
#> Attaching package: 'vip'
#> The following object is masked from 'package:utils':
#>
#>     vi
ranger_fit %>%
# extract_fit_engine() %>%
vi("permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
library(vip)
library(tidymodels)
data("bivariate")
ranger_spec <- rand_forest(trees = 1e3, mode = "classification")
ranger_fit <-
workflow(Class ~ ., ranger_spec) %>%
fit(bivariate_train)
pred_fun <- function(object, newdata) {
predict(object, newdata)$predictions[,1]
}
library(vip)
ranger_fit %>%
# extract_fit_engine() %>%
vi("permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
t.test
MASS::lda
MASS:::lda.formula
library(vip)
vip:::vi.default
vi
library(tidymodels)
data("bivariate")
ranger_spec <- rand_forest(trees = 1e3, mode = "classification")
ranger_fit <-
workflow(Class ~ ., ranger_spec) %>%
fit(bivariate_train)
pred_fun <- function(object, newdata) {
predict(object, newdata)$predictions[,1]
}
library(vip)
ranger_fit %>%
# extract_fit_engine() %>%
vi("permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
library(vip)
library(tidymodels)
data("bivariate")
ranger_spec <- rand_forest(trees = 1e3, mode = "classification")
ranger_fit <-
workflow(Class ~ ., ranger_spec) %>%
fit(bivariate_train)
pred_fun <- function(object, newdata) {
predict(object, newdata)$predictions[,1]
}
library(vip)
ranger_fit %>%
# extract_fit_engine() %>%
vi("permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
vi.workflow
library(vip)
library(tidymodels)
data("bivariate")
ranger_spec <- rand_forest(trees = 1e3, mode = "classification")
ranger_fit <-
workflow(Class ~ ., ranger_spec) %>%
fit(bivariate_train)
pred_fun <- function(object, newdata) {
predict(object, newdata)$predictions[,1]
}
library(vip)
ranger_fit %>%
# extract_fit_engine() %>%
vi("permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
?UseMethod
stats:::t.test.formula()
stats:::t.test.formula
library(vip)
library(tidymodels)
data("bivariate")
ranger_spec <- rand_forest(trees = 1e3, mode = "classification")
ranger_fit <-
workflow(Class ~ ., ranger_spec) %>%
fit(bivariate_train)
pred_fun <- function(object, newdata) {
predict(object, newdata)$predictions[,1]
}
library(vip)
ranger_fit %>%
# extract_fit_engine() %>%
vi("permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
vip:::vi.workflow
print(vi)
print(as.character(vi))
randomForest:::randomForest.formula
?UseMethod
?vi
stats:::var.test.formula
summary.factor
summary.default
summary.lm
summary.glm
print.data.frame
utils:::vignette()
library(vip)
library(tidymodels)
data("bivariate")
ranger_spec <- rand_forest(trees = 1e3, mode = "classification")
ranger_fit <-
workflow(Class ~ ., ranger_spec) %>%
fit(bivariate_train)
pred_fun <- function(object, newdata) {
predict(object, newdata)$predictions[,1]
}
library(vip)
ranger_fit %>%
# extract_fit_engine() %>%
vi("permute",
target = "Class", metric = "auc",
pred_wrapper = pred_fun, train = bivariate_train, reference_class = "One")
remotes::install_github('matloff/qeML')
?qeML::qePolyLin
