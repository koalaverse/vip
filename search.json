[{"path":[]},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"project-overview","dir":"","previous_headings":"","what":"Project Overview","title":"Claude Development Guide for vip Package","text":"vip (Variable Importance Plots) package comprehensive R framework constructing variable importance plots various machine learning models. provides model-specific model-agnostic approaches feature importance, serving critical tool interpretable machine learning (IML).","code":""},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"key-features","dir":"","previous_headings":"Project Overview","what":"Key Features","title":"Claude Development Guide for vip Package","text":"Unified Interface: Single API (vi() vip()) 40+ different ML model types Multiple VI Methods: Model-specific, permutation-based, SHAP-based, variance-based approaches Extensive Model Support: Integration major R ML ecosystems (tidymodels, caret, mlr, etc.) Professional Visualization: ggplot2-based plotting customizable aesthetics Academic Rigor: Peer-reviewed methodology published R Journal (2020)","code":""},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"architecture","dir":"","previous_headings":"Project Overview","what":"Architecture","title":"Claude Development Guide for vip Package","text":"","code":"vip/ ├── R/                          # Source code (12 files, ~3,735 lines) │   ├── vi.R                   # Main VI computation interface │   ├── vip.R                  # Main plotting interface │   ├── vi_model.R             # Model-specific methods (42 S3 methods) │   ├── vi_permute.R           # Permutation-based importance │   ├── vi_shap.R              # Shapley-based importance │   ├── vi_firm.R              # Variance-based importance │   └── ...                    # Utilities and helpers ├── inst/tinytest/             # Test suite (28 files, ~1,581 lines) ├── man/                       # Documentation (11 .Rd files) ├── vignettes/                 # Package vignette └── data/                      # Example datasets"},{"path":[]},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"test-driven-development-tdd-framework","dir":"","previous_headings":"Development Workflow","what":"Test-Driven Development (TDD) Framework","title":"Claude Development Guide for vip Package","text":"project follows strict test-driven development using tinytest framework, chosen : - Zero dependencies: Lightweight testing without external deps - CRAN compatibility: Seamless integration R package ecosystem - Conditional testing: Graceful handling optional dependencies - Clear output: Simple, readable test results","code":""},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"tdd-cycle-for-vip-development","dir":"","previous_headings":"Development Workflow > Test-Driven Development (TDD) Framework","what":"TDD Cycle for vip Development","title":"Claude Development Guide for vip Package","text":"Write Tests First Implement S3 Methods Run Tests Refactor","code":"# Example: Adding new model support # File: inst/tinytest/test_pkg_newmodel.R  # Check dependencies first exit_if_not(requireNamespace(\"newmodel\", quietly = TRUE))  # Load test data data(\"test_dataset\")  # Fit model model <- newmodel::fit_model(target ~ ., data = test_dataset)  # Test vi() method vi_scores <- vi(model) expect_inherits(vi_scores, c(\"vi\", \"tbl_df\", \"tbl\", \"data.frame\")) expect_equal(nrow(vi_scores), ncol(test_dataset) - 1L) expect_true(all(c(\"Variable\", \"Importance\") %in% names(vi_scores))) # File: R/vi_model.R #' @export vi_model.newmodel <- function(object, ...) {   # Extract importance scores   importance <- newmodel::variable_importance(object)    # Convert to standard format   tibble::tibble(     Variable = names(importance),     Importance = as.numeric(importance)   ) } # Run specific tests tinytest::run_test_file(\"inst/tinytest/test_pkg_newmodel.R\")  # Run full suite tinytest::test_package(\"vip\")"},{"path":[]},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"id_1-conditional-testing-for-optional-dependencies","dir":"","previous_headings":"Development Workflow > Core Testing Patterns","what":"1. Conditional Testing for Optional Dependencies","title":"Claude Development Guide for vip Package","text":"","code":"# Always check dependencies before running tests exit_if_not(   requireNamespace(\"randomForest\", quietly = TRUE),   requireNamespace(\"pdp\", quietly = TRUE) )"},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"id_2-standardized-test-structure","dir":"","previous_headings":"Development Workflow > Core Testing Patterns","what":"2. Standardized Test Structure","title":"Claude Development Guide for vip Package","text":"","code":"# Standard expectation function for VI objects expectations <- function(object, n_features) {   # Check class   expect_identical(class(object),                     target = c(\"vi\", \"tbl_df\", \"tbl\", \"data.frame\"))      # Check dimensions   expect_identical(n_features, target = nrow(object))      # Check required columns   expect_true(all(c(\"Variable\", \"Importance\") %in% names(object)))      # Check for valid importance scores   expect_true(all(is.numeric(object$Importance)))   expect_true(all(is.finite(object$Importance))) }"},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"id_3-model-specific-test-patterns","dir":"","previous_headings":"Development Workflow > Core Testing Patterns","what":"3. Model-Specific Test Patterns","title":"Claude Development Guide for vip Package","text":"","code":"# Pattern for testing model-specific implementations test_model_vi <- function(model, expected_features) {   # Test basic vi() call   vi_result <- vi(model)   expectations(vi_result, length(expected_features))      # Test with different methods   for (method in c(\"model\", \"permute\", \"shap\", \"firm\")) {     if (supports_method(model, method)) {       vi_method <- vi(model, method = method)       expectations(vi_method, length(expected_features))     }   }      # Test vip() plotting   p <- vip(model)   expect_inherits(p, \"ggplot\") }"},{"path":[]},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"id_1-package-structure","dir":"","previous_headings":"R Best Practices Implementation","what":"1. Package Structure","title":"Claude Development Guide for vip Package","text":"DESCRIPTION: Proper metadata, versioning, dependency management NAMESPACE: Clean exports using roxygen2 @export tags Imports: Minimal dependencies (5 core imports) S3 Methods: Consistent dispatch system 40+ model types","code":""},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"id_2-code-style-and-documentation","dir":"","previous_headings":"R Best Practices Implementation","what":"2. Code Style and Documentation","title":"Claude Development Guide for vip Package","text":"","code":"# Roxygen2 documentation standard #' Variable importance #' #' Compute variable importance scores for the predictors in a model. #' #' @param object A fitted model object #' @param method Character string specifying VI type (\"model\", \"permute\", \"shap\", \"firm\") #' @param feature_names Character vector of feature names to compute #' @param sort Logical indicating whether to sort results #' @param ... Additional arguments passed to specific methods #' #' @return A tibble with Variable and Importance columns #' #' @examples #' \\dontrun{ #' library(randomForest) #' rf <- randomForest(Species ~ ., data = iris) #' vi_scores <- vi(rf) #' } #' #' @export vi <- function(object, ...) {   UseMethod(\"vi\") }"},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"id_3-error-handling-and-validation","dir":"","previous_headings":"R Best Practices Implementation","what":"3. Error Handling and Validation","title":"Claude Development Guide for vip Package","text":"","code":"# Input validation pattern vi_validate_inputs <- function(object, method, ...) {   # Check object class   if (!inherits(object, \"list\") && !is.function(predict)) {     stop(\"'object' must be a fitted model with a predict method\")   }      # Validate method   valid_methods <- c(\"model\", \"permute\", \"shap\", \"firm\")   if (!method %in% valid_methods) {     stop(\"'method' must be one of: \", paste(valid_methods, collapse = \", \"))   } }"},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"id_4-performance-considerations","dir":"","previous_headings":"R Best Practices Implementation","what":"4. Performance Considerations","title":"Claude Development Guide for vip Package","text":"","code":"# Efficient parallel processing with foreach vi_permute_parallel <- function(object, train, metric, nsim, parallel = FALSE, ...) {   if (parallel && foreach::getDoParRegistered()) {     results <- foreach::foreach(i = seq_len(nsim), .combine = rbind) %dopar% {       compute_permutation_importance(object, train, metric)     }   } else {     results <- foreach::foreach(i = seq_len(nsim), .combine = rbind) %do% {       compute_permutation_importance(object, train, metric)     }   }   results }"},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"id_5-ggplot2-compatibility-important","dir":"","previous_headings":"R Best Practices Implementation","what":"5. ggplot2 Compatibility (Important!)","title":"Claude Development Guide for vip Package","text":"ggplot2’s transition S7 classes, testing ggplot object classes requires updated approaches: Key Points: - Always use ggplot2::is_ggplot() rather class() ggplot objects tests - ensures compatibility current future ggplot2 versions - Updated vip 0.4.1 address issue #162","code":"# ❌ DEPRECATED: Direct class testing (will break with ggplot2 S7) expect_identical(class(p), c(\"gg\", \"ggplot\"))  # ✅ RECOMMENDED: Use is_ggplot() for forward compatibility expect_true(ggplot2::is_ggplot(p))  # Alternative approaches: expect_true(inherits(p, \"ggplot\"))  # fallback option"},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"id_6-documentation-and-readme-style-guidelines","dir":"","previous_headings":"R Best Practices Implementation","what":"6. Documentation and README Style Guidelines","title":"Claude Development Guide for vip Package","text":"Sentence Case Requirements: - ALWAYS use sentence case headings, bullet points, descriptions - Examples: - ✅ “Key features” (“Key Features”) - ✅ “Model-specific variable importance” (“Model-Specific Variable Importance”) - ✅ “Adding model support” (“Adding Model Support”) Emoji Usage Guidelines: - Section headers: Emojis encouraged (🚀, ✨, 🛠️, etc.) - Tables content: Use sparingly, add clear value - Lists bullets: Avoid emojis favor clean, readable text - General rule: doubt, leave Examples:","code":"# ✅ GOOD ## 🚀 Quick start - **Universal interface**: Works with 40+ model types - **Multiple methods**: Model-specific, permutation, SHAP  # ❌ AVOID ## 🚀 Quick Start  # Title case - **🎯 Universal Interface**: Works with 40+ model types  # Emoji in bullet + title case - **🔬 Multiple Methods**: Model-specific, permutation, SHAP  # Same issues"},{"path":[]},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"essential-r-cmd-commands","dir":"","previous_headings":"Development Commands","what":"Essential R CMD Commands","title":"Claude Development Guide for vip Package","text":"","code":"# Check package R CMD check vip_*.tar.gz --as-cran  # Build package R CMD build .  # Install package R CMD INSTALL .  # Generate documentation Rscript -e \"roxygen2::roxygenise()\""},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"testing-commands","dir":"","previous_headings":"Development Commands","what":"Testing Commands","title":"Claude Development Guide for vip Package","text":"","code":"# Run all tests tinytest::test_package(\"vip\")  # Run specific test file tinytest::run_test_file(\"inst/tinytest/test_vi_firm.R\")  # Test with coverage covr::package_coverage()  # Test examples in documentation R CMD check --run-donttest --run-dontrun"},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"linting-and-style","dir":"","previous_headings":"Development Commands","what":"Linting and Style","title":"Claude Development Guide for vip Package","text":"","code":"# Check code style lintr::lint_package()  # Format code (if using styler) styler::style_pkg()"},{"path":[]},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"step-by-step-tdd-process","dir":"","previous_headings":"Adding New Model Support","what":"Step-by-Step TDD Process","title":"Claude Development Guide for vip Package","text":"Create Test File Implement S3 Method Update Documentation Add vi_model.R details section Update DESCRIPTION Enhances field needed Add example package vignette Run Tests","code":"# File: inst/tinytest/test_pkg_NEWMODEL.R exit_if_not(requireNamespace(\"NEWMODEL\", quietly = TRUE))  # Load test data and fit model data(\"test_data\")  # or create synthetic data model <- NEWMODEL::fit_function(formula, data = test_data)  # Define expectations expectations <- function(object) {   expect_inherits(object, c(\"vi\", \"tbl_df\", \"tbl\", \"data.frame\"))   expect_equal(nrow(object), ncol(test_data) - 1L)   expect_true(all(c(\"Variable\", \"Importance\") %in% names(object))) }  # Test vi_model method vi_result <- vi(model, method = \"model\") expectations(vi_result)  # Test vip plotting p <- vip(model) expect_inherits(p, \"ggplot\") # File: R/vi_model.R #' @export vi_model.NEWMODEL <- function(object, type = NULL, ...) {   # Extract variable importance   imp <- NEWMODEL::importance_function(object, type = type)    # Convert to standard tibble format   tibble::tibble(     Variable = names(imp),     Importance = as.numeric(imp)   ) } # Test new implementation tinytest::run_test_file(\"inst/tinytest/test_pkg_NEWMODEL.R\")  # Run full test suite tinytest::test_package(\"vip\")"},{"path":[]},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"before-committing","dir":"","previous_headings":"Quality Assurance Checklist","what":"Before Committing","title":"Claude Development Guide for vip Package","text":"tests pass: tinytest::test_package(\"vip\") Documentation builds: roxygen2::roxygenise() Examples run: R CMD check --run-donttest Code style consistent: lintr::lint_package() News file updated user-facing changes","code":""},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"before-release","dir":"","previous_headings":"Quality Assurance Checklist","what":"Before Release","title":"Claude Development Guide for vip Package","text":"Version number updated DESCRIPTION NEWS.md updated changes suggested packages tested CRAN checks pass: R CMD check ---cran Reverse dependency checks completed","code":""},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"known-technical-debt","dir":"","previous_headings":"","what":"Known Technical Debt","title":"Claude Development Guide for vip Package","text":"Current FIXME items address: 1. get_feature_names.R:58 - Component location verification 2. vi_model.R:588,615,642 - Extra row handling model outputs 3. vi_permute.R:443 - Yardstick integration optimization","code":""},{"path":"https://koalaverse.github.io/vip/CLAUDE.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Claude Development Guide for vip Package","text":"Package Website: https://koalaverse.github.io/vip/ CRAN Page: https://cran.r-project.org/package=vip GitHub Repository: https://github.com/koalaverse/vip/ R Journal Paper: https://doi.org/10.32614/RJ-2020-013 tinytest Documentation: https://cran.r-project.org/package=tinytest guide ensures consistent, high-quality development following R package best practices test-driven development methodology.","code":""},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Variable Importance Plots—An Introduction to the vip Package","text":"often machine learning (ML) models summarized using single metric (e.g., cross-validated accuracy) put production. Although often care predictions models, becoming routine (good practice) also better understand predictions! Understanding ML model makes predictions helps build trust model fundamental idea emerging field interpretable machine learning (IML).1 -depth discussion IML, see Molnar (2019b). paper, focus global methods quantifying importance2 features ML model; , methods help us understand global contribution feature model’s predictions. Computing variable importance (VI) communicating variable importance plots (VIPs) fundamental component IML main topic paper. many procedures discussed paper apply model makes predictions, noted methods heavily depend accuracy importance fitted model; hence, unimportant features may appear relatively important (albeit predictive) comparison included features. reason, stress usefulness understanding scale VI scores calculated take account assessing importance feature communicating results others. Also, point work focuses mostly post-hoc interpretability trained model given goal understand features driving model’s predictions. Consequently, work focuses functional understanding model contrast lower-level mechanistic understanding (Montavon, Samek, Müller 2018). , seek explain relationship model’s prediction behavior features without explaining full internal representation model.3 VI scores VIPs can constructed general ML models using number available packages. iml package (Molnar 2019a) provides FeatureImp() function computes feature importance general prediction models using permutation approach (discussed later). written R6 (Chang 2019) allows user specify generic loss function select one pre-defined list (e.g., mean squared error). also allows user specify whether importance measured difference ratio original model error model error permutation. user can also specify number repetitions used permuting feature help stabilize variability procedure. function can also run parallel using parallel backend supported foreach package (Revolution Analytics Weston, n.d.). ingredients package (Biecek, Baniecki, Izdebski 2019) also provides permutation-based VI scores feature_importance() function. (Note function recently replaced now deprecated DALEX function variable_importance() (Biecek 2019).) Similar iml::FeatureImp(), function allows user specify loss function importance scores computed (e.g., using difference ratio). also provides option sample training data shuffling data compute importance (default use n_sample = 1000), can help speed computation. mmpf package (Jones 2018) also provides permutation-based VI scores via mmpf::permutationImportance() function. Similar iml ingredients implementation, function flexible enough applied class ML models R. varImp package (Probst 2019) extends permutation-based method RFs package party (Hothorn et al. 2019) arbitrary measures measures package (Probst 2018). Additionally, functions varImp include option using conditional approach described Strobl et al. (2008) reliable presence correlated features. number RF-specific VI packages exist CRAN, including, limited , vita (Celik 2015), rfVarImpOOB (Loecher 2019), randomForestExplainer (Paluszynska, Biecek, Jiang 2019), tree.interpreter (Sun 2019).4. caret package (Kuhn 2020) includes general varImp() function computing model-specific filter-based VI scores. Filter-based approaches, described Kuhn Johnson (2013), make use fitted model measure VI. also take account predictors model. regression problems, popular filter-based approach measuring VI numeric predictor \\(x\\) first fit flexible nonparametric model \\(x\\) target \\(Y\\); example, locally-weighted polynomial regression (LOWESS) method developed Cleveland (1979). fit, pseudo-\\(R^2\\) measure can obtained resulting residuals used measure VI. categorical predictors, different method based standard statistical tests (e.g., \\(t\\)-tests ANOVAs) can employed; see Kuhn Johnson (2013) details. classification problems, area ROC curve (AUC) statistic can used quantify predictor importance. AUC statistic computed using predictor \\(x\\) input ROC curve. \\(x\\) can reasonably separate classes \\(Y\\), clear indicator \\(x\\) important predictor (terms class separation) captured corresponding AUC statistic. problems two classes, extensions ROC curve one-vs-approach can used. use mlr interface fitting ML models (Bischl et al. 2020), can use getFeatureImportance() function extract model-specific VI scores various tree-based models (e.g., RFs GBMs). Unlike caret, model needs fit via mlr interface; instance, use getFeatureImportance() ranger (Wright, Wager, Probst 2020) model unless fit using mlr. iml DALEX packages provide model-agnostic approaches computing VI, caret, extent, mlr, provide model-specific approaches (e.g., using absolute value \\(t\\)-statistic linear models) well less accurate filter-based approaches. Furthermore, package completely different interface (e.g., iml written R6). vip package (B. Greenwell, Boehmke, Gray 2019) strives provide consistent interface model-specific model-agnostic approaches feature importance simple use. three important functions exported vip described : vi() computes VI scores using model-specific model-agnostic approaches (results always returned tibble [Müller Wickham (2019)}); vip() constructs VIPs using model-specific model-agnostic approaches ggplot2-style graphics (Wickham et al. 2019); Note vi() actually wrapper around four workhorse functions, {vi_model(), vi_firm(), vi_permute(), vi_shap(), compute various types VI scores. first computes model-specific VI scores, latter three produce model-agnostic ones. workhorse function actually gets called controlled method argument vi(); default method = \"model\" corresponds model-specific VI (see ?vip::vi details links documentation).","code":""},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"constructing-vips-in-r","dir":"Articles","previous_headings":"Introduction","what":"Constructing VIPs in R","title":"Variable Importance Plots—An Introduction to the vip Package","text":"’ll illustrate major concepts using Friedman 1 benchmark problem described Friedman (1991) Breiman (1996): \\[\\begin{equation}   Y_i = 10 \\sin\\left(\\pi X_{1i} X_{2i}\\right) + 20 \\left(X_{3i} - 0.5\\right) ^ 2 + 10 X_{4i} + 5 X_{5i} + \\epsilon_i, \\quad = 1, 2, \\dots, n, \\tag{1} \\end{equation}\\] \\(\\epsilon_i \\stackrel{iid}{\\sim} N\\left(0, \\sigma^2\\right)\\). Data model can generated using vip::gen_friedman(). default, features consist 10 independent variables uniformly distributed interval \\(\\left[0,1\\right]\\); however, 5 10 actually used true model. code chunk simulates 500 observations model Equation (1) \\(\\sigma = 1\\); see ?vip::gen_friedman details. Equation (1), clear features \\(X_1\\)–\\(X_5\\) important! (others don’t influence \\(Y\\) .) Also, based form model, ’d expect \\(X_4\\) important feature, probably followed \\(X_1\\) \\(X_2\\) (comparably important), \\(X_5\\) probably less important. influence \\(X_3\\) harder determine due quadratic nature, seems likely nonlinearity suppress variable’s influence observed range (.e., 0–1).","code":"trn <- vip::gen_friedman(500, sigma = 1, seed = 101)  # simulate training data tibble::as_tibble(trn)  # inspect output ## # A tibble: 500 × 11 ##        y     x1    x2    x3    x4     x5      x6    x7    x8    x9   x10 ##    <dbl>  <dbl> <dbl> <dbl> <dbl>  <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> ##  1 14.9  0.372  0.406 0.102 0.322 0.693  0.758   0.518 0.530 0.878 0.763 ##  2 15.3  0.0438 0.602 0.602 0.999 0.776  0.533   0.509 0.487 0.118 0.176 ##  3 15.1  0.710  0.362 0.254 0.548 0.0180 0.765   0.715 0.844 0.334 0.118 ##  4 10.7  0.658  0.291 0.542 0.327 0.230  0.301   0.177 0.346 0.474 0.283 ##  5 17.6  0.250  0.794 0.383 0.947 0.462  0.00487 0.270 0.114 0.489 0.311 ##  6 18.3  0.300  0.701 0.992 0.386 0.666  0.198   0.924 0.775 0.736 0.974 ##  7 14.6  0.585  0.365 0.283 0.488 0.845  0.466   0.715 0.202 0.905 0.640 ##  8 17.0  0.333  0.552 0.858 0.509 0.697  0.388   0.260 0.355 0.517 0.165 ##  9  8.54 0.622  0.118 0.490 0.390 0.468  0.360   0.572 0.891 0.682 0.717 ## 10 15.0  0.546  0.150 0.476 0.706 0.829  0.373   0.192 0.873 0.456 0.694 ## # ℹ 490 more rows"},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"model-specific-vi","dir":"Articles","previous_headings":"","what":"Model-specific VI","title":"Variable Importance Plots—An Introduction to the vip Package","text":"machine learning algorithms way quantifying importance feature, refer model-specific VI. describe subsections follow. One particular issue model-specific VI scores necessarily comparable across different types models. example, directly comparing impurity-based VI scores tree-based models absolute value \\(t\\)-statistic linear models.","code":""},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"decision-trees-and-tree-ensembles","dir":"Articles","previous_headings":"Model-specific VI","what":"Decision trees and tree ensembles","title":"Variable Importance Plots—An Introduction to the vip Package","text":"Decision trees probably offer natural model-specific approach quantifying importance feature. binary decision tree, node \\(t\\), single predictor used partition data two homogeneous groups. chosen predictor one maximizes measure improvement \\(^t\\). relative importance predictor \\(X\\) sum squared improvements internal nodes tree \\(X\\) chosen partitioning variable; see Breiman, Friedman, Charles J. Stone (1984) details. idea also extends ensembles decision trees, RFs GBMs. ensembles, improvement score predictor averaged across trees ensemble. Fortunately, due stabilizing effect averaging, improvement-based VI metric often reliable large ensembles; see Hastie, Tibshirani, Friedman (2009, 368). RFs offer additional method computing VI scores. idea use leftover --bag (OOB) data construct validation-set errors tree. , predictor randomly shuffled OOB data error computed . idea variable \\(X\\) important, validation error go \\(X\\) perturbed OOB data. difference two errors recorded OOB data averaged across trees forest. Note methods constructing VI scores can unreliable certain situations; example, predictor variables vary scale measurement number categories [Strobl et al. (2007), predictors highly correlated (Strobl et al. 2008). varImp package discussed earlier provides methods address concerns random forests package party, similar functionality also built partykit package (Hothorn Zeileis 2019). vip package also supports conditional importance described (Strobl et al. 2008) party- partykit-based RFs; see ?vip::vi_model details. Later , ’ll discuss general permutation method can applied supervised learning model. illustrate, fit CART-like regression tree, RF, GBM simulated training data. (Note: number different packages available fitting types models, just picked popular implementations illustration.) packages include ability compute VI scores features model; however, implementation rather package-specific, shown code chunk . results displayed Figure ?? (code reproduce plots omitted can made available upon request).  expect, three methods rank variables x1–x5 important others. good news, unfortunate remember different functions ways extracting plotting VI scores various model fitting functions. one place vip can help…one function rule ! vip loaded, can use vi() extract tibble VI scores.5 Notice vi() function always returns tibble6 two columns: Variable Importance (exceptions coefficient-based models also include Sign column giving sign corresponding coefficient, permutation importance involving multiple Monte Carlo simulations, later). Also, default, vi() always orders VI scores highest lowest; , among options, can controlled user (see ?vip::vi details). Plotting VI scores vip() just straightforward. example, following code can used reproduce Figure ??. Notice vip() function always returns \"ggplot\" object (default, bar plot). large models many features, Cleveland dot plot effective (fact, number useful plotting options can fiddled ). call vip() change useful options (resulting plot displayed Figure ??. Note can also call vip() directly \"vi\" object ’s already constructed.","code":"# Load required packages library(rpart)          # for fitting CART-like decision trees library(randomForest)   # for fitting RFs library(xgboost)        # for fitting GBMs  # Fit a single regression tree tree <- rpart(y ~ ., data = trn)  # Fit an RF set.seed(101)  # for reproducibility rfo <- randomForest(y ~ ., data = trn, importance = TRUE)  # Fit a GBM set.seed(102)  # for reproducibility bst <- xgboost(   data = data.matrix(subset(trn, select = -y)),   label = trn$y,   objective = \"reg:squarederror\",   nrounds = 100,   max_depth = 5,   eta = 0.3,   verbose = 0  # suppress printing ) # Extract VI scores from each model vi_tree <- tree$variable.importance vi_rfo <- rfo$variable.importance  # or use `randomForest::importance(rfo)` vi_bst <- xgb.importance(model = bst) # Load required packages library(vip)  # Compute model-specific VI scores vi(tree)  # CART-like decision tree ## # A tibble: 10 × 2 ##    Variable Importance ##    <chr>         <dbl> ##  1 x4            4234. ##  2 x2            2513. ##  3 x1            2461. ##  4 x5            1230. ##  5 x3             688. ##  6 x6             533. ##  7 x7             357. ##  8 x9             331. ##  9 x8             276. ## 10 x10            275. vi(rfo)   # RF ## # A tibble: 10 × 2 ##    Variable Importance ##    <chr>         <dbl> ##  1 x4           72.9   ##  2 x2           61.4   ##  3 x1           55.6   ##  4 x5           37.0   ##  5 x3           22.0   ##  6 x8            1.84  ##  7 x6            1.12  ##  8 x9            0.720 ##  9 x7           -1.39  ## 10 x10          -2.61 vi(bst)   # GBM ## # A tibble: 10 × 2 ##    Variable Importance ##    <chr>         <dbl> ##  1 x4          0.403   ##  2 x2          0.225   ##  3 x1          0.189   ##  4 x5          0.0894  ##  5 x3          0.0682  ##  6 x9          0.00802 ##  7 x6          0.00746 ##  8 x7          0.00400 ##  9 x10         0.00377 ## 10 x8          0.00262 library(patchwork)  # for easily arranging multiple ggplot2 plots  p1 <- vip(tree) + ggtitle(\"Single tree\") p2 <- vip(rfo) + ggtitle(\"Random forest\") p3 <- vip(bst) + ggtitle(\"Gradient boosting\")  # Display plots in a grid (Figure 1) p1 + p2 + p3 # Construct VIP (Figure 2) library(ggplot2)  # for theme_light() function vip(bst, num_features = 5, geom = \"point\", horizontal = FALSE,     aesthetics = list(color = \"red\", shape = 17, size = 5)) +   theme_light()"},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"linear-models","dir":"Articles","previous_headings":"Model-specific VI","what":"Linear models","title":"Variable Importance Plots—An Introduction to the vip Package","text":"multiple linear regression, linear models (LMs), absolute value \\(t\\)-statistic (scaled variant estimated coefficients) commonly used measure VI.7. Motivation use assoicated \\(t\\)-statistic given Bring (1994). idea also extends generalized linear models (GLMs). code chunk , fit LM simulated Friedman data (trn) allowing main effects two-way interactions, use step() function perform backward elimination. resulting VIP displayed Figure ??.  major limitation approach VI score assigned term model, rather individual feature! can solve problem using one model-agnostic approaches discussed later. Multivariate adaptive regression splines (MARS), introduced Friedman (1991), automatic regression technique can seen generalization LMs GLMs. MARS algorithm, contribution (VI score) predictor determined using generalized cross-validation (GCV) statistic (though, statistics can also used; see details). example using earth package (Milborrow 2019) given (results plotted Figure ??):  access VI scores directly earth, can use earth::evimp() function.","code":"# Fit a LM linmod <- lm(y ~ .^2, data = trn) backward <- step(linmod, direction = \"backward\", trace = 0)  # Extract VI scores (vi_backward <- vi(backward)) ## # A tibble: 21 × 3 ##    Variable Importance Sign  ##    <chr>         <dbl> <chr> ##  1 x4            14.2  POS   ##  2 x2             7.31 POS   ##  3 x1             5.63 POS   ##  4 x5             5.21 POS   ##  5 x3:x5          2.46 POS   ##  6 x1:x10         2.41 NEG   ##  7 x2:x6          2.41 NEG   ##  8 x1:x5          2.37 NEG   ##  9 x10            2.21 POS   ## 10 x3:x4          2.01 NEG   ## # ℹ 11 more rows # Plot VI scores; by default, `vip()` displays the top ten features pal <- palette.colors(2, palette = \"Okabe-Ito\")  # colorblind friendly palette vip(vi_backward, num_features = length(coef(backward)),  # Figure 3     geom = \"point\", horizontal = FALSE, mapping = aes(color = Sign)) +   scale_color_manual(values = unname(pal)) +   theme_light() +   theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Load required packages library(earth)  # Fit a MARS model mars <- earth(y ~ ., data = trn, degree = 2, pmethod = \"exhaustive\")  # Extract VI scores vi(mars, type = \"gcv\") ## # A tibble: 10 × 2 ##    Variable Importance ##    <chr>         <dbl> ##  1 x4            100   ##  2 x1             83.2 ##  3 x2             83.2 ##  4 x5             59.3 ##  5 x3             43.5 ##  6 x6              0   ##  7 x7              0   ##  8 x8              0   ##  9 x9              0   ## 10 x10             0 # Plot VI scores (Figure 4) vip(mars)"},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"neural-networks","dir":"Articles","previous_headings":"Model-specific VI","what":"Neural networks","title":"Variable Importance Plots—An Introduction to the vip Package","text":"neural networks (NNs), two popular methods constructing VI scores Garson algorithm (Garson 1991), later modified Goh (1995), Olden algorithm (Olden, Joy, Death 2004). algorithms, basis VI scores network’s connection weights. Garson algorithm determines VI identifying weighted connections nodes interest. Olden’s algorithm, hand, uses products raw connection weights input output neuron sums products across hidden neurons. shown outperform Garson method various simulations. DNNs, similar method due Gedeon (1997) considers weights connecting input features first two hidden layers (simplicity speed); method can slow large networks. illustrate two methods using vip() nnet package (Ripley 2016) (see results Figure ??).","code":"# Load required packages library(nnet)  # Fit a neural network set.seed(0803)  # for reproducibility nn <- nnet(y ~ ., data = trn, size = 7, decay = 0.1,            linout = TRUE, trace = FALSE)  # Construct VIPs p1 <- vip(nn, type = \"garson\") p2 <- vip(nn, type = \"olden\")  # Display plots in a grid (Figure 5) p1 + p2"},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"model-agnostic-vi","dir":"Articles","previous_headings":"","what":"Model-agnostic VI","title":"Variable Importance Plots—An Introduction to the vip Package","text":"Model-agnostic interpretability separates interpretation model. Compared model-specific approaches, model-agnostic VI methods flexible can applied supervised learning algorithm. section, discuss model-agnostic methods quantifying global feature importance using three different approaches: simple variance-based approach; permutation-based feature importance; Shapley-based feature importance.","code":""},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"variance-based-methods","dir":"Articles","previous_headings":"Model-agnostic VI","what":"Variance-based methods","title":"Variable Importance Plots—An Introduction to the vip Package","text":"first model-agnostic method based simple feature importance ranking measure (FIRM); details, see B. M. Greenwell, Boehmke, McCarthy (2018), Zien et al. (2009), Scholbeck et al. (2019). specific approach used based quantifying “flatness” effects feature.8 Feature effects can assessed using partial dependence plots (PDPs) individual conditional expectation (ICE) curves (Goldstein et al. 2015). PDPs ICE curves help visualize effect low cardinality subsets feature space estimated prediction surface (e.g., main effects two/three-way interaction effects.). also model-agnostic can constructed way supervised learning algorithm. , fit projection pursuit regression (PPR) model (see ?stats::ppr details references) construct PDPs feature using pdp package B. M. Greenwell (2017). results displayed Figure ??. Notice PDPs uninformative features relatively flat compared PDPs features x1–x5!  Next, compute PDP-based VI scores fitted PPR NN models. PDP method constructs VI scores quantify relative “flatness” PDP (default, defined computing standard deviation \\(y\\)-axis values PDP). use PDP method, specify method = \"firm\" call vi() vip() (just use vi_firm() directly):  Figure ?? display PDP-based feature importance previously obtained PPR NN models. VI scores essentially capture variability partial dependence values main effect. ICE curve method similar PDP method, except measure “flatness” individual ICE curve aggregate results (e.g., averaging). (substantial) interaction effects, using ICE curves produce results similar using PDPs (just averaged ICE curves). However, strong interaction effects present, can obfuscate main effects render PDP-based approach less useful (since PDPs important features can relatively flat certain interactions present; see Goldstein et al. (2015) details). fact, probably safest always use ICE curves employing FIRM method. , display ICE curves feature fitted PPR model using \\(y\\)-axis scale; see Figure ??. , clear difference ICE curves features x1–x5 x6–x10; later relatively flat comparison. Also, notice ICE curves within feature relatively parallel (ICE curves within feature perfectly parallel, standard deviation curve results identical PDP method). example, interaction term x1 x2 obfuscate PDPs main effects results much different.  Obtaining ICE-based feature importance scores also straightforward, just specify ice = TRUE using FIRM approach. illustrated code chunk results, displayed Figure ??, similar obtained using PDP method.  using method = \"firm\", feature effect values stored attribute called \"effects\". convenience feature effect plots (e.g., PDPs ICE curves) can easily reconstructed compared VI scores, demonstrated example (see Figure ??):","code":"# Fit a PPR model (nterms was chosen using the caret package with 5 repeats of # 5-fold cross-validation) pp <- ppr(y ~ ., data = trn, nterms = 11)  # Construct VIPs p1 <- vip(pp, method = \"firm\", train = trn) + ggtitle(\"PPR\") p2 <- vip(nn, method = \"firm\", train = trn) + ggtitle(\"NN\")  # Display plots in a grid (Figure 7) p1 + p2 # Construct VIPs p1 <- vip(pp, method = \"firm\", ice = TRUE, train = trn) + ggtitle(\"PPR\") p2 <- vip(nn, method = \"firm\", ice = TRUE, train = trn) + ggtitle(\"NN\")  # Display plots in a grid (Figure 9) p1 + p2 # Construct PDP-based VI scores (vis <- vi(pp, method = \"firm\", train = trn)) ## # A tibble: 10 × 2 ##    Variable Importance ##    <chr>         <dbl> ##  1 x4           2.96   ##  2 x2           2.21   ##  3 x1           2.14   ##  4 x5           1.53   ##  5 x3           1.46   ##  6 x6           0.128  ##  7 x9           0.114  ##  8 x8           0.0621 ##  9 x10          0.0374 ## 10 x7           0.0170 # Reconstruct PDPs for all 10 features (Figure 10) par(mfrow = c(2, 5)) for (name in paste0(\"x\", 1:10)) {   plot(attr(vis, which = \"effects\")[[name]], type = \"l\", ylim = c(9, 19), las = 1) }"},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"permutation-method","dir":"Articles","previous_headings":"Model-agnostic VI","what":"Permutation method","title":"Variable Importance Plots—An Introduction to the vip Package","text":"permutation method exists various forms made popular Breiman (2001) RFs, generalized extended Fisher, Rudin, Dominici (2018). permutation approach used vip quite simple outlined Algorithm 1 . idea randomly permute values important feature training data, training performance degrade (since permuting values feature effectively destroys relationship feature target variable). course assumes model properly tuned (e.g., using cross-validation) fitting. permutation approach uses difference baseline performance measure (e.g., training \\(R^2\\), AUC, RMSE) performance measure obtained permuting values particular feature training data (Note: model refit training data randomly permuting values feature). also important note method may appropriate , example, highly correlated features (since permuting one feature time may lead unlikely data instances). Let \\(x_1, x_2, \\dots, x_j\\) features interest let \\(M_{orig}\\) baseline performance metric trained model; brevity, ’ll assume smaller better (e.g., classification error RMSE). permutation-based importance scores can computed follows: \\(= 1, 2, \\dots, j\\): Permute values feature \\(x_i\\) training data. Recompute performance metric permuted data \\(M_{perm}\\). Record difference baseline using \\(VI\\left(x_i\\right) = M_{perm} - M_{orig}\\). Return VI scores \\(VI\\left(x_1\\right), VI\\left(x_2\\right), \\dots, VI\\left(x_j\\right)\\). Algorithm 1: simple algorithm constructing permutation-based VI scores. Algorithm 1 can improved modified number ways. instance, process can repeated several times results averaged together. helps provide stable VI scores, also opportunity measure variability. Rather taking difference step (c), Molnar (2019b, sec. 5.5.4) argues using ratio \\(M_{perm} / M_{orig}\\) makes importance scores comparable across different problems. ’s also possible assign importance scores groups features (e.g., permuting one feature time); useful features can categorized mutually exclusive groups, instance, categorical features *one-hot-encoded. use permutation approach vip, specify method = \"permute\" call vi() vip() (can use vi_permute() directly). Note using method = \"permute\" requires specifying additional arguments (e.g., training data, target name vector target values, prediction function, etc.); see ?vi_permute details. use vi_permute() first define prediction wrapper tells function generate write predictions chosen metric. example given previously fitted PPR NN models. use \\(R^2\\) (metric = \"rsq\") evaluation metric. results, displayed Figure ??, agree obtained using PDP- ICE-based methods.  permutation approach introduces randomness procedure therefore run computationally feasible. upside performing multiple runs Algorithm 1 allows us compute standard errors (among metrics) estimated VI scores, illustrated example ; specify nsim = 30 request feature permuted 30 times results averaged together. (Additionally, nsim > 1, can set call vip() construct boxplots raw permutation-based VI scores. useful want visualize variability VI estimates; see Figure ?? example.)  available performance metrics regression classification can listed using list_metrics() function, example: permutation method vip supports vector performance functions available yardstick (Kuhn, Vaughan, Hvitfeldt 2023). can also use custom metric (.e., loss function). Suppose example want measure importance using mean absolute error (MAE): \\[\\begin{equation}   MAE = \\frac{1}{n}\\sum_{= 1}^n\\left|y_i - \\hat{f}\\left(\\boldsymbol{x}_i\\right)\\right|, \\end{equation}\\] \\(\\hat{f}\\left(\\boldsymbol{x}_i\\right)\\) predicted value \\(y_i\\). simple function implementing metric given (consistent yardstick functions, user-supplied metric functions require two arguments: truth estimate). use computing permutation-based VI scores just pass via metric argument (warned, however, metric used computing permutation importance metric used train tune model). Also, since custom metric, need specify whether smaller value indicates better performance setting smaller_is_better = TRUE. results, displayed Figure ??, similar Figure ??, albeit different scale.  Although permutation importance naturally computed training data, may also useful shuffling measure performance new data! discussed depth Molnar (2019b, sec. 5.2). users interested computing permutation importance using new data, just supply train argument call vi(), vip(), vi_permute(). instance, suppose wanted use fraction original training data carry computations. case, simply pass sampled data train argument follows:  using permutation method nsim > 1, default keep permutation scores attribute called \"raw_scores\"; can turn behavior setting keep = FALSE call vi_permute(), vi(), vip(). keep = TRUE nsim > 1, can request permutation scores plotted setting all_permutations = TRUE call vip(), demonstrated code chunk (see Figure ??). also let’s visually inspect variability permutation scores within feature.","code":"# Prediction wrapper pfun_ppr <- function(object, newdata) {  # needs to return a numeric vector   stats::predict(object, newdata = newdata) } pfun_nnet <- function(object, newdata) {  # needs to return a numeric vector   stats::predict(object, newdata = newdata)[, 1L, drop = TRUE] }  # Plot VI scores set.seed(2021)  # for reproducibility p1 <- vip(pp, method = \"permute\", train = trn, target = \"y\", metric = \"rsq\",           pred_wrapper = pfun_ppr) + ggtitle(\"PPR\") p2 <- vip(nn, method = \"permute\", train = trn, target = \"y\", metric = \"rsq\",           pred_wrapper = pfun_nnet) + ggtitle(\"NN\")  # Display plots in a grid (Figure 11) p1 + p2 # Use 10 Monte Carlo reps set.seed(403)  # for reproducibility vis <- vi(pp, method = \"permute\", train = trn, target = \"y\", metric = \"rsq\",           pred_wrapper = pfun_ppr, nsim = 30) vip(vis, geom = \"boxplot\")  # Figure 12 list_metrics() ##          metric                               description ## 1      accuracy                   Classification accuracy ## 2  bal_accuracy          Balanced classification accuracy ## 3        youden Youden;'s index (or Youden's J statistic) ## 4       roc_auc                      Area under ROC curve ## 5        pr_auc    Area under precision-recall (PR) curve ## 6       logloss                                  Log loss ## 7         brier                               Brier score ## 8           mae                       Mean absolute error ## 9          mape            Mean absolute percentage error ## 10         rmse                   Root mean squared error ## 11          rsq                   R-squared (correlation) ## 12     rsq_trad                   R-squared (traditional) ##                                task smaller_is_better yardstick_function ## 1  Binary/multiclass classification             FALSE       accuracy_vec ## 2  Binary/multiclass classification             FALSE   bal_accuracy_vec ## 3  Binary/multiclass classification             FALSE            j_index ## 4             Binary classification             FALSE        roc_auc_vec ## 5             Binary classification             FALSE         pr_auc_vec ## 6  Binary/multiclass classification              TRUE    mn_log_loss_vec ## 7  Binary/multiclass classification              TRUE    brier_class_vec ## 8                        Regression              TRUE            mae_vec ## 9                        Regression              TRUE           mape_vec ## 10                       Regression              TRUE           rmse_vec ## 11                       Regression             FALSE            rsq_vec ## 12                       Regression             FALSE       rsq_trad_vec mae <- function(truth, estimate) {   mean(abs(truth - estimate)) } # Construct VIP (Figure 13) set.seed(2321)  # for reproducibility p1 <- vip(nn, method = \"permute\", train = trn, target = \"y\", metric = mae,           smaller_is_better = TRUE, pred_wrapper = pfun_nnet) +   ggtitle(\"Custom loss function: MAE\") set.seed(2321)  # for reproducibility p2 <- vip(nn, method = \"permute\", train = trn, target = \"y\",           metric = yardstick::mae_vec, smaller_is_better = TRUE,           pred_wrapper = pfun_nnet) +   ggtitle(\"Using `yardstick`'s MAE function\") p1 + p2 # Construct VIP (Figure 14) set.seed(2327)  # for reproducibility vip(nn, method = \"permute\", pred_wrapper = pfun_nnet, target = \"y\",     metric = \"rmse\",     train = trn[sample(nrow(trn), size = 400), ]) +  # sample 400 observations   ggtitle(\"Using a random subset of training data\") # Construct VIP (Figure 15) set.seed(8264)  # for reproducibility vip(nn, method = \"permute\", pred_wrapper = pfun_nnet, train = trn,     target = \"y\", metric = \"mae\", nsim = 10, geom = \"point\",     all_permutations = TRUE, jitter = TRUE) +   ggtitle(\"Plotting all permutation scores\")"},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"a-classification-example","dir":"Articles","previous_headings":"Model-agnostic VI > Permutation method","what":"A classification example","title":"Variable Importance Plots—An Introduction to the vip Package","text":"example, ’ll illustrate use permutation importance classification problem. start, ’ll use randomForest package (Liaw Wiener 2002) build (default) random forest predict survivability passengers ill-fated Titanic. source data (also available vip::titanic) contains 263 missing values (.e., NA’s) age column. titanic_mice version, ’ll use vignette, contains imputed values age column using multivariate imputation chained equations via mice package. Consequently, titanic_mice list containing 11 imputed versions original data; see ?vip::titanic_mice details. now, ’ll just use one 11 imputed versions: Next, ’ll build default random forest predict survivability: comparison, ’s plot OOB-based permutation importance scores available random forest (note setting include_type = TRUE results \\(x\\)-axis label including method importance computed):  categorical outcomes, random forests can provide predicted class labels (.e., classification) predicted class probabilities (.e., prediction), shown . performance metric choose permutation importance determine whether prediction wrapper return class label (factor) numeric vector class probabilities. ’ll start classification accuracy (metric used random forest’s build-OOB-based permutation VI scores). basic call vi() (, similarly, vi_permute()) look something like: Note standard deviation VI score also computed returned whenever nsim > 1. results comparable fitted random forest computed internally setting importance = TRUE nPerm = 30; difference random forest uses OOB data computing drop accuracy shuffling variable. Next, ’ll compute permutation VI scores using metric requires predicted probabilities. , ’ll use Brier score, measures accuracy individual probabilities (smaller better). However, instead using built-metric = \"brier\" option, ’ll pass corresponding yardstick function directly. Note modify prediction wrapper return predicted probabilities, single vector probabilities case binary outcome (case, care event survived = \"yes\"): Finally, illustrate use event_level argument, ’ll compute permutation-based VI scores using area ROC curve (AUROC metric = \"roc_auc\"). results negative? issue metrics like AUROC (similar area PR curve) treat one class outcomes “event” interest. case, using predicted probability event survived = \"yes\", default event level (yardstick therefore vip) always first class label alphabetical order (survived = \"\", case): Consequently, using metrics like AUROC, good idea set event_level parameter call vi() vi_permute(). fix previous issue, just set event level second class label using even_level = \"second\": Much better (just negative previous results, expected)! similar example using multiclass outcome, see discussion issue.","code":"head(t1 <- vip::titanic_mice[[1L]]) ##   survived pclass   age    sex sibsp parch ## 1      yes      1 29.00 female     0     0 ## 2      yes      1  0.92   male     1     2 ## 3       no      1  2.00 female     1     2 ## 4       no      1 30.00   male     1     2 ## 5       no      1 25.00 female     1     2 ## 6      yes      1 48.00   male     0     0 t1$pclass <- as.ordered(t1$pclass)  # makes more sense as an ordered factor library(randomForest)  set.seed(2053)  # for reproducibility (rfo <- randomForest(survived ~ ., data = t1, importance = TRUE, nPerm = 30)) ##  ## Call: ##  randomForest(formula = survived ~ ., data = t1, importance = TRUE,      nPerm = 30)  ##                Type of random forest: classification ##                      Number of trees: 500 ## No. of variables tried at each split: 2 ##  ##         OOB estimate of  error rate: 18.79% ## Confusion matrix: ##      no yes class.error ## no  727  82   0.1013597 ## yes 164 336   0.3280000 vip(rfo, include_type = TRUE) head(predict(rfo, newdata = t1, type = \"response\"))  # predicted class labels ##   1   2   3   4   5   6  ## yes yes yes  no yes  no  ## Levels: no yes head(predict(rfo, newdata = t1, type = \"prob\"))  # predicted class probabilities ##      no   yes ## 1 0.014 0.986 ## 2 0.114 0.886 ## 3 0.472 0.528 ## 4 0.716 0.284 ## 5 0.392 0.608 ## 6 0.894 0.106 pfun_class <- function(object, newdata) {  # prediction wrapper   predict(object, newdata = newdata, type = \"response\") }  # Compute mean decrease in accuracy set.seed(1359)  # for reproducibility vi(rfo,    method = \"permute\",    train = t1,    target = \"survived\",    metric = \"accuracy\",  # or pass in `yardstick::accuracy_vec` directly    # smaller_is_better = FALSE,  # no need to set for built-in metrics    pred_wrapper = pfun_class,    nsim = 30  # use 30 repetitions ) ## # A tibble: 5 × 3 ##   Variable Importance   StDev ##   <chr>         <dbl>   <dbl> ## 1 sex          0.226  0.0111  ## 2 pclass       0.0801 0.00488 ## 3 age          0.0738 0.00595 ## 4 sibsp        0.0346 0.00459 ## 5 parch        0.0166 0.00247 sort(rfo$importance[, \"MeanDecreaseAccuracy\"], decreasing = TRUE) ##        sex     pclass        age      parch      sibsp  ## 0.17102147 0.05877827 0.04408406 0.01895065 0.01583429 pfun_prob <- function(object, newdata) {  # prediction wrapper   predict(object, newdata = newdata, type = \"prob\")[, \"yes\"] }  # Compute mean increase in Brier score set.seed(1411)  # for reproducibility vi(rfo,    method = \"permute\",    train = t1,    target = \"survived\",    metric = yardstick::brier_class_vec,  # or pass in `\"brier\"` directly    smaller_is_better = FALSE,  # need to set when supplying a function    pred_wrapper = pfun_prob,    nsim = 30  # use 30 repetitions ) ## # A tibble: 5 × 3 ##   Variable Importance   StDev ##   <chr>         <dbl>   <dbl> ## 1 sex          0.209  0.00866 ## 2 pclass       0.0977 0.00479 ## 3 age          0.0947 0.00460 ## 4 parch        0.0542 0.00271 ## 5 sibsp        0.0414 0.00186 set.seed(1413)  # for reproducibility vi(rfo,    method = \"permute\",    train = t1,    target = \"survived\",    metric = \"roc_auc\",    pred_wrapper = pfun_prob,    nsim = 30  # use 30 repetitions ) ## # A tibble: 5 × 3 ##   Variable Importance   StDev ##   <chr>         <dbl>   <dbl> ## 1 parch       -0.0251 0.00351 ## 2 sibsp       -0.0283 0.00211 ## 3 age         -0.0850 0.00477 ## 4 pclass      -0.0920 0.00533 ## 5 sex         -0.229  0.0137 levels(titanic$survived) ## [1] \"no\"  \"yes\" set.seed(1413)  # for reproducibility vi(rfo,    method = \"permute\",    train = t1,    target = \"survived\",    metric = \"roc_auc\",    event_level = \"second\",  # use \"yes\" as class label/\"event\" of interest    pred_wrapper = pfun_prob,    nsim = 30  # use 30 repetitions ) ## # A tibble: 5 × 3 ##   Variable Importance   StDev ##   <chr>         <dbl>   <dbl> ## 1 sex          0.229  0.0137  ## 2 pclass       0.0920 0.00533 ## 3 age          0.0850 0.00477 ## 4 sibsp        0.0283 0.00211 ## 5 parch        0.0251 0.00351"},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"benchmarks","dir":"Articles","previous_headings":"Model-agnostic VI > Permutation method","what":"Benchmarks","title":"Variable Importance Plots—An Introduction to the vip Package","text":"section, compare performance four implementations permutation-based VI scores: iml::FeatureImp() (version 0.11.1), ingredients::feature_importance() (version 2.3.0), mmpf::permutationImportance (version 0.0.5), vip::vi() (version 0.4.1). simulated 10,000 training observations Friedman 1 benchmark problem trained random forest using ranger package. implementation, computed permutation-based VI scores 100 times using microbenchmark package (Mersmann 2019). benchmark use parallel processing capability available iml vip implementations. results microbenchmark displayed Figure (fig:benchmark) summarized output . case, vip package (version 0.4.1) fastest, followed closely ingredients mmpf. noted, however, implementations vip iml can parallelized. best knowledge, case ingredients mmpf (although difficult write simple parallel wrapper either). code used generate benchmarks can found https://github.com/koalaverse/vip/blob/master/slowtests/slowtests-benchmarks.R.","code":""},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"shapley-method","dir":"Articles","previous_headings":"Model-agnostic VI","what":"Shapley method","title":"Variable Importance Plots—An Introduction to the vip Package","text":"Although vip focuses global VI methods, becoming increasing popular asses global importance aggregating local VI measures; particular, Shapley explanations (Štrumbelj Kononenko 2014). Using Shapley values (method coalitional game theory), prediction single instance \\(x^\\star\\) can explained assuming feature value \\(x^\\star\\) “player” game payout equal corresponding prediction \\(\\hat{f}\\left(x^\\star\\right)\\). Shapley values tell us fairly distribute “payout” (.e., prediction) among features. Shapley values become popular due attractive fairness properties posses (Lundberg Lee 2017). popular implementation available Python shap package (Lundberg Lee 2017); although number implementations now available R; example, iml, iBreakDown (Biecek et al. 2019), fastshap (B. Greenwell 2019). Obtaining global VI score Shapley values requires aggregating Shapley values feature across entire training set (least reasonable sample thereof). particular, use mean absolute value individual Shapley values feature. Unfortunately, Shapley values can computationally expensive, therefore approach may feasible large training sets (say, >3000 observations). fastshap package provides relief exploiting computational tricks, including option perform computations parallel (see details). Also, fast exact algorithms can exploited certain classes models. Starting vip version 0.4.1 can now use method = \"shap\" call vi() (use vi_shap() directly) compute global Shapley-based VI scores using method described (provided fastshap package installed)—see ?vip::vi_shap details. illustrate, compute Shapley-based VI scores xgboost model [R-xgboost] using Friedman data earlier; results displayed Figure (fig:vi-shap).9 ({Note: specifying include_type = TRUE call vip() causes type VI computed displayed part axis label.)  Passing exact = TRUE fastshap::explain() via ... argument call vip() (vi() vi_shap()) works lightgbm, xgboost, additive (generalized) linear models fit using R’s internal stats package. cases, prediction wrapper must supplied via ... argument. illustrate, let’s use previous random forest fit Titanic data set. Note Shapley explanation support classification, ’ll use probability-based prediction wrapper defined :","code":"# Load required packages library(xgboost)  # Feature matrix X <- data.matrix(subset(trn, select = -y))  # matrix of feature values  # Fit an XGBoost model; hyperparameters were tuned using 5-fold CV set.seed(859)  # for reproducibility bst <- xgboost(X, label = trn$y, nrounds = 338, max_depth = 3, eta = 0.1,                verbose = 0)  # Construct VIP (Figure 17) vip(bst, method = \"shap\", train = X, exact = TRUE, include_type = TRUE,     geom = \"point\", horizontal = FALSE,     aesthetics = list(color = \"forestgreen\", shape = 17, size = 5)) +   theme_light() pfun_prob <- function(object, newdata) {  # prediction wrapper   # For Shapley explanations, this should ALWAYS return a numeric vector   predict(object, newdata = newdata, type = \"prob\")[, \"yes\"] }  # Compute Shapley-based VI scores set.seed(853)  # for reproducibility vi_shap(rfo, train = subset(t1, select = -survived), pred_wrapper = pfun_prob,         nsim = 30) ## # A tibble: 5 × 2 ##   Variable Importance ##   <chr>         <dbl> ## 1 pclass       0.104  ## 2 age          0.0649 ## 3 sex          0.272  ## 4 sibsp        0.0260 ## 5 parch        0.0291"},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"drawbacks-of-existing-methods","dir":"Articles","previous_headings":"Model-agnostic VI","what":"Drawbacks of existing methods","title":"Variable Importance Plots—An Introduction to the vip Package","text":"discussed Hooker Mentch (2019), permute--predict methods—like PDPs, ICE curves, permutation importance—can produce results highly misleading.10 example, standard approach computing permutation-based VI scores involves independently permuting individual features. implicitly makes assumption observed features statistically independent. practice, however, features often independent can lead nonsensical VI scores. One way mitigate issue use conditional approach described Strobl et al. (2008); Hooker Mentch (2019) provides additional alternatives, permute--relearn importance. Unfortunately, best knowledge, approach yet available general purpose. similar modification can applied PDPs (Parr Wilson 2019)11 seems reasonable use FIRM approach strong dependencies among features present (though, given much thought consideration). already mentioned PDPs can misleading presence strong interaction effects. drawback, course, equally applies FIRM approach using PDPs computing VI scores. discussed earlier, can mitigated using ICE curves instead. Another alternative use accumulated local effect (ALE) plots (D. W. Apley Zhu 2016) (though haven’t really tested idea). Compared PDPs, ALE plots advantage faster compute less affected strong dependencies among features. downside, however, ALE plots complicated implement (hence, currently available using method = \"firm\"). ALE plots available ALEPlot (D. Apley 2018) iml packages. Hooker (2007) also argues feature importance (concern main effects) can misleading high dimensional settings, especially strong dependencies interaction effects among features, suggests approach based generalized functional ANOVA decomposition—though, knowledge, approach widely implemented open source.","code":""},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Variable Importance Plots—An Introduction to the vip Package","text":"VIPs help visualize strength relationship feature predicted response, accounting features model. ’ve discussed two types VI: model-specific model-agnostic, well strengths weaknesses. paper, showed construct VIPs various types “black box” models R using vip package. also briefly discussed related approaches available number R packages. Suggestions avoid high execution times discussed demonstrated via examples. paper based vip version 0.4.1. terms future development, vip can expanded number ways. example, plan incorporate option compute group-based conditional permutation scores. Although discussed paper, vip also includes promising statistic (similar variance-based VI scores previously discussed) measuring relative strength interaction features. Although VIPs can help understand features driving model’s predictions, ML practitioners cognizant fact none methods discussed paper uniformly best across situations; require accurate model properly tuned, checked consistency human domain knowledge.","code":""},{"path":"https://koalaverse.github.io/vip/articles/vip.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"Variable Importance Plots—An Introduction to the vip Package","text":"authors like thank anonymous reviewers Editor helpful comments suggestions. also like thank members 84.51\\(^{\\circ}\\) Interpretable Machine Learning Special Interest Group thoughtful discussions topics discussed herein.","code":""},{"path":[]},{"path":"https://koalaverse.github.io/vip/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brandon M. Greenwell. Author, maintainer. Brad Boehmke. Author.","code":""},{"path":"https://koalaverse.github.io/vip/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brandon M. Greenwell Bradley C. Boehmke (2020). Variable Importance Plots—Introduction vip Package. R Journal, 12(1), 343--366. URL https://doi.org/10.32614/RJ-2020-013.","code":"@Article{,   title = {Variable Importance Plots---An Introduction to the vip Package},   author = {Brandon M. Greenwell and Bradley C. Boehmke},   journal = {The R Journal},   year = {2020},   volume = {12},   number = {1},   pages = {343--366},   url = {https://doi.org/10.32614/RJ-2020-013}, }"},{"path":"https://koalaverse.github.io/vip/index.html","id":"vip-variable-importance-plots","dir":"","previous_headings":"","what":"Variable Importance Plots","title":"Variable Importance Plots","text":"🔍 Make ML models interpretable beautiful variable importance plots","code":""},{"path":"https://koalaverse.github.io/vip/index.html","id":"id_-what-is-vip","dir":"","previous_headings":"","what":"🚀 What is vip?","title":"Variable Importance Plots","text":"vip provides unified framework constructing variable importance plots virtually machine learning model R. Stop juggling different importance() functions across packages – vip gives one consistent interface interpretable ML.","code":""},{"path":"https://koalaverse.github.io/vip/index.html","id":"id_-key-features","dir":"","previous_headings":"🚀 What is vip?","what":"✨ Key features","title":"Variable Importance Plots","text":"Universal interface: Works 40+ model types different packages Multiple methods: Model-specific, permutation, SHAP, variance-based importance Beautiful plots: Publication-ready visualizations ggplot2 Efficient algorithms: Optimized parallel processing support Extensible design: Easy add support new model types Well-documented: Comprehensive guides academic backing","code":""},{"path":[]},{"path":"https://koalaverse.github.io/vip/index.html","id":"installation","dir":"","previous_headings":"🛠️ Quick start","what":"Installation","title":"Variable Importance Plots","text":"","code":"# Install from CRAN (stable) install.packages(\"vip\")  # Install development version (latest features) # install.packages(\"pak\") pak::pak(\"koalaverse/vip\")"},{"path":"https://koalaverse.github.io/vip/index.html","id":"id_30-second-example","dir":"","previous_headings":"🛠️ Quick start","what":"30-second example","title":"Variable Importance Plots","text":"","code":"library(vip) library(randomForest)  # Fit a model model <- randomForest(Species ~ ., data = iris)  # Get importance scores vi_scores <- vi(model) print(vi_scores) #> # A tibble: 4 × 2 #>   Variable     Importance #>   <chr>             <dbl> #> 1 Petal.Length      32.4  #> 2 Petal.Width       31.3  #> 3 Sepal.Length       9.51 #> 4 Sepal.Width        6.75  # Create a beautiful plot vip(model)"},{"path":[]},{"path":"https://koalaverse.github.io/vip/index.html","id":"id_-supported-models-40","dir":"","previous_headings":"","what":"🔧 Supported models (40+)","title":"Variable Importance Plots","text":"Tree-based models - randomForest • ranger • xgboost • lightgbm • gbm • C50 • Cubist • rpart • party • partykit Linear models - glmnet • earth (MARS) • Base R (lm, glm) Neural networks - nnet • neuralnet • h2o • RSNNS Meta-frameworks - caret • tidymodels • parsnip • workflows • mlr • mlr3 • sparklyr Specialized models - pls • mixOmics (Bioconductor) • many …","code":""},{"path":[]},{"path":"https://koalaverse.github.io/vip/index.html","id":"permutation-importance-with-custom-metrics","dir":"","previous_headings":"🏃‍♂️ Advanced examples","what":"Permutation importance with custom metrics","title":"Variable Importance Plots","text":"","code":"library(ranger)  # Fit model rf_model <- ranger(mpg ~ ., data = mtcars, importance = \"none\")  # Permutation importance with custom metric vi_perm <- vi(   rf_model,    method = \"permute\",   train = mtcars,   target = \"mpg\",   metric = \"rmse\",   nsim = 50,        # 50 permutations for stability   parallel = TRUE   # Speed up with parallel processing )  # Create enhanced plot vip(vi_perm, num_features = 10, geom = \"point\") +   labs(title = \"Permutation-based Variable Importance\",        subtitle = \"RMSE metric, 50 permutations\") +   theme_minimal()"},{"path":"https://koalaverse.github.io/vip/index.html","id":"shap-values-for-detailed-attribution","dir":"","previous_headings":"🏃‍♂️ Advanced examples","what":"SHAP values for detailed attribution","title":"Variable Importance Plots","text":"","code":"library(xgboost)  # Prepare data X <- data.matrix(subset(mtcars, select = -mpg)) y <- mtcars$mpg  # Fit XGBoost model xgb_model <- xgboost(data = X, label = y, nrounds = 100, verbose = 0)  # SHAP-based importance vi_shap <- vi(   xgb_model,    method = \"shap\",   train = X,   nsim = 30 )  # Beautiful SHAP plot vip(vi_shap, geom = \"col\", aesthetics = list(fill = \"steelblue\", alpha = 0.8)) +   labs(title = \"SHAP-based Variable Importance\") +   theme_light()"},{"path":"https://koalaverse.github.io/vip/index.html","id":"id_-contributing-and-development","dir":"","previous_headings":"","what":"🤝 Contributing and development","title":"Variable Importance Plots","text":"welcome contributions! ’s get involved:","code":""},{"path":"https://koalaverse.github.io/vip/index.html","id":"development-setup","dir":"","previous_headings":"🤝 Contributing and development","what":"Development setup","title":"Variable Importance Plots","text":"","code":"# Clone the repo git clone https://github.com/koalaverse/vip.git cd vip  # Open in RStudio or your favorite editor # The project includes a comprehensive CLAUDE.md development guide"},{"path":"https://koalaverse.github.io/vip/index.html","id":"testing-framework","dir":"","previous_headings":"🤝 Contributing and development","what":"Testing framework","title":"Variable Importance Plots","text":"use tinytest lightweight, reliable testing:","code":"# Run all tests tinytest::test_package(\"vip\")  # Test specific functionality tinytest::run_test_file(\"inst/tinytest/test_vip.R\")"},{"path":"https://koalaverse.github.io/vip/index.html","id":"development-workflow","dir":"","previous_headings":"🤝 Contributing and development","what":"Development workflow","title":"Variable Importance Plots","text":"Check issues: Look good first issues Create branch: git checkout -b feature/awesome-feature Write tests: Follow TDD principles (see CLAUDE.md) Run checks: R CMD check tests Submit PR: clear description","code":""},{"path":"https://koalaverse.github.io/vip/index.html","id":"adding-model-support","dir":"","previous_headings":"🤝 Contributing and development","what":"Adding model support","title":"Variable Importance Plots","text":"Adding support new models straightforward: See CLAUDE.md detailed instructions!","code":"# Add S3 method to R/vi_model.R vi_model.your_model_class <- function(object, ...) {   # Extract importance from your model   importance_scores <- your_model_importance_function(object)      # Return as tibble   tibble::tibble(     Variable = names(importance_scores),     Importance = as.numeric(importance_scores)   ) }"},{"path":"https://koalaverse.github.io/vip/index.html","id":"id_-learning-resources","dir":"","previous_headings":"","what":"📚 Learning resources","title":"Variable Importance Plots","text":"Package website - Comprehensive documentation R Journal paper - Academic foundation IML book - Theory background Development guide - Contributing guidelines","code":""},{"path":"https://koalaverse.github.io/vip/index.html","id":"id_-whats-new-in-v041","dir":"","previous_headings":"","what":"✨ What’s new in v0.4.1","title":"Variable Importance Plots","text":"✅ ggplot2 S7 compatibility - Future-proof plotting lightgbm support - Popular gradient boosting Enhanced yardstick integration - Better metrics Improved documentation - Clearer examples See NEWS.md complete version history migration notes.","code":""},{"path":"https://koalaverse.github.io/vip/index.html","id":"id_-getting-help","dir":"","previous_headings":"","what":"🆘 Getting help","title":"Variable Importance Plots","text":"Bug reports: GitHub Issues Feature requests: GitHub Discussions Questions: Stack Overflow (tag: vip)","code":""},{"path":"https://koalaverse.github.io/vip/index.html","id":"id_-citation","dir":"","previous_headings":"","what":"📄 Citation","title":"Variable Importance Plots","text":"use vip research, please cite:","code":"@article{greenwell2020variable,   title={Variable Importance Plots—An Introduction to the vip Package},   author={Greenwell, Brandon M and Boehmke, Bradley C},   journal={The R Journal},   volume={12},   number={1},   pages={343--366},   year={2020},   doi={10.32614/RJ-2020-013} }"},{"path":"https://koalaverse.github.io/vip/index.html","id":"id_-license","dir":"","previous_headings":"","what":"📜 License","title":"Variable Importance Plots","text":"GPL (>= 2) © Brandon M. Greenwell, Brad Boehmke ⭐ Star us GitHub vip helps make models interpretable! ⭐ Built ❤️ koalaverse team","code":""},{"path":"https://koalaverse.github.io/vip/reference/gen_friedman.html","id":null,"dir":"Reference","previous_headings":"","what":"Friedman benchmark data — gen_friedman","title":"Friedman benchmark data — gen_friedman","text":"Simulate data Friedman 1 benchmark problem. data originally described Friedman (1991) Breiman (1996). details, see sklearn.datasets.make_friedman1.","code":""},{"path":"https://koalaverse.github.io/vip/reference/gen_friedman.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Friedman benchmark data — gen_friedman","text":"","code":"gen_friedman(   n_samples = 100,   n_features = 10,   n_bins = NULL,   sigma = 0.1,   seed = NULL )"},{"path":"https://koalaverse.github.io/vip/reference/gen_friedman.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Friedman benchmark data — gen_friedman","text":"n_samples Integer specifying number samples (.e., rows) generate. Default 100. n_features Integer specifying number features generate. Default 10. n_bins Integer specifying number (roughly) equal sized bins split response . Default NULL binning. Setting positive integer > 1 effectively turns classification problem n_bins gives number classes. sigma Numeric specifying standard deviation noise. seed Integer specifying random seed. NULL (default) results different time function run.","code":""},{"path":"https://koalaverse.github.io/vip/reference/gen_friedman.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Friedman benchmark data — gen_friedman","text":"Breiman, Leo (1996) Bagging predictors. Machine Learning 24, pages 123-140. Friedman, Jerome H. (1991) Multivariate adaptive regression splines. Annals Statistics 19 (1), pages 1-67.","code":""},{"path":"https://koalaverse.github.io/vip/reference/gen_friedman.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Friedman benchmark data — gen_friedman","text":"","code":"gen_friedman() #>             y          x1          x2         x3           x4          x5 #> 1   18.635918 0.600760886 0.403911002 0.21609998 0.5485914391 0.913158011 #> 2   14.781224 0.157208442 0.218431009 0.03209271 0.8275014143 0.204329063 #> 3    6.267418 0.007399441 0.418361402 0.14531584 0.1275576509 0.471755611 #> 4   15.234385 0.466393497 0.668870748 0.85438389 0.2611861178 0.385183100 #> 5   13.620336 0.497777389 0.507650282 0.21314931 0.2884170276 0.392751929 #> 6    8.642352 0.289767245 0.660359306 0.21031074 0.0147690158 0.218338430 #> 7   22.124421 0.732881987 0.511791314 0.03952069 0.8537237272 0.007208941 #> 8   18.988276 0.772521511 0.835552437 0.94477480 0.4140478286 0.363712143 #> 9   20.855247 0.874600661 0.708781161 0.24492799 0.7510138457 0.526106730 #> 10  17.489506 0.174940627 0.874205941 0.78112257 0.7190139582 0.844163393 #> 11   7.008217 0.034241333 0.011479538 0.28823717 0.5153553013 0.135991171 #> 12  22.228975 0.320385731 0.888249568 0.87535791 0.9748362575 0.376467331 #> 13  15.235195 0.402328238 0.996346919 0.29575009 0.3607775616 0.263308648 #> 14  11.875850 0.195669835 0.500191501 0.98352541 0.1703955070 0.497852970 #> 15  12.396322 0.403538117 0.358967024 0.58983756 0.7831406700 0.019525251 #> 16   3.722463 0.063661457 0.774913022 0.75915838 0.0309238962 0.087183810 #> 17  21.687469 0.388701313 0.584475251 0.83607531 0.7894203586 0.995962664 #> 18  16.947599 0.975547835 0.633976371 0.76281947 0.1666036777 0.942132205 #> 19   8.195498 0.289892295 0.858666155 0.41726993 0.0287125653 0.124373451 #> 20  20.331834 0.678380427 0.566894339 0.13807484 0.7859511641 0.115189302 #> 21  19.098664 0.735319599 0.252997019 0.08084496 0.8253078635 0.366688104 #> 22  17.906582 0.195956733 0.918803215 0.65598263 0.9652404180 0.471040036 #> 23  12.497099 0.980539675 0.867350205 0.60200386 0.3786411788 0.784172446 #> 24  10.215500 0.741521529 0.248538697 0.65699583 0.1743863276 0.490392813 #> 25   7.714647 0.051446276 0.402881212 0.32931716 0.6037504023 0.101950955 #> 26  26.961411 0.530212464 0.769630176 0.97947422 0.8054637336 0.943459724 #> 27   7.125139 0.695823879 0.119485375 0.71518613 0.0366794092 0.706139502 #> 28  16.614434 0.688556003 0.194694962 0.87263030 0.7329106666 0.502264237 #> 29   9.556883 0.031230325 0.164569248 0.98328375 0.2152726583 0.529934776 #> 30   7.498441 0.225562535 0.663206581 0.21856299 0.0160031442 0.258426348 #> 31  12.688517 0.300830806 0.856575005 0.66453006 0.1286025783 0.711753417 #> 32  21.501572 0.636465615 0.926546448 0.38956404 0.6860631041 0.968462550 #> 33  21.260901 0.479024550 0.552377595 0.04606364 0.6419412645 0.661077790 #> 34  14.632297 0.432171258 0.577065694 0.61691456 0.3273385202 0.796250590 #> 35  14.497032 0.706433838 0.687447746 0.59847499 0.3874819812 0.073209132 #> 36  18.396885 0.948576576 0.244718230 0.40685363 0.7075003954 0.884742884 #> 37  13.869003 0.180338768 0.044617158 0.85832815 0.6976554273 0.826700377 #> 38  18.723942 0.216899876 0.909854557 0.51768118 0.9256567662 0.725763959 #> 39  12.638636 0.680162918 0.070681219 0.97929341 0.4590177245 0.367329022 #> 40  23.423145 0.498845611 0.996891473 0.01701569 0.5959542021 0.523428417 #> 41  14.029103 0.641679348 0.611852417 0.67344783 0.1650109896 0.469878913 #> 42  10.133645 0.660284349 0.172558846 0.37126988 0.5669097845 0.098566386 #> 43  17.702075 0.096024158 0.909440965 0.91801064 0.8980773711 0.516034910 #> 44   9.704812 0.765600164 0.037451167 0.67797809 0.5944722812 0.449733827 #> 45  21.449573 0.769674804 0.593553790 0.66515246 0.8316899191 0.549461548 #> 46  17.173217 0.990712312 0.236977555 0.75604109 0.5934083650 0.649506190 #> 47  12.375727 0.970520903 0.906297267 0.54283715 0.7789706336 0.159034826 #> 48  15.289480 0.389182761 0.818872984 0.23928810 0.3977716470 0.293750792 #> 49  21.376577 0.461186465 0.699829357 0.50889357 0.8498827741 0.891284867 #> 50  12.578989 0.315241752 0.220000329 0.41726437 0.7418455814 0.588078626 #> 51  11.168373 0.174675894 0.727990938 0.72694885 0.3177902193 0.633231563 #> 52   6.519165 0.531573541 0.217084462 0.63768555 0.1116802238 0.259509476 #> 53   9.351079 0.493637016 0.456230198 0.39640996 0.1010953654 0.318212727 #> 54  21.221415 0.779308626 0.332799758 0.95948261 0.8000977482 0.339253881 #> 55  11.898898 0.204178343 0.568352669 0.29865803 0.3799467422 0.760761139 #> 56   9.994540 0.713397279 0.252205725 0.05020117 0.0527009717 0.010872464 #> 57  11.212755 0.065216112 0.464013567 0.57618742 0.9865086977 0.063137339 #> 58  17.643760 0.354206799 0.917660507 0.21790581 0.6041739669 0.263841792 #> 59  12.998995 0.825199421 0.972844218 0.12585627 0.1487827229 0.593836589 #> 60  17.250917 0.273818245 0.819082447 0.93815269 0.5387601722 0.297560029 #> 61  13.520628 0.570044951 0.902923798 0.80127513 0.1257892270 0.094622772 #> 62  20.353413 0.335719081 0.581366044 0.75805362 0.9631817536 0.761255360 #> 63  14.420761 0.596262789 0.773008481 0.53256516 0.0469350144 0.772476848 #> 64   9.039335 0.191518032 0.995123026 0.54680477 0.1614091825 0.401990393 #> 65  21.368053 0.947763938 0.710971250 0.09592650 0.9364874261 0.059082953 #> 66  17.218409 0.542480409 0.214942596 0.38834975 0.9706813623 0.750247884 #> 67  16.608372 0.544603393 0.291757630 0.17235189 0.7102740526 0.528322355 #> 68  16.916524 0.278597154 0.721759729 0.69072585 0.8850909304 0.275805118 #> 69  21.035036 0.446702469 0.866615703 0.67520850 0.9768753166 0.261237550 #> 70   9.715058 0.371511184 0.238453106 0.94629485 0.0348996436 0.543831169 #> 71   7.096699 0.028060974 0.004496308 0.19621952 0.4387572692 0.199000779 #> 72  23.801541 0.465987191 0.943516464 0.96863750 0.6444697606 0.645054772 #> 73  19.005415 0.390031387 0.438137200 0.38709628 0.9948324047 0.750239846 #> 74   5.508155 0.020065218 0.750603328 0.65034390 0.3146626207 0.270977834 #> 75  22.056397 0.376970928 0.667815764 0.81459620 0.8558819662 0.875621909 #> 76  20.100253 0.559912840 0.407973201 0.07096477 0.5403376815 0.851743174 #> 77  16.997922 0.857083586 0.351248815 0.52683032 0.8734173523 0.045849311 #> 78  16.229989 0.384809711 0.738091561 0.76347483 0.5155856195 0.381056859 #> 79  18.567385 0.527917036 0.664285493 0.43538664 0.8694592980 0.183312054 #> 80  14.777854 0.600637524 0.085224700 0.55247234 0.8565225946 0.921799641 #> 81  16.195221 0.261371358 0.856132157 0.20403065 0.3456831840 0.906186849 #> 82   5.815861 0.290050162 0.076983322 0.03102602 0.0001036914 0.192943318 #> 83  20.400779 0.480075174 0.852844803 0.96970706 0.2051797453 0.864375277 #> 84  14.644964 0.920005546 0.106346961 0.17861309 0.9452204907 0.013272602 #> 85  14.665226 0.400720185 0.484802824 0.77829279 0.2813335131 0.885660340 #> 86  15.467177 0.213172711 0.247219110 0.88571080 0.8809342172 0.391542107 #> 87  22.298574 0.671766816 0.686569211 0.83644625 0.9611162767 0.076176313 #> 88   3.783700 0.058614111 0.163623198 0.60536844 0.0040184539 0.646781305 #> 89  14.935145 0.997069135 0.952824800 0.90687946 0.5529002056 0.916653897 #> 90  12.325725 0.149035467 0.321854551 0.03590981 0.2192359727 0.834508620 #> 91  17.212777 0.518556636 0.361534117 0.13141851 0.6467271433 0.501247070 #> 92  20.624735 0.846120055 0.887723417 0.09403037 0.7277020467 0.602144770 #> 93  21.347570 0.718269724 0.828014418 0.69658366 0.8725874424 0.468959034 #> 94   9.117384 0.241314020 0.100656458 0.40572872 0.3819815461 0.886374238 #> 95  26.041792 0.547043368 0.906051578 0.06563664 0.8927457042 0.670548492 #> 96  22.120879 0.834801815 0.772730364 0.12649262 0.8438702857 0.393777719 #> 97  14.234657 0.027956025 0.383370670 0.93733022 0.7297612086 0.551290672 #> 98  13.233589 0.469384300 0.999652457 0.21638023 0.0384149766 0.242492676 #> 99  12.447911 0.805680031 0.349299049 0.66609201 0.3338233174 0.203208829 #> 100 16.197145 0.814051310 0.947318266 0.20390068 0.7492726522 0.068341703 #>              x6         x7         x8          x9         x10 #> 1   0.307273737 0.14355923 0.44218692 0.198986242 0.650485266 #> 2   0.993118094 0.68079862 0.67769852 0.726285317 0.983511552 #> 3   0.116309177 0.85928589 0.70071499 0.168132450 0.179127505 #> 4   0.715423077 0.83862999 0.06840642 0.226481330 0.137970441 #> 5   0.226108731 0.88131292 0.95850352 0.845540055 0.056558586 #> 6   0.133348548 0.23769774 0.24448352 0.345853601 0.546367619 #> 7   0.927281762 0.57863085 0.92628333 0.067319828 0.466504801 #> 8   0.894122657 0.89790251 0.50274708 0.027019454 0.896378375 #> 9   0.203664392 0.34442903 0.93551714 0.118044570 0.018531433 #> 10  0.256982919 0.76085823 0.43879963 0.013695368 0.850974229 #> 11  0.614005604 0.73110365 0.35048654 0.735729368 0.501423423 #> 12  0.441499188 0.85243238 0.47650409 0.923960766 0.166161776 #> 13  0.315594685 0.97581804 0.96615953 0.982190599 0.361006101 #> 14  0.101313761 0.11304750 0.29716193 0.405270204 0.652000184 #> 15  0.272646196 0.97026228 0.29064831 0.269694633 0.874176836 #> 16  0.653699397 0.64808278 0.85972225 0.488288651 0.728305660 #> 17  0.927870102 0.05607304 0.19331267 0.051062453 0.412472856 #> 18  0.026624670 0.47313710 0.80910837 0.002476830 0.159229281 #> 19  0.559491197 0.29462501 0.36548651 0.495834675 0.845703555 #> 20  0.854173652 0.61029962 0.25269965 0.243791283 0.884369102 #> 21  0.075883050 0.12110888 0.85608101 0.255749259 0.395998114 #> 22  0.205828856 0.62941651 0.13002437 0.552318777 0.038140789 #> 23  0.495889647 0.71195530 0.79190766 0.251577628 0.951395967 #> 24  0.261856944 0.61208279 0.35590151 0.628450167 0.783727515 #> 25  0.415961451 0.03442923 0.96434384 0.316115506 0.219439741 #> 26  0.439150000 0.66589079 0.11868321 0.924520392 0.330931987 #> 27  0.182377919 0.65296728 0.45816065 0.906491700 0.177759329 #> 28  0.078328266 0.45185844 0.52365044 0.091969796 0.362516306 #> 29  0.017769956 0.51680410 0.83706173 0.737795152 0.391453242 #> 30  0.728179973 0.67661080 0.03350404 0.569740540 0.903877350 #> 31  0.970845025 0.88093309 0.04332844 0.696488576 0.276456849 #> 32  0.535217588 0.73122915 0.79210294 0.700767504 0.139359318 #> 33  0.166490768 0.39861982 0.20269896 0.039940655 0.451336305 #> 34  0.058175651 0.43052065 0.06879545 0.431522404 0.110329849 #> 35  0.459139019 0.14540735 0.86444107 0.814231365 0.880956980 #> 36  0.622798821 0.45112033 0.07708986 0.566586277 0.533842705 #> 37  0.594819201 0.57878149 0.43100342 0.588247173 0.739250795 #> 38  0.743018237 0.07041712 0.97362256 0.880309032 0.719522785 #> 39  0.524280134 0.74232618 0.57095734 0.719317963 0.264481923 #> 40  0.496825250 0.54922071 0.75440665 0.936428893 0.673856367 #> 41  0.014718803 0.63454427 0.24245433 0.429431614 0.209621585 #> 42  0.957919125 0.13662858 0.62715787 0.286187326 0.690405166 #> 43  0.453089235 0.93023350 0.16841460 0.770643183 0.194759515 #> 44  0.981531849 0.65111864 0.44478963 0.616498637 0.782154128 #> 45  0.544705166 0.52870927 0.16467523 0.159274748 0.015032279 #> 46  0.360042401 0.22511539 0.11827678 0.401598006 0.934172524 #> 47  0.503146105 0.98326687 0.36746439 0.001646489 0.084436133 #> 48  0.074633632 0.10904879 0.94655891 0.417966036 0.034052273 #> 49  0.969791890 0.06994552 0.87541076 0.763934360 0.310959494 #> 50  0.648501314 0.77764551 0.26005891 0.794477667 0.784709724 #> 51  0.984565467 0.65832223 0.65729844 0.242587020 0.280400547 #> 52  0.536133257 0.25920274 0.12186463 0.759170954 0.165283795 #> 53  0.761059405 0.91833784 0.31884804 0.029104153 0.433594813 #> 54  0.564385727 0.14871035 0.62306103 0.437340783 0.814045200 #> 55  0.778454304 0.64068048 0.44699743 0.530409487 0.686513980 #> 56  0.639060989 0.20123842 0.70829345 0.429831351 0.777306163 #> 57  0.378960736 0.74362132 0.89002900 0.809296959 0.091200975 #> 58  0.359530671 0.84763743 0.10430650 0.922564619 0.742623895 #> 59  0.844231416 0.85363587 0.63041172 0.675023474 0.396673976 #> 60  0.456749181 0.80341257 0.84155891 0.093968193 0.296028223 #> 61  0.179034291 0.02387676 0.36426243 0.197463317 0.742924000 #> 62  0.966209196 0.79537771 0.62292278 0.475545125 0.466509440 #> 63  0.713411952 0.88655051 0.46074751 0.714371634 0.773027691 #> 64  0.024886031 0.60003734 0.16341228 0.538079284 0.022117051 #> 65  0.626456494 0.43278817 0.51386686 0.875383010 0.815023199 #> 66  0.827921322 0.92027580 0.14326644 0.293585413 0.303833421 #> 67  0.643069032 0.61601443 0.65029870 0.224765428 0.931795865 #> 68  0.708484262 0.43571816 0.15529453 0.690917831 0.540431014 #> 69  0.870727153 0.89730441 0.50830986 0.312329405 0.254818351 #> 70  0.281812582 0.76901352 0.08587044 0.483298179 0.477587364 #> 71  0.173224842 0.12811576 0.50302666 0.121796640 0.704463991 #> 72  0.109670019 0.53863312 0.03857188 0.690007235 0.007505554 #> 73  0.586222192 0.12901623 0.82403288 0.315731404 0.772408778 #> 74  0.850721327 0.51096488 0.28598557 0.816187683 0.265793564 #> 75  0.921526176 0.54379269 0.24675087 0.545915438 0.971040936 #> 76  0.675661902 0.24177609 0.39799359 0.947317184 0.190525120 #> 77  0.350588162 0.80314412 0.63209288 0.038526407 0.019695889 #> 78  0.008658075 0.94791372 0.94857885 0.647643877 0.612376980 #> 79  0.430898793 0.40736135 0.34011924 0.079619011 0.525731409 #> 80  0.724935097 0.51474456 0.62736599 0.432930770 0.634520042 #> 81  0.412256387 0.98154185 0.82491540 0.760893134 0.395447959 #> 82  0.550862395 0.35418673 0.14511538 0.293758840 0.174868220 #> 83  0.156360570 0.45584015 0.96713913 0.107331893 0.327313162 #> 84  0.043001293 0.22002471 0.08603899 0.072994442 0.614753182 #> 85  0.684644113 0.08183302 0.24046123 0.356314577 0.079166411 #> 86  0.514402497 0.36923607 0.63888373 0.571560843 0.519060970 #> 87  0.945687848 0.12666658 0.50339508 0.677988059 0.306281309 #> 88  0.843096942 0.73987251 0.25052326 0.690719102 0.671395304 #> 89  0.064883093 0.95586629 0.97903377 0.373410821 0.393671740 #> 90  0.762110915 0.66867450 0.65657958 0.097978055 0.747848247 #> 91  0.078384252 0.46808935 0.08984890 0.099009708 0.138926522 #> 92  0.133507663 0.53819245 0.63054293 0.774801583 0.377343046 #> 93  0.809696201 0.33095370 0.87676766 0.151495559 0.641383435 #> 94  0.559383239 0.62868211 0.93028154 0.394606580 0.994194674 #> 95  0.733729686 0.45255247 0.41948585 0.934998404 0.368559058 #> 96  0.349695476 0.88801518 0.49555987 0.739589564 0.337348551 #> 97  0.982668667 0.78420182 0.35270469 0.635668123 0.913685443 #> 98  0.408853880 0.13805955 0.24873487 0.338219850 0.909420361 #> 99  0.360873694 0.28131306 0.95872790 0.962416305 0.238379751 #> 100 0.652510039 0.70694650 0.35996012 0.111789910 0.411679972"},{"path":"https://koalaverse.github.io/vip/reference/get_feature_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract feature names — get_feature_names","title":"Extract feature names — get_feature_names","text":"Extract predictor names fitted model.","code":""},{"path":"https://koalaverse.github.io/vip/reference/get_feature_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract feature names — get_feature_names","text":"","code":"get_feature_names(object, ...)"},{"path":"https://koalaverse.github.io/vip/reference/get_feature_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract feature names — get_feature_names","text":"object appropriate fitted model object. ... Additional optional arguments.","code":""},{"path":"https://koalaverse.github.io/vip/reference/list_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"List metrics — list_metrics","title":"List metrics — list_metrics","text":"List available performance metrics.","code":""},{"path":"https://koalaverse.github.io/vip/reference/list_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List metrics — list_metrics","text":"","code":"list_metrics()"},{"path":"https://koalaverse.github.io/vip/reference/list_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List metrics — list_metrics","text":"data frame following columns: metric - optimization tuning metric; description - brief description metric; task - whether metric suitable regression classification; smaller_is_better - logical indicating whether smaller value metric considered better. yardstick_function - name corresponding function yardstick package.","code":""},{"path":"https://koalaverse.github.io/vip/reference/list_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List metrics — list_metrics","text":"","code":"(metrics <- list_metrics()) #>          metric                               description #> 1      accuracy                   Classification accuracy #> 2  bal_accuracy          Balanced classification accuracy #> 3        youden Youden;'s index (or Youden's J statistic) #> 4       roc_auc                      Area under ROC curve #> 5        pr_auc    Area under precision-recall (PR) curve #> 6       logloss                                  Log loss #> 7         brier                               Brier score #> 8           mae                       Mean absolute error #> 9          mape            Mean absolute percentage error #> 10         rmse                   Root mean squared error #> 11          rsq                   R-squared (correlation) #> 12     rsq_trad                   R-squared (traditional) #>                                task smaller_is_better yardstick_function #> 1  Binary/multiclass classification             FALSE       accuracy_vec #> 2  Binary/multiclass classification             FALSE   bal_accuracy_vec #> 3  Binary/multiclass classification             FALSE            j_index #> 4             Binary classification             FALSE        roc_auc_vec #> 5             Binary classification             FALSE         pr_auc_vec #> 6  Binary/multiclass classification              TRUE    mn_log_loss_vec #> 7  Binary/multiclass classification              TRUE    brier_class_vec #> 8                        Regression              TRUE            mae_vec #> 9                        Regression              TRUE           mape_vec #> 10                       Regression              TRUE           rmse_vec #> 11                       Regression             FALSE            rsq_vec #> 12                       Regression             FALSE       rsq_trad_vec metrics[metrics$task == \"Multiclass classification\", ] #> [1] metric             description        task               smaller_is_better  #> [5] yardstick_function #> <0 rows> (or 0-length row.names)"},{"path":"https://koalaverse.github.io/vip/reference/titanic.html","id":null,"dir":"Reference","previous_headings":"","what":"Survival of Titanic passengers — titanic","title":"Survival of Titanic passengers — titanic","text":"data set containing survival outcome, passenger class, age, sex, number family members large number passengers aboard ill-fated Titanic.","code":""},{"path":"https://koalaverse.github.io/vip/reference/titanic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival of Titanic passengers — titanic","text":"","code":"titanic"},{"path":"https://koalaverse.github.io/vip/reference/titanic.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Survival of Titanic passengers — titanic","text":"data frame 1309 observations following 6 variables: survived - binary levels \"yes\" survived \"\" otherwise; pclass - integer giving corresponding passenger (.e., ticket) class values 1–3; age - age years corresponding passenger (263 missing values); age - factor giving sex passenger levels \"male\" \"female\"; sibsp - integer giving number siblings/spouses aboard passenger (ranges 0–8); parch - integer giving number parents/children aboard passenger (ranges 0–9).","code":""},{"path":"https://koalaverse.github.io/vip/reference/titanic.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Survival of Titanic passengers — titanic","text":"https://hbiostat.org/data/.","code":""},{"path":"https://koalaverse.github.io/vip/reference/titanic.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Survival of Titanic passengers — titanic","text":"mentioned column description, age contains 263 NAs (missing values). complete version (versions) data set, see titanic_mice.","code":""},{"path":"https://koalaverse.github.io/vip/reference/titanic_mice.html","id":null,"dir":"Reference","previous_headings":"","what":"Survival of Titanic passengers — titanic_mice","title":"Survival of Titanic passengers — titanic_mice","text":"titanic data set contains 263 missing values (.e., NA's) age column. version data contains imputed values age column using multivariate imputation chained equations via mice package. Consequently, list containing 11 imputed versions observations containd titanic data frame; completed data sets dimension column structure titanic.","code":""},{"path":"https://koalaverse.github.io/vip/reference/titanic_mice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival of Titanic passengers — titanic_mice","text":"","code":"titanic_mice"},{"path":"https://koalaverse.github.io/vip/reference/titanic_mice.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Survival of Titanic passengers — titanic_mice","text":"object class mild (inherits list) length 21.","code":""},{"path":"https://koalaverse.github.io/vip/reference/titanic_mice.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Survival of Titanic passengers — titanic_mice","text":"Greenwell, Brandon M. (2022). Tree-Based Methods Statistical Learning R. CRC Press.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable importance — vi","title":"Variable importance — vi","text":"Compute variable importance scores predictors model.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable importance — vi","text":"","code":"vi(object, ...)  # Default S3 method vi(   object,   method = c(\"model\", \"firm\", \"permute\", \"shap\"),   feature_names = NULL,   abbreviate_feature_names = NULL,   sort = TRUE,   decreasing = TRUE,   scale = FALSE,   rank = FALSE,   ... )"},{"path":"https://koalaverse.github.io/vip/reference/vi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable importance — vi","text":"object fitted model object (e.g., randomForest object) object inherits class \"vi\". ... Additional optional arguments passed vi_model, vi_firm, vi_permute, vi_shap; see respective help pages details. method Character string specifying type variable importance (VI) compute. Current options : \"model\" (default), model-specific VI scores (see vi_model details). \"firm\", variance-based VI scores (see vi_firm details). \"permute\", permutation-based VI scores (see vi_permute details). \"shap\", Shapley-based VI scores (see vi_shap details). feature_names Character string giving names predictor variables (.e., features) interest. abbreviate_feature_names Integer specifying length abbreviate feature names. Default NULL results abbreviation (.e., full name feature printed). sort Logical indicating whether order sort variable importance scores. Default TRUE. decreasing Logical indicating whether variable importance scores sorted descending (TRUE) ascending (FALSE) order importance. Default TRUE. scale Logical indicating whether scale variable importance scores largest 100. Default FALSE. rank Logical indicating whether rank variable importance scores (.e., convert integer ranks). Default FALSE. Potentially useful comparing variable importance scores across different models using different methods.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable importance — vi","text":"tidy data frame (.e., tibble object) two columns: Variable - corresponding feature name; Importance - associated importance, computed average change performance random permutation (permutations, nsim > 1) feature question. lm/glm-like objects, whenever method = \"model\", sign (.e., POS/NEG) original coefficient also included column called Sign. method = \"permute\" nsim > 1, additional column (StDev) containing standard deviation individual permutation scores feature also returned; helps assess stability/variation individual permutation importance feature.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable importance — vi","text":"","code":"# # A projection pursuit regression example #  # Load the sample data data(mtcars)  # Fit a projection pursuit regression model mtcars.ppr <- ppr(mpg ~ ., data = mtcars, nterms = 1)  # Prediction wrapper that tells vi() how to obtain new predictions from your # fitted model pfun <- function(object, newdata) predict(object, newdata = newdata)  # Compute permutation-based variable importance scores set.seed(1434)  # for reproducibility (vis <- vi(mtcars.ppr, method = \"permute\", target = \"mpg\", nsim = 10,            metric = \"rmse\", pred_wrapper = pfun, train = mtcars)) #> # A tibble: 10 × 3 #>    Variable Importance   StDev #>    <chr>         <dbl>   <dbl> #>  1 wt         3.17     0.374   #>  2 hp         2.18     0.462   #>  3 gear       0.755    0.367   #>  4 qsec       0.674    0.240   #>  5 cyl        0.462    0.158   #>  6 am         0.173    0.144   #>  7 vs         0.0999   0.0605  #>  8 drat       0.0265   0.0564  #>  9 carb       0.00898  0.00885 #> 10 disp      -0.000824 0.00744  # Plot variable importance scores vip(vis, include_type = TRUE, all_permutations = TRUE,     geom = \"point\", aesthetics = list(color = \"forestgreen\", size = 3))   # # A binary classification example # if (FALSE) { # \\dontrun{ library(rpart)  # for classification and regression trees  # Load Wisconsin breast cancer data; see ?mlbench::BreastCancer for details data(BreastCancer, package = \"mlbench\") bc <- subset(BreastCancer, select = -Id)  # for brevity  # Fit a standard classification tree set.seed(1032)  # for reproducibility tree <- rpart(Class ~ ., data = bc, cp = 0)  # Prune using 1-SE rule (e.g., use `plotcp(tree)` for guidance) cp <- tree$cptable cp <- cp[cp[, \"nsplit\"] == 2L, \"CP\"] tree2 <- prune(tree, cp = cp)  # tree with three splits  # Default tree-based VIP vip(tree2)  # Computing permutation importance requires a prediction wrapper. For # classification, the return value depends on the chosen metric; see # `?vip::vi_permute` for details. pfun <- function(object, newdata) {   # Need vector of predicted class probabilities when using  log-loss metric   predict(object, newdata = newdata, type = \"prob\")[, \"malignant\"] }  # Permutation-based importance (note that only the predictors that show up # in the final tree have non-zero importance) set.seed(1046)  # for reproducibility vi(tree2, method = \"permute\", nsim = 10, target = \"Class\", train = bc,    metric = \"logloss\", pred_wrapper = pfun, reference_class = \"malignant\")  # Equivalent (but not sorted) set.seed(1046)  # for reproducibility vi_permute(tree2, nsim = 10, target = \"Class\", metric = \"logloss\",            pred_wrapper = pfun, reference_class = \"malignant\") } # }"},{"path":"https://koalaverse.github.io/vip/reference/vi_firm.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance-based variable importance — vi_firm","title":"Variance-based variable importance — vi_firm","text":"Compute variance-based variable importance (VI) scores using simple feature importance ranking measure (FIRM) approach; details, see Greenwell et al. (2018) Scholbeck et al. (2019).","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_firm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance-based variable importance — vi_firm","text":"","code":"vi_firm(object, ...)  # Default S3 method vi_firm(   object,   feature_names = NULL,   train = NULL,   var_fun = NULL,   var_continuous = stats::sd,   var_categorical = function(x) diff(range(x))/4,   ... )"},{"path":"https://koalaverse.github.io/vip/reference/vi_firm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance-based variable importance — vi_firm","text":"object fitted model object (e.g., randomForest object). ... Additional arguments passed pdp::partial() function (e.g., ice = TRUE, prob = TRUE, prediction wrapper via pred.fun argument); see ?pdp::partial details useful arguments. feature_names Character string giving names predictor variables (.e., features) interest. NULL (default) internal get_feature_names() function called try extract automatically. good practice always specify argument. train matrix-like R object (e.g., data frame matrix) containing training data. NULL (default) internal get_training_data() function called try extract automatically. good practice always specify argument. var_fun Deprecated; use var_continuous var_categorical instead. var_continuous Function used quantify variability effects continuous features. Defaults using sample standard deviation (.e., stats::sd()). var_categorical Function used quantify variability effects categorical features. Defaults using range divided four; , function(x) diff(range(x)) / 4.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_firm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance-based variable importance — vi_firm","text":"tidy data frame (.e., tibble object) two columns: Variable - corresponding feature name; Importance - associated importance, computed described Greenwell et al. (2018).","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_firm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variance-based variable importance — vi_firm","text":"approach based quantifying relative \"flatness\" effect feature assumes user familiarity pdp::partial() function.  Feature effects can assessed using partial dependence (PD) plots (Friedman, 2001) individual conditional expectation (ICE) plots (Goldstein et al., 2014). methods model-agnostic can applied supervised learning algorithm. default, relative \"flatness\" defined computing standard deviation y-axis values feature effect plot numeric features; categorical features, default use range divided 4. can changed via var_continuous var_categorical arguments. See Greenwell et al. (2018) details additional examples.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_firm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Variance-based variable importance — vi_firm","text":"approach can provide misleading results presence interaction effects (akin interpreting main effect coefficients linear higher level interaction effects).","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_firm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Variance-based variable importance — vi_firm","text":"J. H. Friedman. Greedy function approximation: gradient boosting machine. Annals Statistics, 29: 1189-1232, 2001. Goldstein, ., Kapelner, ., Bleich, J., Pitkin, E., Peeking Inside Black Box: Visualizing Statistical Learning Plots Individual Conditional Expectation. (2014) Journal Computational Graphical Statistics, 24(1): 44-65, 2015. Greenwell, B. M., Boehmke, B. C., McCarthy, . J. Simple Effective Model-Based Variable Importance Measure. arXiv preprint arXiv:1805.04755 (2018). Scholbeck, C. . Scholbeck, Molnar, C.,  Heumann C., Bischl, B., Casalicchio, G. Sampling, Intervention, Prediction, Aggregation: Generalized Framework Model-Agnostic Interpretations. arXiv preprint arXiv:1904.03959 (2019).","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_firm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance-based variable importance — vi_firm","text":"","code":"if (FALSE) { # \\dontrun{ # # A projection pursuit regression example #  # Load the sample data data(mtcars)  # Fit a projection pursuit regression model mtcars.ppr <- ppr(mpg ~ ., data = mtcars, nterms = 1)  # Compute variable importance scores using the FIRM method; note that the pdp # package knows how to work with a \"ppr\" object, so there's no need to pass # the training data or a prediction wrapper, but it's good practice. vi_firm(mtcars.ppr, train = mtcars)  # For unsopported models, need to define a prediction wrapper; this approach # will work for ANY model (supported or unsupported, so better to just always # define it pass it) pfun <- function(object, newdata) {   # To use partial dependence, this function needs to return the AVERAGE   # prediction (for ICE, simply omit the averaging step)   mean(predict(object, newdata = newdata)) }  # Equivalent to the previous results (but would work if this type of model # was not explicitly supported) vi_firm(mtcars.ppr, pred.fun = pfun, train = mtcars)  # Equivalent VI scores, but the output is sorted by default vi(mtcars.ppr, method = \"firm\")  # Use MAD to estimate variability of the partial dependence values vi_firm(mtcars.ppr, var_continuous = stats::mad)  # Plot VI scores vip(mtcars.ppr, method = \"firm\", train = mtcars, pred.fun = pfun) } # }"},{"path":"https://koalaverse.github.io/vip/reference/vi_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-specific variable importance — vi_model","title":"Model-specific variable importance — vi_model","text":"Compute model-specific variable importance scores predictors fitted model.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-specific variable importance — vi_model","text":"","code":"vi_model(object, ...)  # Default S3 method vi_model(object, ...)  # S3 method for class 'C5.0' vi_model(object, type = c(\"usage\", \"splits\"), ...)  # S3 method for class 'train' vi_model(object, ...)  # S3 method for class 'cubist' vi_model(object, ...)  # S3 method for class 'earth' vi_model(object, type = c(\"nsubsets\", \"rss\", \"gcv\"), ...)  # S3 method for class 'gbm' vi_model(object, type = c(\"relative.influence\", \"permutation\"), ...)  # S3 method for class 'glmnet' vi_model(object, lambda = NULL, ...)  # S3 method for class 'cv.glmnet' vi_model(object, lambda = NULL, ...)  # S3 method for class 'H2OBinomialModel' vi_model(object, ...)  # S3 method for class 'H2OMultinomialModel' vi_model(object, ...)  # S3 method for class 'H2ORegressionModel' vi_model(object, ...)  # S3 method for class 'lgb.Booster' vi_model(object, type = c(\"gain\", \"cover\", \"frequency\"), ...)  # S3 method for class 'mixo_pls' vi_model(object, ncomp = NULL, ...)  # S3 method for class 'mixo_spls' vi_model(object, ncomp = NULL, ...)  # S3 method for class 'WrappedModel' vi_model(object, ...)  # S3 method for class 'Learner' vi_model(object, ...)  # S3 method for class 'nn' vi_model(object, type = c(\"olden\", \"garson\"), ...)  # S3 method for class 'nnet' vi_model(object, type = c(\"olden\", \"garson\"), ...)  # S3 method for class 'RandomForest' vi_model(object, type = c(\"accuracy\", \"auc\"), ...)  # S3 method for class 'constparty' vi_model(object, ...)  # S3 method for class 'cforest' vi_model(object, ...)  # S3 method for class 'mvr' vi_model(object, ...)  # S3 method for class 'mixo_pls' vi_model(object, ncomp = NULL, ...)  # S3 method for class 'mixo_spls' vi_model(object, ncomp = NULL, ...)  # S3 method for class 'WrappedModel' vi_model(object, ...)  # S3 method for class 'Learner' vi_model(object, ...)  # S3 method for class 'randomForest' vi_model(object, ...)  # S3 method for class 'ranger' vi_model(object, ...)  # S3 method for class 'rpart' vi_model(object, ...)  # S3 method for class 'mlp' vi_model(object, type = c(\"olden\", \"garson\"), ...)  # S3 method for class 'ml_model_decision_tree_regression' vi_model(object, ...)  # S3 method for class 'ml_model_decision_tree_classification' vi_model(object, ...)  # S3 method for class 'ml_model_gbt_regression' vi_model(object, ...)  # S3 method for class 'ml_model_gbt_classification' vi_model(object, ...)  # S3 method for class 'ml_model_generalized_linear_regression' vi_model(object, ...)  # S3 method for class 'ml_model_linear_regression' vi_model(object, ...)  # S3 method for class 'ml_model_random_forest_regression' vi_model(object, ...)  # S3 method for class 'ml_model_random_forest_classification' vi_model(object, ...)  # S3 method for class 'lm' vi_model(object, type = c(\"stat\", \"raw\"), ...)  # S3 method for class 'model_fit' vi_model(object, ...)  # S3 method for class 'workflow' vi_model(object, ...)  # S3 method for class 'xgb.Booster' vi_model(object, type = c(\"gain\", \"cover\", \"frequency\"), ...)"},{"path":"https://koalaverse.github.io/vip/reference/vi_model.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Model-specific variable importance — vi_model","text":"Johan Bring (1994) Standardize Regression Coefficients, American Statistician, 48:3, 209-213, DOI: 10.1080/00031305.1994.10476059.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-specific variable importance — vi_model","text":"object fitted model object (e.g., randomForest object). See details section see variable importance computed supported model types. ... Additional optional arguments passed methods. See details section arguments can passed specific object types. type Character string specifying type variable importance return (used models). See details section methods argument applies . lambda Numeric value penalty parameter glmnet model (equivalent s argument coef.glmnet). See section glmnet details . ncomp integer number partial least squares components used importance calculations. components requested used model, model's components used.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-specific variable importance — vi_model","text":"tidy data frame (.e., tibble object) two columns: Variable - corresponding feature name; Importance - associated importance, computed average change performance random permutation (permutations, nsim > 1) feature question. lm/glm-like objects, sign (.e., POS/NEG) original coefficient also included column called Sign.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model-specific variable importance — vi_model","text":"Computes model-specific variable importance scores depending class object: C5.0 - Variable importance measured determining percentage training set samples fall terminal nodes split. example, predictor first split automatically importance measurement 100 percent since samples affected split. predictors may used frequently splits, terminal nodes cover handful training set samples, importance scores may close zero. strategy applied rule-based models boosted versions model. underlying function can also return number times predictor involved split using option metric = \"usage\". See C5imp details. cubist - Cubist output contains variable usage statistics. gives percentage times variable used condition /linear model. Note output probably inconsistent rules shown output summary.cubist. split tree, Cubist saves linear model (feature selection) allowed terms variable used current split split . Quinlan (1992) discusses smoothing algorithm model prediction linear combination parent child model along tree. , final prediction function linear models initial node terminal node. percentages shown Cubist output reflects models involved prediction (opposed terminal models shown output). variable importance used linear combination usage rule conditions model. See summary.cubist varImp details. glmnet - Similar (generalized) linear models, absolute value coefficients returned specific model. important features  (hence, estimated coefficients) standardized prior fitting model. can specify coefficients return passing specific value penalty parameter via lambda argument (equivalent s argument coef.glmnet). default, lambda = NULL coefficients corresponding final penalty value sequence returned; words, ALWAYS SPECIFY lambda! cv.glmnet objects, largest value lambda error within one standard error minimum used default. multinomial response, coefficients corresponding first class used; , first component coef.glmnet. cforest - Variable importance measured way similar computed importance. Besides standard version, conditional version available adjusts correlations predictor variables. conditional = TRUE, importance variable computed permuting within grid defined predictors associated (1 - p-value greater threshold) variable interest. resulting variable importance score conditional sense beta coefficients regression models, represents effect variable main effects interactions. See Strobl et al. (2008) details. Note, however, random forest results subject random variation. Thus, interpreting importance ranking, check whether ranking achieved different random seed - otherwise increase number trees ntree ctree_control. Note presence missings predictor variables procedure described Hapfelmeier et al. (2012) performed. See varimp details. earth - earth package uses three criteria estimating variable importance MARS model (see evimp details): nsubsets criterion (type = \"nsubsets\") counts number model subsets include feature. Variables included subsets considered important. criterion used summary.earth print variable importance. \"subsets\" mean subsets terms generated earth()'s backward pass. one subset model size (one size selected model) subset best set terms model size. (subsets specified $prune.terms component earth()'s return value.) subsets smaller equal size final model used estimating variable importance. default method used vi_model. rss criterion (type = \"rss\") first calculates decrease RSS subset relative previous subset earth()’s backward pass. (multiple response models, RSS's calculated responses.) variable sums decreases subsets include variable. Finally, ease interpretation summed decreases scaled largest summed decrease 100. Variables cause larger net decreases RSS considered important. gcv criterion (type = \"gcv\") similar rss approach, uses GCV statistic instead RSS. Note adding variable can sometimes increase GCV. (Adding variable deleterious effect model, measured terms estimated predictive power unseen data.) happens often enough, variable can negative total importance, thus appear less important unused variables. gbm - Variable importance computed using one two approaches (See summary.gbm details): standard approach (type = \"relative.influence\") described Friedman (2001). distribution = \"gaussian\" returns reduction squared error attributable variable. loss functions returns reduction attributable variable sum squared error predicting gradient iteration. describes relative influence variable reducing loss function. default method used vi_model. experimental permutation-based approach (type = \"permutation\"). method randomly permutes predictor variable time computes associated reduction predictive performance. similar variable importance measures Leo Breiman uses random forests, gbm currently computes using entire training dataset (--bag observations). H2OModel - See h2o.varimp visit https://docs.h2o.ai/h2o/latest-stable/h2o-docs/variable-importance.html details. nnet - Two popular methods constructing variable importance scores neural networks Garson algorithm (Garson 1991), later modified Goh (1995), Olden algorithm (Olden et al. 2004). algorithms, basis importance scores network’s connection weights. Garson algorithm determines variable importance identifying weighted connections nodes interest. Olden’s algorithm, hand, uses product raw connection weights input output neuron sums product across hidden neurons. shown outperform Garson method various simulations. DNNs, similar method due Gedeon (1997) considers weights connecting input features first two hidden layers (simplicity speed); method can slow large networks.. implement Olden Garson algorithms, use type = \"olden\" type = \"garson\", respectively. See garson olden details. lm/glm - (generalized) linear models, variable importance typically based absolute value corresponding t-statistics (Bring, 1994). models, sign original coefficient also returned. default, type = \"stat\" used; however, inputs appropriately standardized raw coefficients can used type = \"raw\". Note Bring (1994) provides motivation using absolute value associated t-statistics. sparklyr - Spark ML library provides standard variable importance measures tree-based methods (e.g., random forests). See ml_feature_importances details. randomForest Random forests typically provide two measures variable importance. first measure computed permuting --bag (OOB) data: tree, prediction error OOB portion data recorded (error rate classification MSE regression). done permuting predictor variable. difference two averaged trees forest, normalized standard deviation differences. standard deviation differences equal 0 variable, division done (average almost always equal 0 case). second measure total decrease node impurities splitting variable, averaged trees. classification, node impurity measured Gini index. regression, measured residual sum squares. See importance details, including additional arguments can passed via ... argument vi_model. cforest - approach described cforest (package partykit) . See varimp varimpAUC (type = \"auc\") details. ranger - Variable importance ranger objects computed usual way random forests. approach used depends importance argument provided initial call ranger. See importance details. rpart - stated one rpart vignettes. variable may appear tree many times, either primary surrogate variable. overall measure variable importance sum goodness split measures split primary variable, plus \"goodness\" * (adjusted agreement) splits surrogate. Imagine two variables essentially duplicates ; count surrogates, split importance neither showing strongly . See rpart details. caret - Various model-specific model-agnostic approaches depend learning algorithm employed original call caret. See varImp details. xgboost - linear models, variable importance absolute magnitude estimated coefficients. reason, order obtain meaningful ranking importance linear model, features need scale (also want using either L1 L2 regularization). Otherwise, approach described Friedman (2001) gbms used. See xgb.importance details. tree models, can obtain three different types variable importance: Using type = \"gain\" (default) gives fractional contribution feature model based total gain corresponding feature's splits. Using type = \"cover\" gives number observations related feature. Using type = \"frequency\" gives percentages representing relative number times feature used throughout tree ensemble. lightgbm - xgboost models, except lgb.importance (method calls internally) additional argument, percentage, defaults TRUE, resulting VI scores shown relative percentage; pass percentage = FALSE call vi_model() produce VI scores lightgbm models raw scale.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Model-specific variable importance — vi_model","text":"Inspired caret's varImp function.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-specific variable importance — vi_model","text":"","code":"if (FALSE) { # \\dontrun{ # Basic example using imputed titanic data set t3 <- titanic_mice[[1L]]  # Fit a simple model set.seed(1449)  # for reproducibility bst <- lightgbm::lightgbm(   data = data.matrix(subset(t3, select = -survived)),   label = ifelse(t3$survived == \"yes\", 1, 0),   params = list(\"objective\" = \"binary\", \"force_row_wise\" = TRUE),   verbose = 0 )  # Compute VI scores vi(bst)  # defaults to `method = \"model\"` vi_model(bst)  # same as above  # Same as above (since default is `method = \"model\"`), but returns a plot vip(bst, geom = \"point\") vi_model(bst, type = \"cover\") vi_model(bst, type = \"cover\", percentage = FALSE)  # Compare to lightgbm::lgb.importance(bst) } # }"},{"path":"https://koalaverse.github.io/vip/reference/vi_permute.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation-based variable importance — vi_permute","title":"Permutation-based variable importance — vi_permute","text":"Compute permutation-based variable importance scores predictors model; details algorithm, see Greenwell Boehmke (2020).","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_permute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation-based variable importance — vi_permute","text":"","code":"vi_permute(object, ...)  # Default S3 method vi_permute(   object,   feature_names = NULL,   train = NULL,   target = NULL,   metric = NULL,   smaller_is_better = NULL,   type = c(\"difference\", \"ratio\"),   nsim = 1,   keep = TRUE,   sample_size = NULL,   sample_frac = NULL,   reference_class = NULL,   event_level = NULL,   pred_wrapper = NULL,   verbose = FALSE,   parallel = FALSE,   parallelize_by = c(\"features\", \"repetitions\"),   ... )"},{"path":"https://koalaverse.github.io/vip/reference/vi_permute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation-based variable importance — vi_permute","text":"object fitted model object (e.g., randomForest object). ... Additional optional arguments passed foreach (e.g., .packages .export). feature_names Character string giving names predictor variables (.e., features) interest. NULL (default) inferred train target arguments (see ). good practice always specify argument. train matrix-like R object (e.g., data frame matrix) containing training data. NULL (default) internal get_training_data() function called try extract automatically. good practice always specify argument. target Either character string giving name (position) target column train , train contains feature columns, vector containing target values used train object. metric Either function character string specifying performance metric use computing model performance (e.g., RMSE regression accuracy binary classification). metric function, requires two arguments, actual predicted, return single, numeric value. Ideally, metric used train object. See list_metrics() list built-metrics. smaller_is_better Logical indicating whether smaller value metric better. Default NULL. Must supplied metric user-supplied function. type Character string specifying compare baseline permuted performance metrics. Current options \"difference\" (default) \"ratio\". nsim Integer specifying number Monte Carlo replications perform. Default 1. nsim > 1, results replication simply averaged together (standard deviation also returned). keep Logical indicating whether keep individual permutation scores nsim repetitions. TRUE (default) individual variable importance scores stored attribute called \"raw_scores\". (used nsim > 1.) sample_size Integer specifying size random sample use Monte Carlo repetition. Default NULL (.e., use available training data). specified sample_frac. Can used reduce computation time large data sets. sample_frac Proportion specifying size random sample use Monte Carlo repetition. Default NULL (.e., use available training data). specified sample_size. Can used reduce computation time large data sets. reference_class Deprecated, use event_level instead. event_level String specifying factor level truth consider \"event\". Options \"first\" (default) \"second\". argument applicable binary classification metric one \"roc_auc\", \"pr_auc\", \"youden\". argument passed corresponding yardstick metric. pred_wrapper Prediction function requires two arguments, object newdata. output function determined metric used: Regression - numeric vector predicted outcomes. Binary classification - vector predicted class labels (e.g., using misclassification error) vector predicted class probabilities reference class (e.g., using log loss AUC). Multiclass classification - vector predicted class labels (e.g., using misclassification error) matrix/data frame predicted class probabilities class (e.g., using log loss AUC). verbose Logical indicating whether print information construction variable importance scores. Default FALSE. parallel Logical indicating whether run vi_permute() parallel (using backend provided foreach package). Default FALSE. TRUE, foreach-compatible backend must provided must provided. Note set.seed() work foreach's parellelized loops; workaround, see solution. parallelize_by Character string specifying whether parallelize across features (parallelize_by = \"features\") repetitions (parallelize_by = \"reps\"); latter useful whenever nsim > 1. Default \"features\".","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_permute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation-based variable importance — vi_permute","text":"tidy data frame (.e., tibble object) two columns: Variable - corresponding feature name; Importance - associated importance, computed average change performance random permutation (permutations, nsim > 1) feature question. nsim > 1, additional column (StDev) containing standard deviation individual permutation scores feature also returned; helps assess stability/variation individual permutation importance feature.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_permute.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Permutation-based variable importance — vi_permute","text":"Brandon M. Greenwell Bradley C. Boehmke, R Journal (2020) 12:1, pages 343-366.","code":""},{"path":[]},{"path":"https://koalaverse.github.io/vip/reference/vi_shap.html","id":null,"dir":"Reference","previous_headings":"","what":"SHAP-based variable importance — vi_shap","title":"SHAP-based variable importance — vi_shap","text":"Compute SHAP-based VI scores predictors model. See details .","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_shap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SHAP-based variable importance — vi_shap","text":"","code":"vi_shap(object, ...)  # Default S3 method vi_shap(object, feature_names = NULL, train = NULL, ...)"},{"path":"https://koalaverse.github.io/vip/reference/vi_shap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SHAP-based variable importance — vi_shap","text":"object fitted model object (e.g., randomForest object). ... Additional arguments passed fastshap::explain() (e.g., nsim =  30, adjust = TRUE, avprediction wrapper via pred_wrapper argument); see ?fastshap::explain details useful arguments. feature_names Character string giving names predictor variables (.e., features) interest. NULL (default) inferred train target arguments (see ). good practice always specify argument. train matrix-like R object (e.g., data frame matrix) containing training data. NULL (default) internal get_training_data() function called try extract automatically. good practice always specify argument.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_shap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SHAP-based variable importance — vi_shap","text":"tidy data frame (.e., tibble object) two columns: Variable - corresponding feature name; Importance - associated importance, computed mean absolute Shapley value.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_shap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SHAP-based variable importance — vi_shap","text":"approach computing VI scores based mean absolute value SHAP values feature; see, example, https://github.com/shap/shap references therein. Strumbelj, E., Kononenko, . Explaining prediction models individual predictions feature contributions. Knowledge information systems 41.3 (2014): 647-665.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vi_shap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SHAP-based variable importance — vi_shap","text":"","code":"if (FALSE) { # \\dontrun{ library(ggplot2)  # for theme_light() function library(xgboost)  # Simulate training data trn <- gen_friedman(500, sigma = 1, seed = 101)  # ?vip::gen_friedman  # Feature matrix X <- data.matrix(subset(trn, select = -y))  # matrix of feature values  # Fit an XGBoost model; hyperparameters were tuned using 5-fold CV set.seed(859)  # for reproducibility bst <- xgboost(X, label = trn$y, nrounds = 338, max_depth = 3, eta = 0.1,                verbose = 0)  # Construct VIP using \"exact\" SHAP values from XGBoost's internal Tree SHAP # functionality vip(bst, method = \"shap\", train = X, exact = TRUE, include_type = TRUE,     geom = \"point\", horizontal = FALSE,     aesthetics = list(color = \"forestgreen\", shape = 17, size = 5)) +   theme_light()  # Use Monte-Carlo approach, which works for any model; requires prediction # wrapper pfun_prob <- function(object, newdata) {  # prediction wrapper   # For Shapley explanations, this should ALWAYS return a numeric vector   predict(object, newdata = newdata, type = \"prob\")[, \"yes\"] }  # Compute Shapley-based VI scores set.seed(853)  # for reproducibility vi_shap(rfo, train = subset(t1, select = -survived), pred_wrapper = pfun_prob,         nsim = 30) ## # A tibble: 5 × 2 ## Variable Importance ##   <chr>         <dbl> ## 1 pclass       0.104 ## 2 age          0.0649 ## 3 sex          0.272 ## 4 sibsp        0.0260 ## 5 parch        0.0291 } # }"},{"path":"https://koalaverse.github.io/vip/reference/vip.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable importance plots — vip","title":"Variable importance plots — vip","text":"Plot variable importance scores predictors model.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable importance plots — vip","text":"","code":"vip(object, ...)  # Default S3 method vip(   object,   num_features = 10L,   geom = c(\"col\", \"point\", \"boxplot\", \"violin\"),   mapping = NULL,   aesthetics = list(),   horizontal = TRUE,   all_permutations = FALSE,   jitter = FALSE,   include_type = FALSE,   ... )  # S3 method for class 'model_fit' vip(object, ...)  # S3 method for class 'workflow' vip(object, ...)  # S3 method for class 'WrappedModel' vip(object, ...)  # S3 method for class 'Learner' vip(object, ...)"},{"path":"https://koalaverse.github.io/vip/reference/vip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable importance plots — vip","text":"object fitted model (e.g., class randomForest object) vi object. ... Additional optional arguments passed vi. num_features Integer specifying number variable importance scores plot. Default 10. geom Character string specifying type plot construct. currently available options described . geom = \"col\" uses geom_col construct bar chart variable importance scores. geom = \"point\" uses geom_point construct Cleveland dot plot variable importance scores. geom = \"boxplot\" uses geom_boxplot construct boxplot plot variable importance scores. option can permutation-based importance method nsim > 1 keep = TRUE; see vi_permute details. geom = \"violin\" uses geom_violin construct violin plot variable importance scores. option can permutation-based importance method nsim > 1 keep = TRUE; see vi_permute details. mapping Set aesthetic mappings created aes-related functions /tidy eval helpers. See example usage . aesthetics List specifying additional arguments passed layer. often aesthetics, used set aesthetic fixed value, likecolour = \"red\" size = 3. See example usage . horizontal Logical indicating whether plot importance scores x-axis (TRUE). Default TRUE. all_permutations Logical indicating whether plot permutation scores along average. Default FALSE. (used permutation scores nsim > 1.) jitter Logical indicating whether jitter raw permutation scores. Default FALSE. (used all_permutations = TRUE.) include_type Logical indicating whether include type variable importance computed axis label. Default FALSE.","code":""},{"path":"https://koalaverse.github.io/vip/reference/vip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable importance plots — vip","text":"","code":"# # A projection pursuit regression example using permutation-based importance #  # Load the sample data data(mtcars)  # Fit a projection pursuit regression model model <- ppr(mpg ~ ., data = mtcars, nterms = 1)  # Construct variable importance plot (permutation importance, in this case) set.seed(825)  # for reproducibility pfun <- function(object, newdata) predict(object, newdata = newdata) vip(model, method = \"permute\", train = mtcars, target = \"mpg\", nsim = 10,     metric = \"rmse\", pred_wrapper = pfun)   # Better yet, store the variable importance scores and then plot set.seed(825)  # for reproducibility vis <- vi(model, method = \"permute\", train = mtcars, target = \"mpg\",           nsim = 10, metric = \"rmse\", pred_wrapper = pfun) vip(vis, geom = \"point\", horiz = FALSE)  vip(vis, geom = \"point\", horiz = FALSE, aesthetics = list(size = 3))   # Plot unaggregated permutation scores (boxplot colored by feature) library(ggplot2)  # for `aes()`-related functions and tidy eval helpers vip(vis, geom = \"boxplot\", all_permutations = TRUE, jitter = TRUE,     #mapping = aes_string(fill = \"Variable\"),   # for ggplot2 (< 3.0.0)     mapping = aes(fill = .data[[\"Variable\"]]),  # for ggplot2 (>= 3.0.0)     aesthetics = list(color = \"grey35\", size = 0.8))   # # A binary classification example # if (FALSE) { # \\dontrun{ library(rpart)  # for classification and regression trees  # Load Wisconsin breast cancer data; see ?mlbench::BreastCancer for details data(BreastCancer, package = \"mlbench\") bc <- subset(BreastCancer, select = -Id)  # for brevity  # Fit a standard classification tree set.seed(1032)  # for reproducibility tree <- rpart(Class ~ ., data = bc, cp = 0)  # Prune using 1-SE rule (e.g., use `plotcp(tree)` for guidance) cp <- tree$cptable cp <- cp[cp[, \"nsplit\"] == 2L, \"CP\"] tree2 <- prune(tree, cp = cp)  # tree with three splits  # Default tree-based VIP vip(tree2)  # Computing permutation importance requires a prediction wrapper. For # classification, the return value depends on the chosen metric; see # `?vip::vi_permute` for details. pfun <- function(object, newdata) {   # Need vector of predicted class probabilities when using  log-loss metric   predict(object, newdata = newdata, type = \"prob\")[, \"malignant\"] }  # Permutation-based importance (note that only the predictors that show up # in the final tree have non-zero importance) set.seed(1046)  # for reproducibility vip(tree2, method = \"permute\", nsim = 10, target = \"Class\",     metric = \"logloss\", pred_wrapper = pfun, reference_class = \"malignant\") } # }"},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"vip-041","dir":"Changelog","previous_headings":"","what":"vip 0.4.1","title":"vip 0.4.1","text":"CRAN release: 2023-08-21","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"changed-0-4-1","dir":"Changelog","previous_headings":"","what":"Changed","title":"vip 0.4.1","text":"Minor tweaks URLs tests pass CRAN checks.","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"vip-040","dir":"Changelog","previous_headings":"","what":"vip 0.4.0","title":"vip 0.4.0","text":"CRAN release: 2023-07-19","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"changed-0-4-0","dir":"Changelog","previous_headings":"","what":"Changed","title":"vip 0.4.0","text":"NEWS file now follows Keep Changelog format. Removed lifecycle badge README file. training data explicitly passed cases using vi_permute(), vi_shap(), vi_firm(). Raised R version dependency >= 4.1.0 (introduction native piper operator |>). vi_permute function now relies yardstick package compouting performance measures (e.g., RMSE log loss); consequently, user-supplied metric functions now nned conform yardstick metric argument names. var_fun argument vi_firm() deprecated; use new var_continuous var_categorical instead. explicit ice argument vi_firm() removed; really needed since can passed via ... argument. Removed magrittr imports; ’s easy enough just laod package need use R’s newer internal pipe operator. Tweaked examples. Tests based fastshap now check make sure ’s available. Suppress loading mixOmics tests. Switched lifecycle badge “maturing”, superseded, “experimental.” Fixed H2O URL vi_model.R. Removed unnecessary LazyData: true line DESCRIPTION file. Switched using markdown syntax roxygen2 comments.","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"added-0-4-0","dir":"Changelog","previous_headings":"","what":"Added","title":"vip 0.4.0","text":"vi_model() now supports lightgbm models. Thanks @nipnipj suggestion (#146). permutation importance method (.e., function vi_permute()) now integrates uses yardstick performance metrics. list_metrics() gained additional smaller_is_better column indicating whether corresponding metric minimized (smaller_is_better = TRUE) maximized (smaller_is_better = FALSE); thanks @topedo. Additionally, column names now lower case. Added support partial least squares via mixOmics package (PR #129); thanks @topedo. Added support workflows parsnip packages tidymodels ecosystem (PR #128); thanks @topedo. New pkgdown site vignette based original R Journal article.","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"removed-0-4-0","dir":"Changelog","previous_headings":"","what":"Removed","title":"vip 0.4.0","text":"Function add_sparklines() seems scope removed. Function vint() also seems scope slow implement practical problems; now, function likely live moreparty package.","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"fixed-0-4-0","dir":"Changelog","previous_headings":"","what":"Fixed","title":"vip 0.4.0","text":"Fix model-based VI support mlr, mlr3, parsnip, workflows model fits.","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"vip-032","dir":"Changelog","previous_headings":"","what":"vip 0.3.2","title":"vip 0.3.2","text":"CRAN release: 2020-12-17","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"miscellaneous-0-3-2","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"vip 0.3.2","text":"Add tools/ .Rbuildignore.","code":""},{"path":[]},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"miscellaneous-0-3-1","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"vip 0.3.1","text":"Change http://spark.rstudio.com/mlib/ https://spark.rstudio.com/mlib/ NEWS.md. Remove unnecessary codecov.yml file.","code":""},{"path":[]},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"user-visable-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"User-visable changes","title":"vip 0.3.0","text":"Removed deprecated arguments vip(); particular, bar, width, alpha, color, fill, size, shape. Users instead rely mapping aesthetics arguments; see ?vip::vip details.","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"vip 0.3.0","text":"Fixed couple bugs occurred using vi_model() glmnet package. particular, added new lamnda parameter specifying value penalty term use extracting estimated coefficients. equivalent s argument glmnet::coef(); name lambda chosen conflict arguments vi(). Additionally, vi_model() return absolute value estimated coefficients glmnet models like advertised, now fixed version (#103).","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"miscellaneous-0-3-0","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"vip 0.3.0","text":"Switched Travis-CI GitHub Actions continuous integration. Added CITATION file PDF-based vignette based published article R Journal (#109). Switch tibble::.tibble()—deprecated tibble 2.0.0—tibble::as_tibble() function calls (#101).","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"vip-022","dir":"Changelog","previous_headings":"","what":"vip 0.2.2","title":"vip 0.2.2","text":"CRAN release: 2020-04-06","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"user-visible-changes-0-2-2","dir":"Changelog","previous_headings":"","what":"User-visible changes","title":"vip 0.2.2","text":"Importance column vi_model() longer contains “inner” names; accordance breaking changes tibble 3.0.0.","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"vip-021","dir":"Changelog","previous_headings":"","what":"vip 0.2.1","title":"vip 0.2.1","text":"CRAN release: 2020-01-20","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"enhancements-0-2-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"vip 0.2.1","text":"Added support SHAP-based feature importance makes use recent fastshap package CRAN. use, simply call vi() vip() specify method = \"shap\", can just call vi_shap() directly (#87). Added support parsnip, mlr, mlr3 packages (#94). Added support \"mvr\" objects pls package (currently just calls caret::varImp()) (#35). \"lm\" method vi_model() gained new type argument allows users use either (1) raw coefficients features properly standardized (type = \"raw\"), (2) absolute value corresponding t- z-statistic (type = \"stat\", default) (#77). New function gen_friedman() simulating data Friedman 1 benchmark problem; see ?vip::gen_friedman details.","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"user-visible-changes-0-2-1","dir":"Changelog","previous_headings":"","what":"User-visible changes","title":"vip 0.2.1","text":"vi_pdp() vi_ice() functions deprecated merged single new function called vi_firm(). Consequently, setting method = \"pdp\" method = \"ice\" also deprecated; use method = \"firm\" instead. metric pred_wrapper arguments vi_permute() longer optional. vip() function gained new argument, geom, specifying type plot construct. Current options geom = \"col\" (default), geom = \"point\", geom = \"boxplot\", geom = \"violin\" (latter two work permutation-based importance nsim > 1) (#79). Consequently, bar argument removed. vip() function gained two new arguments specifying aesthetics: mapping aesthetics (fixed aesthetics like color = \"red\"). Consequently, arguments color, fill, etc. removed (#80). example illustrating two changes given : vip() function gained new argument, include_type, defaults FALSE. TRUE, type variable importance computed included appropriate axis label. Set include_type = TRUE revert old behavior.","code":"# Load required packages library(ggplot2)  # for `aes_string()` function  # Load the sample data data(mtcars)  # Fit a linear regression model model <- lm(mpg ~ ., data = mtcars)  # Construct variable importance plots p1 <- vip(model) p2 <- vip(model, mapping = aes_string(color = \"Sign\")) p3 <- vip(model, type = \"dotplot\") p4 <- vip(model, type = \"dotplot\", mapping = aes_string(color = \"Variable\"),           aesthetics = list(size = 3)) grid.arrange(p1, p2, p3, p4, nrow = 2)"},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"miscellaneous-0-2-1","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"vip 0.2.1","text":"Removed dependency ModelMetrics built-family performance metrics (metric_*()) now documented exported. See, example, ?vip::metric_rmse (#93). Switched tinytest framework (#82). Minor documentation improvements.","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"vip 0.2.1","text":"internal (.e., exported) get_feature_names() function better job \"nnet\" objects containing factors. also better job extracting feature names model objects containing \"formula\" component. vi_model() now works correctly \"glm\" objects non-Gaussian families (e.g., logistic regression) (#74). Added appropriate sparklyr version dependency (#59).","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"vip-013","dir":"Changelog","previous_headings":"","what":"vip 0.1.3","title":"vip 0.1.3","text":"CRAN release: 2019-07-03","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"new-functions-0-1-3","dir":"Changelog","previous_headings":"","what":"New functions","title":"vip 0.1.3","text":"Removed warnings experimental functions. vi_permute() gained type argument (.e., type = \"difference\" type = \"ratio\"); argument can passed via vi() vip() well. add_sparklines() creates HTML widget display variable importance scores sparkline representation features effect (.e., partial dependence function) (#64). Added support Olden Garson algorithms neural networks fit using neuralnet, nnet, RSNNS packages (#28). Added support GLMNET models fit using glmnet package (without cross-validation).","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"breaking-changes-0-1-3","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"vip 0.1.3","text":"pred_fun argument vi_permute() changed pred_wrapper. FUN argument vi(), vi_pdp(), vi_ice() changed var_fun. predicted class probabilities reference class required (numeric vector) binary classification metric = \"auc\" metric = \"logloss\".","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"minor-changes-0-1-3","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"vip 0.1.3","text":"vi_permute() gained new logical keep argument. TRUE (default), raw permutation scores nsim repetitions (provided nsim > 1) stored attribute called \"raw_scores\". vip() gained new logical arguments all_permutations jitter help visualize raw permutation scores nsim repetitions (provided nsim > 1). can now pass type argument vi_permute() specifying compare baseline permuted performance metrics. Current choices \"difference\" (default) \"ratio\". Improved documentation (especially vi_permute() vi_model()). Results vi_model(), vi_pdp(), vi_ice(), vi_permute() now class \"vi\", making easier plot vip().","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"vip-012","dir":"Changelog","previous_headings":"","what":"vip 0.1.2","title":"vip 0.1.2","text":"CRAN release: 2018-09-30 Added nsim argument vi_permute() reducing sampling variability induced permuting predictor (#36). Added sample_size sample_frac arguments vi_permute() reducing size training sample every Monte Carlo repetition (#41). Greatly improved documentation vi_model() various objects supports. New argument rank, defaults FALSE, available vi() (#55). Added support Spark (G)LMs. vi() now generic makes adding new methods easier (e.g., support DataRobot models). Bug fixes.","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"vip-011","dir":"Changelog","previous_headings":"","what":"vip 0.1.1","title":"vip 0.1.1","text":"CRAN release: 2018-09-27 Fixed bug get_feature_names.ranger() s.t. never returns NULL; either returns feature names throws error recovered model object (#43). Added pkgdown site: https://github.com/koalaverse/vip. Changed truncate_feature_names argument vi() abbreviate_feature_names abbreviates feature names, rather just truncating . Added CRAN-related badges (#32). New generic vi_permute() constructing permutation-based variable importance scores (#19). Fixed bug unnecessary error check vint() (#38). New vignette using vip unsupported models (using Keras API TensorFlow example). Added basic sparklyr support.","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"vip-010","dir":"Changelog","previous_headings":"","what":"vip 0.1.0","title":"vip 0.1.0","text":"CRAN release: 2018-06-15 Added support XGBoost models (.e., objects class \"xgb.booster\"). Added support ranger models (.e., objects class \"ranger\"). Added support random forest models party package (.e., objects class \"RandomForest\"). vip() gained new argument, num_features, specifying many variable importance scores plot. default set 10. . changed _ argument names. vi() gained three new arguments: truncate_feature_names (truncating feature names returned tibble), sort (logical argument specifying whether resulting variable importance scores sorted), decreasing (logical argument specifying whether variable importance scores sorted decreasing order). vi_model.lm(), hence vi(), contains additional column called Sign contains sign original coefficients (#27). vi() gained new argument, scale, scaling variable importance scores largest 100. Default FALSE (#24). vip() gained two new arguments, size shape, controlling size shape points whenever bar = FALSE (#9). Added support \"H2OBinomialModel\", \"H2OMultinomialModel\", , \"H2ORegressionModel\" objects (#8).","code":""},{"path":"https://koalaverse.github.io/vip/news/index.html","id":"vip-001","dir":"Changelog","previous_headings":"","what":"vip 0.0.1","title":"vip 0.0.1","text":"Initial release.","code":""}]
