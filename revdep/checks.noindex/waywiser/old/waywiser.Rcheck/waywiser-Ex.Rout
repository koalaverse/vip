
R version 4.2.3 (2023-03-15) -- "Shortstop Beagle"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "waywiser"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('waywiser')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("global_geary_c")
> ### * global_geary_c
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ww_global_geary_c
> ### Title: Global Geary's C statistic
> ### Aliases: ww_global_geary_c ww_global_geary_c_vec ww_global_geary_pvalue
> ###   ww_global_geary_pvalue_vec
> 
> ### ** Examples
> 
> guerry_model <- guerry
> guerry_lm <- lm(Crm_prs ~ Litercy, guerry_model)
> guerry_model$predictions <- predict(guerry_lm, guerry_model)
> 
> ww_global_geary_c(guerry_model, Crm_prs, predictions)
The legacy packages maptools, rgdal, and rgeos, underpinning the sp package,
which was just loaded, will retire in October 2023.
Please refer to R-spatial evolution reports for details, especially
https://r-spatial.org/r/2023/05/15/evolution4.html.
It may be desirable to make the sf package available;
package maintainers should consider adding sf to Suggests:.
The sp package is now running under evolution status 2
     (status 2 uses the sf package in place of rgdal)
# A tibble: 1 × 3
  .metric        .estimator .estimate
  <chr>          <chr>          <dbl>
1 global_geary_c standard       0.565
> ww_global_geary_pvalue(guerry_model, Crm_prs, predictions)
# A tibble: 1 × 3
  .metric             .estimator .estimate
  <chr>               <chr>          <dbl>
1 global_geary_pvalue standard    7.55e-10
> 
> wt <- ww_build_weights(guerry_model)
> 
> ww_global_geary_c_vec(
+   guerry_model$Crm_prs,
+   guerry_model$predictions,
+   wt = wt
+ )
[1] 0.5654044
> ww_global_geary_pvalue_vec(
+   guerry_model$Crm_prs,
+   guerry_model$predictions,
+   wt = wt
+ )
[1] 7.548865e-10
> 
> 
> 
> 
> cleanEx()
> nameEx("global_moran_i")
> ### * global_moran_i
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ww_global_moran_i
> ### Title: Global Moran's I statistic
> ### Aliases: ww_global_moran_i ww_global_moran_i_vec ww_global_moran_pvalue
> ###   ww_global_moran_pvalue_vec
> 
> ### ** Examples
> 
> guerry_model <- guerry
> guerry_lm <- lm(Crm_prs ~ Litercy, guerry_model)
> guerry_model$predictions <- predict(guerry_lm, guerry_model)
> 
> ww_global_moran_i(guerry_model, Crm_prs, predictions)
# A tibble: 1 × 3
  .metric        .estimator .estimate
  <chr>          <chr>          <dbl>
1 global_moran_i standard       0.412
> ww_global_moran_pvalue(guerry_model, Crm_prs, predictions)
# A tibble: 1 × 3
  .metric             .estimator .estimate
  <chr>               <chr>          <dbl>
1 global_moran_pvalue standard    7.23e-10
> 
> wt <- ww_build_weights(guerry_model)
> 
> ww_global_moran_i_vec(
+   guerry_model$Crm_prs,
+   guerry_model$predictions,
+   wt = wt
+ )
[1] 0.4115652
> ww_global_moran_pvalue_vec(
+   guerry_model$Crm_prs,
+   guerry_model$predictions,
+   wt = wt
+ )
[1] 7.234758e-10
> 
> 
> 
> 
> cleanEx()
> nameEx("guerry")
> ### * guerry
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: guerry
> ### Title: Guerry "Moral Statistics" (1830s)
> ### Aliases: guerry
> ### Keywords: datasets
> 
> ### ** Examples
> 
> if (requireNamespace("sf", quietly = TRUE)) {
+   library(sf)
+   data(guerry)
+ 
+   plot(guerry["Donatns"])
+ }
Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE
> 
> 
> 
> cleanEx()

detaching ‘package:sf’

> nameEx("local_geary_c")
> ### * local_geary_c
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ww_local_geary_c
> ### Title: Local Geary's C statistic
> ### Aliases: ww_local_geary_c ww_local_geary_c_vec ww_local_geary_pvalue
> ###   ww_local_geary_pvalue_vec
> 
> ### ** Examples
> 
> guerry_model <- guerry
> guerry_lm <- lm(Crm_prs ~ Litercy, guerry_model)
> guerry_model$predictions <- predict(guerry_lm, guerry_model)
> 
> ww_local_geary_c(guerry_model, Crm_prs, predictions)
# A tibble: 85 × 3
   .metric       .estimator .estimate
   <chr>         <chr>          <dbl>
 1 local_geary_c standard       0.981
 2 local_geary_c standard       0.836
 3 local_geary_c standard       0.707
 4 local_geary_c standard       0.108
 5 local_geary_c standard       0.264
 6 local_geary_c standard       1.36 
 7 local_geary_c standard       3.64 
 8 local_geary_c standard       1.57 
 9 local_geary_c standard       0.867
10 local_geary_c standard       0.737
# ℹ 75 more rows
> ww_local_geary_pvalue(guerry_model, Crm_prs, predictions)
# A tibble: 85 × 3
   .metric            .estimator .estimate
   <chr>              <chr>          <dbl>
 1 local_geary_pvalue standard       0.235
 2 local_geary_pvalue standard       0.249
 3 local_geary_pvalue standard       0.159
 4 local_geary_pvalue standard       0.140
 5 local_geary_pvalue standard       0.309
 6 local_geary_pvalue standard       0.128
 7 local_geary_pvalue standard       0.450
 8 local_geary_pvalue standard       0.217
 9 local_geary_pvalue standard       0.772
10 local_geary_pvalue standard       0.410
# ℹ 75 more rows
> 
> wt <- ww_build_weights(guerry_model)
> 
> ww_local_geary_c_vec(
+   guerry_model$Crm_prs,
+   guerry_model$predictions,
+   wt = wt
+ )
 [1] 0.981119438 0.836402177 0.707464373 0.108332465 0.264075824 1.361485477
 [7] 3.641239412 1.571824022 0.867252524 0.737094462 0.573376555 0.001605731
[13] 1.891988440 1.152840284 1.029320931 0.297642850 1.219953394 1.934113868
[19] 1.632566652 0.441916658 5.202733790 0.921953310 3.084515822 0.237218594
[25] 1.346684045 1.051652204 0.419414691 0.217280214 0.794409207 0.243971372
[31] 0.376678958 0.139152907 0.711305633 3.096840680 1.974463944 0.922230710
[37] 1.032031759 0.339464386 0.933794842 1.910440700 0.937597672 0.625628647
[43] 0.376707677 2.692250283 1.288784962 0.798443065 1.671895951 1.310183326
[49] 2.347513577 0.845204889 0.302940809 2.291804447 0.881999216 0.412051312
[55] 2.006031605 0.561239582 0.375776092 1.853716391 1.191472387 1.146802970
[61] 1.857618679 0.149044974 0.614228825 0.755373475 1.287962784 1.447534518
[67] 1.236607966 0.962394651 0.338400653 1.914478855 0.641340157 2.146993342
[73] 0.703881855 1.417638272 0.692636715 1.765618175 0.246058853 0.700262130
[79] 0.002876896 0.057575267 0.420878038 2.025012395 2.525093274 1.053335832
[85] 1.030009749
> ww_local_geary_pvalue_vec(
+   guerry_model$Crm_prs,
+   guerry_model$predictions,
+   wt = wt
+ )
 [1] 0.22636677 0.24685447 0.16226906 0.12391343 0.32309346 0.15474192
 [7] 0.42692182 0.17628003 0.80264089 0.44396092 0.02247644 0.16818271
[13] 0.34020098 0.90725805 0.51251829 0.18928129 0.74018217 0.50786286
[19] 0.06202970 0.14014229 0.52117385 0.80462197 0.61836241 0.10715235
[25] 0.85539532 0.95613780 0.24499844 0.06893355 0.63643177 0.11782031
[31] 0.21724211 0.14015525 0.46233235 0.60262442 0.12123370 0.87533029
[37] 0.39289329 0.27353211 0.86345311 0.88369826 0.63605882 0.51734043
[43] 0.19848407 0.22938071 0.72562699 0.06987077 0.25922973 0.19478744
[49] 0.17802353 0.24198126 0.05994003 0.71141695 0.45368058 0.26165694
[55] 0.96164453 0.17466200 0.21776727 0.58405426 0.19089941 0.97176550
[61] 0.33496017 0.25513969 0.28931999 0.19086728 0.55139944 0.38496705
[67] 0.73111412 0.75794777 0.02591082 0.07653423 0.50004320 0.14089279
[73] 0.36388916 0.53607064 0.58154699 0.11973502 0.10442280 0.26811839
[79] 0.16184184 0.05131146 0.29670709 0.46550321 0.09092975 0.93211119
[85] 0.96466183
> 
> 
> 
> 
> cleanEx()
> nameEx("local_getis_ord_g")
> ### * local_getis_ord_g
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ww_local_getis_ord_g
> ### Title: Local Getis-Ord G and G* statistic
> ### Aliases: ww_local_getis_ord_g ww_local_getis_ord_g_vec
> ###   ww_local_getis_ord_g_pvalue ww_local_getis_ord_g_pvalue_vec
> 
> ### ** Examples
> 
> guerry_model <- guerry
> guerry_lm <- lm(Crm_prs ~ Litercy, guerry_model)
> guerry_model$predictions <- predict(guerry_lm, guerry_model)
> 
> ww_local_getis_ord_g(guerry_model, Crm_prs, predictions)
# A tibble: 85 × 3
   .metric           .estimator .estimate
   <chr>             <chr>          <dbl>
 1 local_getis_ord_g standard       0.913
 2 local_getis_ord_g standard       2.49 
 3 local_getis_ord_g standard       2.15 
 4 local_getis_ord_g standard      -1.58 
 5 local_getis_ord_g standard      -1.19 
 6 local_getis_ord_g standard      -1.68 
 7 local_getis_ord_g standard       0.627
 8 local_getis_ord_g standard      -1.60 
 9 local_getis_ord_g standard       0.964
10 local_getis_ord_g standard      -2.71 
# ℹ 75 more rows
> ww_local_getis_ord_g_pvalue(guerry_model, Crm_prs, predictions)
# A tibble: 85 × 3
   .metric                  .estimator .estimate
   <chr>                    <chr>          <dbl>
 1 local_getis_ord_g_pvalue standard     0.389  
 2 local_getis_ord_g_pvalue standard     0.0206 
 3 local_getis_ord_g_pvalue standard     0.0377 
 4 local_getis_ord_g_pvalue standard     0.143  
 5 local_getis_ord_g_pvalue standard     0.235  
 6 local_getis_ord_g_pvalue standard     0.0801 
 7 local_getis_ord_g_pvalue standard     0.556  
 8 local_getis_ord_g_pvalue standard     0.128  
 9 local_getis_ord_g_pvalue standard     0.384  
10 local_getis_ord_g_pvalue standard     0.00678
# ℹ 75 more rows
> 
> wt <- ww_build_weights(guerry_model)
> 
> ww_local_getis_ord_g_vec(
+   guerry_model$Crm_prs,
+   guerry_model$predictions,
+   wt = wt
+ )
 [1]  0.91288164  2.49305353  2.14692501 -1.57511235 -1.18988831 -1.67703329
 [7]  0.62706195 -1.60139345  0.96397088 -2.71475331 -3.05125861 -1.64429475
[13]  1.15584938 -2.90161984 -0.63376101  0.61005430  2.29888368 -0.28799789
[19]  1.53012357  1.22699107  0.59816133 -0.65331166  0.87501663 -1.75661589
[25]  0.39100454  0.52017062  1.16424138 -3.20781683 -2.29583912 -0.98116177
[31]  0.06685550 -2.13635236  2.30311768  0.63548278  1.99855789 -0.24366435
[37]  1.55058791  0.17231008  1.52062197 -0.22999799 -1.29501163  1.08298736
[43]  0.13063616 -1.21798455 -1.00549332 -2.29306942  0.89419782  1.19832028
[49]  2.03154442  0.87398122  2.88484032 -0.76194353  1.52453019  1.36764146
[55] -0.06618369  1.47010332  1.89277905  0.52529402  1.63007385  2.00852739
[61]  1.14763247 -0.91644996 -0.49669001 -1.85515687 -1.00553207 -0.86081555
[67]  1.63219209  1.04953518  2.51838763  1.71259713 -0.49967695  1.35387348
[73] -0.33336379 -0.07498653  0.56058846  1.54116260 -1.91772217 -1.92601432
[79] -1.62505600 -2.60384397  0.42262985  1.16021704  1.46229964  0.06056077
[85]  1.08651166
> ww_local_getis_ord_g_pvalue_vec(
+   guerry_model$Crm_prs,
+   guerry_model$predictions,
+   wt = wt
+ )
 [1] 0.3695571611 0.0169786056 0.0322687699 0.1230322734 0.2694235273
 [6] 0.1137019588 0.5398954033 0.1024499020 0.3888509445 0.0109416707
[11] 0.0034253459 0.0953960971 0.2410838130 0.0033036750 0.5538414913
[16] 0.5523169428 0.0228902877 0.7857349736 0.1341320974 0.2211179657
[21] 0.5691687580 0.5083256825 0.3589946524 0.0629760094 0.7186458498
[26] 0.5922411764 0.2791552082 0.0009321846 0.0272546629 0.2956399249
[31] 0.9738636022 0.0397379755 0.0322196992 0.5486074155 0.0752193489
[36] 0.7834184316 0.1348512227 0.8828057067 0.1325443797 0.8316756911
[41] 0.1893796895 0.2933198184 0.8983575503 0.2582049929 0.2961550748
[46] 0.0280169211 0.4120894610 0.2532833353 0.0553528130 0.4410654376
[51] 0.0073477708 0.4866291503 0.1281479128 0.1696102755 0.9711262507
[56] 0.1471815149 0.0673207418 0.5780202229 0.0752344285 0.0430379522
[61] 0.3006160616 0.3505641438 0.5880743129 0.0549966165 0.3154195393
[66] 0.4327889110 0.1274080103 0.3452717374 0.0180742326 0.1094569303
[71] 0.6385512513 0.1431983582 0.7882028646 0.9391046032 0.6032111220
[76] 0.1618507700 0.0578433795 0.0529913211 0.0999224867 0.0082345784
[81] 0.7134144036 0.2397870052 0.1617425998 0.9609735961 0.3084403909
> 
> 
> 
> 
> cleanEx()
> nameEx("local_moran_i")
> ### * local_moran_i
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ww_local_moran_i
> ### Title: Local Moran's I statistic
> ### Aliases: ww_local_moran_i ww_local_moran_i_vec ww_local_moran_pvalue
> ###   ww_local_moran_pvalue_vec
> 
> ### ** Examples
> 
> guerry_model <- guerry
> guerry_lm <- lm(Crm_prs ~ Litercy, guerry_model)
> guerry_model$predictions <- predict(guerry_lm, guerry_model)
> 
> ww_local_moran_i(guerry_model, Crm_prs, predictions)
# A tibble: 85 × 3
   .metric       .estimator .estimate
   <chr>         <chr>          <dbl>
 1 local_moran_i standard      0.530 
 2 local_moran_i standard      0.858 
 3 local_moran_i standard      0.759 
 4 local_moran_i standard      0.732 
 5 local_moran_i standard      0.207 
 6 local_moran_i standard      0.860 
 7 local_moran_i standard      0.692 
 8 local_moran_i standard      1.69  
 9 local_moran_i standard     -0.0109
10 local_moran_i standard      0.710 
# ℹ 75 more rows
> ww_local_moran_pvalue(guerry_model, Crm_prs, predictions)
# A tibble: 85 × 3
   .metric            .estimator .estimate
   <chr>              <chr>          <dbl>
 1 local_moran_pvalue standard     0.361  
 2 local_moran_pvalue standard     0.0127 
 3 local_moran_pvalue standard     0.0318 
 4 local_moran_pvalue standard     0.115  
 5 local_moran_pvalue standard     0.234  
 6 local_moran_pvalue standard     0.0935 
 7 local_moran_pvalue standard     0.531  
 8 local_moran_pvalue standard     0.109  
 9 local_moran_pvalue standard     0.335  
10 local_moran_pvalue standard     0.00663
# ℹ 75 more rows
> 
> wt <- ww_build_weights(guerry_model)
> 
> ww_local_moran_i_vec(
+   guerry_model$Crm_prs,
+   guerry_model$predictions,
+   wt = wt
+ )
 [1]  0.529586027  0.857962397  0.759397482  0.731821184  0.207216255
 [6]  0.859824645  0.692480894  1.685682868 -0.010937577  0.709971045
[11]  1.756476080  0.839390997 -0.208812822  0.311287253 -0.195850256
[16] -0.046485425  0.219659575  0.072248473  0.911260991  0.796818074
[21]  0.472218810 -0.047995949 -0.701165391  0.682001844 -0.114131742
[26]  0.043283334  1.067791069  1.186850176  0.174554949  0.071132504
[31]  0.014932487  1.014614517  0.258635858  0.385988835 -0.113213840
[36]  0.016531123  0.601974328 -0.029051514  0.101963855 -0.098393898
[41]  0.305211136 -0.057462330 -0.015702560  0.882089292 -0.163892577
[46]  1.649695545  0.377330987  0.868476489 -0.465975751  0.303084203
[51]  1.404344537 -0.370062874  0.440556284  0.289554503  0.035787495
[56]  0.393521099  1.006384006  0.222959827  0.730981130  0.628215009
[61] -0.183012992  0.227295946  0.284153229  2.316505472  0.494418600
[66]  0.982994320 -0.124397352  0.160297076  1.039537767  1.231583113
[71]  0.271055716 -0.168894660 -0.038283576  0.017831736 -0.052920056
[76]  1.205308932  0.808428811  0.551329387  0.878044848  0.901458850
[81]  0.022009901 -0.327876773 -0.318368758 -0.003280457 -0.124796245
> ww_local_moran_pvalue_vec(
+   guerry_model$Crm_prs,
+   guerry_model$predictions,
+   wt = wt
+ )
 [1] 0.361304795 0.012664975 0.031799252 0.115230513 0.234090293 0.093535973
 [7] 0.530618631 0.109289803 0.335060524 0.006632515 0.002278842 0.100115333
[13] 0.247742772 0.003712388 0.526236804 0.541825841 0.021511546 0.773348351
[19] 0.125986145 0.219825946 0.549732292 0.513555378 0.381564858 0.078983302
[25] 0.695793884 0.602944660 0.244326204 0.001337467 0.021685082 0.326512972
[31] 0.946696741 0.032650704 0.021272223 0.525113591 0.045656211 0.807490784
[37] 0.121000471 0.863193762 0.128354731 0.818093330 0.195316218 0.278814034
[43] 0.896063138 0.223229844 0.314659364 0.021844009 0.371216056 0.230792356
[49] 0.042199799 0.382128483 0.003916122 0.446093710 0.127376322 0.171424332
[55] 0.947231579 0.141533773 0.058387258 0.599378815 0.103085890 0.044587278
[61] 0.251120319 0.359430944 0.619407669 0.063573829 0.314640714 0.389339642
[67] 0.102639026 0.293931872 0.011789349 0.086786681 0.617302569 0.175776744
[73] 0.738859695 0.940225426 0.575078121 0.123277217 0.055146249 0.054102586
[79] 0.104150628 0.009218471 0.672565343 0.245960451 0.143659118 0.951709014
[85] 0.277252686
> 
> 
> 
> 
> cleanEx()
> nameEx("predict.ww_area_of_applicability")
> ### * predict.ww_area_of_applicability
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.ww_area_of_applicability
> ### Title: Predict from a 'ww_area_of_applicability'
> ### Aliases: predict.ww_area_of_applicability
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("vip")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(vip)
+ train <- gen_friedman(1000, seed = 101) # ?vip::gen_friedman
+ test <- train[701:1000, ]
+ train <- train[1:700, ]
+ pp <- stats::ppr(y ~ ., data = train, nterms = 11)
+ importance <- vi_permute(
+   pp,
+   target = "y",
+   metric = "rsquared",
+   pred_wrapper = predict
+ )
+ 
+ aoa <- ww_area_of_applicability(y ~ ., train, test, importance = importance)
+ predict(aoa, test)
+ ## Don't show: 
+ }) # examplesIf
> library(vip)

Attaching package: ‘vip’

The following object is masked from ‘package:utils’:

    vi

> train <- gen_friedman(1000, seed = 101)
> test <- train[701:1000, ]
> train <- train[1:700, ]
> pp <- stats::ppr(y ~ ., data = train, nterms = 11)
> importance <- vi_permute(pp, target = "y", metric = "rsquared", pred_wrapper = predict)
> aoa <- ww_area_of_applicability(y ~ ., train, test, importance = importance)
> predict(aoa, test)
# A tibble: 300 × 2
       di aoa  
    <dbl> <lgl>
 1 0.175  TRUE 
 2 0.191  TRUE 
 3 0.190  TRUE 
 4 0.0802 TRUE 
 5 0.141  TRUE 
 6 0.287  TRUE 
 7 0.178  TRUE 
 8 0.205  TRUE 
 9 0.134  TRUE 
10 0.177  TRUE 
# ℹ 290 more rows
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:vip’

> nameEx("print.ww_area_of_applicability")
> ### * print.ww_area_of_applicability
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.ww_area_of_applicability
> ### Title: Print number of predictors and area-of-applicability threshold
> ### Aliases: print.ww_area_of_applicability
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("vip")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(vip)
+ trn <- gen_friedman(500, seed = 101) # ?vip::gen_friedman
+ pp <- ppr(y ~ ., data = trn, nterms = 11)
+ importance <- vi_permute(
+   pp,
+   target = "y",
+   metric = "rsquared",
+   pred_wrapper = predict
+ )
+ 
+ 
+ ww_area_of_applicability(trn[2:11], importance = importance)
+ ## Don't show: 
+ }) # examplesIf
> library(vip)

Attaching package: ‘vip’

The following object is masked from ‘package:utils’:

    vi

> trn <- gen_friedman(500, seed = 101)
> pp <- ppr(y ~ ., data = trn, nterms = 11)
> importance <- vi_permute(pp, target = "y", metric = "rsquared", pred_wrapper = predict)
> ww_area_of_applicability(trn[2:11], importance = importance)
# Predictors:
   10
Area-of-applicability threshold:
   0.3453971> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:vip’

> nameEx("ww_agreement_coefficient")
> ### * ww_agreement_coefficient
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ww_agreement_coefficient
> ### Title: Agreement coefficients and related methods
> ### Aliases: ww_agreement_coefficient ww_agreement_coefficient.data.frame
> ###   ww_agreement_coefficient_vec ww_systematic_agreement_coefficient
> ###   ww_systematic_agreement_coefficient.data.frame
> ###   ww_systematic_agreement_coefficient_vec
> ###   ww_unsystematic_agreement_coefficient
> ###   ww_unsystematic_agreement_coefficient.data.frame
> ###   ww_unsystematic_agreement_coefficient_vec ww_unsystematic_mpd
> ###   ww_unsystematic_mpd.data.frame ww_unsystematic_mpd_vec
> ###   ww_systematic_mpd ww_systematic_mpd.data.frame ww_systematic_mpd_vec
> ###   ww_unsystematic_rmpd ww_unsystematic_rmpd.data.frame
> ###   ww_unsystematic_rmpd_vec ww_systematic_rmpd
> ###   ww_systematic_rmpd.data.frame ww_systematic_rmpd_vec
> 
> ### ** Examples
> 
> # Calculated values match Ji and Gallo 2006:
> x <- c(6, 8, 9, 10, 11, 14)
> y <- c(2, 3, 5, 5, 6, 8)
> 
> ww_agreement_coefficient_vec(x, y)
[1] 0.4745867
> ww_systematic_agreement_coefficient_vec(x, y)
[1] 0.4784812
> ww_unsystematic_agreement_coefficient_vec(x, y)
[1] 0.9961054
> ww_systematic_mpd_vec(x, y)
[1] 23.65667
> ww_unsystematic_mpd_vec(x, y)
[1] 0.1766615
> ww_systematic_rmpd_vec(x, y)
[1] 4.863812
> ww_unsystematic_rmpd_vec(x, y)
[1] 0.4203112
> 
> example_df <- data.frame(x = x, y = y)
> ww_agreement_coefficient(example_df, x, y)
# A tibble: 1 × 3
  .metric               .estimator .estimate
  <chr>                 <chr>          <dbl>
1 agreement_coefficient standard       0.475
> ww_systematic_agreement_coefficient(example_df, x, y)
# A tibble: 1 × 3
  .metric                          .estimator .estimate
  <chr>                            <chr>          <dbl>
1 systematic_agreement_coefficient standard       0.478
> ww_unsystematic_agreement_coefficient(example_df, x, y)
# A tibble: 1 × 3
  .metric                            .estimator .estimate
  <chr>                              <chr>          <dbl>
1 unsystematic_agreement_coefficient standard       0.996
> ww_systematic_mpd(example_df, x, y)
# A tibble: 1 × 3
  .metric        .estimator .estimate
  <chr>          <chr>          <dbl>
1 systematic_mpd standard        23.7
> ww_unsystematic_mpd(example_df, x, y)
# A tibble: 1 × 3
  .metric          .estimator .estimate
  <chr>            <chr>          <dbl>
1 unsystematic_mpd standard       0.177
> ww_systematic_rmpd(example_df, x, y)
# A tibble: 1 × 3
  .metric         .estimator .estimate
  <chr>           <chr>          <dbl>
1 systematic_rmpd standard        4.86
> ww_unsystematic_rmpd(example_df, x, y)
# A tibble: 1 × 3
  .metric           .estimator .estimate
  <chr>             <chr>          <dbl>
1 unsystematic_rmpd standard       0.420
> 
> 
> 
> 
> cleanEx()
> nameEx("ww_area_of_applicability")
> ### * ww_area_of_applicability
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ww_area_of_applicability
> ### Title: Find the area of applicability
> ### Aliases: ww_area_of_applicability ww_area_of_applicability.data.frame
> ###   ww_area_of_applicability.matrix ww_area_of_applicability.formula
> ###   ww_area_of_applicability.recipe ww_area_of_applicability.rset
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("vip")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ train <- vip::gen_friedman(1000, seed = 101) # ?vip::gen_friedman
+ test <- train[701:1000, ]
+ train <- train[1:700, ]
+ pp <- stats::ppr(y ~ ., data = train, nterms = 11)
+ importance <- vip::vi_permute(
+   pp,
+   target = "y",
+   metric = "rsquared",
+   pred_wrapper = predict
+ )
+ 
+ aoa <- ww_area_of_applicability(y ~ ., train, test, importance = importance)
+ predict(aoa, test)
+ 
+ # Equivalent methods for calculating AOA:
+ ww_area_of_applicability(train[2:11], test[2:11], importance)
+ ww_area_of_applicability(
+   as.matrix(train[2:11]),
+   as.matrix(test[2:11]),
+   importance
+ )
+ ## Don't show: 
+ }) # examplesIf
> train <- vip::gen_friedman(1000, seed = 101)
> test <- train[701:1000, ]
> train <- train[1:700, ]
> pp <- stats::ppr(y ~ ., data = train, nterms = 11)
> importance <- vip::vi_permute(pp, target = "y", metric = "rsquared", pred_wrapper = predict)
> aoa <- ww_area_of_applicability(y ~ ., train, test, importance = importance)
> predict(aoa, test)
# A tibble: 300 × 2
       di aoa  
    <dbl> <lgl>
 1 0.175  TRUE 
 2 0.191  TRUE 
 3 0.190  TRUE 
 4 0.0802 TRUE 
 5 0.141  TRUE 
 6 0.287  TRUE 
 7 0.178  TRUE 
 8 0.205  TRUE 
 9 0.134  TRUE 
10 0.177  TRUE 
# ℹ 290 more rows
> ww_area_of_applicability(train[2:11], test[2:11], importance)
# Predictors:
   10
Area-of-applicability threshold:
   0.3080491> ww_area_of_applicability(as.matrix(train[2:11]), as.matrix(test[2:11]), 
+     importance)
# Predictors:
   10
Area-of-applicability threshold:
   0.3080491> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ww_build_neighbors")
> ### * ww_build_neighbors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ww_build_neighbors
> ### Title: Make 'nb' objects from sf objects
> ### Aliases: ww_build_neighbors
> 
> ### ** Examples
> 
> ww_build_neighbors(guerry)
Neighbour list object:
Number of regions: 85 
Number of nonzero links: 420 
Percentage nonzero weights: 5.813149 
Average number of links: 4.941176 
> 
> 
> 
> 
> cleanEx()
> nameEx("ww_build_weights")
> ### * ww_build_weights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ww_build_weights
> ### Title: Build "listw" objects of spatial weights
> ### Aliases: ww_build_weights
> 
> ### ** Examples
> 
> ww_build_weights(guerry)
Characteristics of weights list object:
Neighbour list object:
Number of regions: 85 
Number of nonzero links: 420 
Percentage nonzero weights: 5.813149 
Average number of links: 4.941176 

Weights style: W 
Weights constants summary:
   n   nn S0      S1       S2
W 85 7225 85 37.2761 347.6683
> 
> 
> 
> 
> cleanEx()
> nameEx("ww_make_point_neighbors")
> ### * ww_make_point_neighbors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ww_make_point_neighbors
> ### Title: Make 'nb' objects from point geometries
> ### Aliases: ww_make_point_neighbors
> 
> ### ** Examples
> 
> ww_make_point_neighbors(ny_trees)
Neighbour list object:
Number of regions: 5303 
Number of nonzero links: 5303 
Percentage nonzero weights: 0.01885725 
Average number of links: 1 
Non-symmetric neighbours list
> 
> 
> 
> 
> cleanEx()
> nameEx("ww_make_polygon_neighbors")
> ### * ww_make_polygon_neighbors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ww_make_polygon_neighbors
> ### Title: Make 'nb' objects from polygon geometries
> ### Aliases: ww_make_polygon_neighbors
> 
> ### ** Examples
> 
> ww_make_polygon_neighbors(guerry)
Neighbour list object:
Number of regions: 85 
Number of nonzero links: 420 
Percentage nonzero weights: 5.813149 
Average number of links: 4.941176 
> 
> 
> 
> 
> cleanEx()
> nameEx("ww_multi_scale")
> ### * ww_multi_scale
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ww_multi_scale
> ### Title: Evaluate metrics at multiple scales of aggregation
> ### Aliases: ww_multi_scale
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("modeldata")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ data(ames, package = "modeldata")
+ ames_sf <- sf::st_as_sf(ames, coords = c("Longitude", "Latitude"), crs = 4326)
+ ames_model <- lm(Sale_Price ~ Lot_Area, data = ames_sf)
+ ames_sf$predictions <- predict(ames_model, ames_sf)
+ 
+ ww_multi_scale(
+   ames_sf,
+   Sale_Price,
+   predictions,
+   n = list(
+     c(10, 10),
+     c(1, 1)
+   ),
+   square = FALSE
+ )
+ 
+ # or, mostly equivalently
+ # (there will be a slight difference due to `autoexpand_grid = TRUE`)
+ grids <- list(
+   sf::st_make_grid(ames_sf, n = c(10, 10), square = FALSE),
+   sf::st_make_grid(ames_sf, n = c(1, 1), square = FALSE)
+ )
+ ww_multi_scale(ames_sf, Sale_Price, predictions, grids = grids)
+ ## Don't show: 
+ }) # examplesIf
> data(ames, package = "modeldata")
> ames_sf <- sf::st_as_sf(ames, coords = c("Longitude", "Latitude"), crs = 4326)
> ames_model <- lm(Sale_Price ~ Lot_Area, data = ames_sf)
> ames_sf$predictions <- predict(ames_model, ames_sf)
> ww_multi_scale(ames_sf, Sale_Price, predictions, n = list(c(10, 10), c(1, 
+     1)), square = FALSE)
# A tibble: 4 × 6
  .metric .estimator .estimate .grid_args       .grid          .notes          
  <chr>   <chr>          <dbl> <list>           <list>         <list>          
1 rmse    standard      82076. <tibble [1 × 2]> <sf [103 × 5]> <tibble [0 × 2]>
2 mae     standard      60467. <tibble [1 × 2]> <sf [103 × 5]> <tibble [0 × 2]>
3 rmse    standard      27862. <tibble [1 × 2]> <sf [5 × 5]>   <tibble [0 × 2]>
4 mae     standard      23267. <tibble [1 × 2]> <sf [5 × 5]>   <tibble [0 × 2]>
> grids <- list(sf::st_make_grid(ames_sf, n = c(10, 10), square = FALSE), 
+     sf::st_make_grid(ames_sf, n = c(1, 1), square = FALSE))
> ww_multi_scale(ames_sf, Sale_Price, predictions, grids = grids)
# A tibble: 4 × 6
  .metric .estimator .estimate .grid_args       .grid          .notes          
  <chr>   <chr>          <dbl> <list>           <list>         <list>          
1 rmse    standard      77853. <tibble [0 × 0]> <sf [103 × 5]> <tibble [0 × 2]>
2 mae     standard      56796. <tibble [0 × 0]> <sf [103 × 5]> <tibble [0 × 2]>
3 rmse    standard      27789. <tibble [0 × 0]> <sf [5 × 5]>   <tibble [0 × 2]>
4 mae     standard      23173. <tibble [0 × 0]> <sf [5 × 5]>   <tibble [0 × 2]>
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ww_willmott_d")
> ### * ww_willmott_d
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ww_willmott_d
> ### Title: Willmott's d and related values
> ### Aliases: ww_willmott_d ww_willmott_d.data.frame ww_willmott_d_vec
> ###   ww_willmott_d1 ww_willmott_d1.data.frame ww_willmott_d1_vec
> ###   ww_willmott_dr ww_willmott_dr.data.frame ww_willmott_dr_vec
> ###   ww_systematic_mse ww_systematic_mse.data.frame ww_systematic_mse_vec
> ###   ww_unsystematic_mse ww_unsystematic_mse.data.frame
> ###   ww_unsystematic_mse_vec ww_systematic_rmse
> ###   ww_systematic_rmse.data.frame ww_systematic_rmse_vec
> ###   ww_unsystematic_rmse ww_unsystematic_rmse.data.frame
> ###   ww_unsystematic_rmse_vec
> 
> ### ** Examples
> 
> x <- c(6, 8, 9, 10, 11, 14)
> y <- c(2, 3, 5, 5, 6, 8)
> 
> ww_willmott_d_vec(x, y)
[1] 0.5421558
> ww_willmott_d1_vec(x, y)
[1] 0.2926829
> ww_willmott_dr_vec(x, y)
[1] -0.1724138
> ww_systematic_mse_vec(x, y)
[1] 0.2238443
> ww_unsystematic_mse_vec(x, y)
[1] 23.60949
> ww_systematic_rmse_vec(x, y)
[1] 0.4731218
> ww_unsystematic_rmse_vec(x, y)
[1] 4.85896
> 
> example_df <- data.frame(x = x, y = y)
> ww_willmott_d(example_df, x, y)
# A tibble: 1 × 3
  .metric    .estimator .estimate
  <chr>      <chr>          <dbl>
1 willmott_d standard       0.542
> ww_willmott_d1(example_df, x, y)
# A tibble: 1 × 3
  .metric     .estimator .estimate
  <chr>       <chr>          <dbl>
1 willmott_d1 standard       0.293
> ww_willmott_dr(example_df, x, y)
# A tibble: 1 × 3
  .metric     .estimator .estimate
  <chr>       <chr>          <dbl>
1 willmott_dr standard      -0.172
> ww_systematic_mse(example_df, x, y)
# A tibble: 1 × 3
  .metric        .estimator .estimate
  <chr>          <chr>          <dbl>
1 systematic_mse standard       0.224
> ww_unsystematic_mse(example_df, x, y)
# A tibble: 1 × 3
  .metric          .estimator .estimate
  <chr>            <chr>          <dbl>
1 unsystematic_mse standard        23.6
> ww_systematic_rmse(example_df, x, y)
# A tibble: 1 × 3
  .metric         .estimator .estimate
  <chr>           <chr>          <dbl>
1 systematic_rmse standard       0.473
> ww_unsystematic_rmse(example_df, x, y)
# A tibble: 1 × 3
  .metric           .estimator .estimate
  <chr>             <chr>          <dbl>
1 unsystematic_rmse standard        4.86
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.579 0.128 3.245 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
