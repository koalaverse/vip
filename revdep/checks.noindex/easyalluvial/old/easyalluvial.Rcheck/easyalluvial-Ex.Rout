
R version 4.2.3 (2023-03-15) -- "Shortstop Beagle"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "easyalluvial"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('easyalluvial')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_imp_plot")
> ### * add_imp_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_imp_plot
> ### Title: add bar plot of important features to model response alluvial
> ###   plot
> ### Aliases: add_imp_plot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D df = mtcars2[, ! names(mtcars2) %in% 'ids' ]
> ##D 
> ##D train = caret::train( disp ~ .
> ##D                      , df
> ##D                      , method = 'rf'
> ##D                      , trControl = caret::trainControl( method = 'none' )
> ##D                      , importance = TRUE )
> ##D 
> ##D pred_train = caret::predict.train(train, df)
> ##D 
> ##D p = alluvial_model_response_caret(train, degree = 4, pred_train = pred_train)
> ##D 
> ##D p_grid = add_marginal_histograms(p, data_input = df)
> ##D 
> ##D p_grid = add_imp_plot(p_grid, p, data_input = df)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("add_marginal_histograms")
> ### * add_marginal_histograms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_marginal_histograms
> ### Title: add marginal histograms to alluvial plot
> ### Aliases: add_marginal_histograms
> 
> ### ** Examples
> 
> ## Not run: 
> ##D p = alluvial_wide(mtcars2, max_variables = 3)
> ##D p_grid = add_marginal_histograms(p, mtcars2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("alluvial_long")
> ### * alluvial_long
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: alluvial_long
> ### Title: alluvial plot of data in long format
> ### Aliases: alluvial_long
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D  data = quarterly_flights
> ##D 
> ##D  alluvial_long( data, key = qu, value = mean_arr_delay, id = tailnum, fill_by = 'last_variable' )
> ##D 
> ##D  # more flow coloring variants ------------------------------------
> ##D 
> ##D  alluvial_long( data, key = qu, value = mean_arr_delay, id = tailnum, fill_by = 'first_variable' )
> ##D  alluvial_long( data, key = qu, value = mean_arr_delay, id = tailnum, fill_by = 'all_flows' )
> ##D  alluvial_long( data, key = qu, value = mean_arr_delay, id = tailnum, fill_by = 'value' )
> ##D 
> ##D  # color by additional variable carrier ---------------------------
> ##D 
> ##D  alluvial_long( data, key = qu, value = mean_arr_delay, fill = carrier, id = tailnum )
> ##D 
> ##D  # use same color coding for flows and y levels -------------------
> ##D 
> ##D  palette = c('green3', 'tomato')
> ##D 
> ##D  alluvial_long( data, qu, mean_arr_delay, tailnum, fill_by = 'value'
> ##D                 , col_vector_flow = palette
> ##D                 , col_vector_value = palette )
> ##D 
> ##D 
> ##D  # reorder levels ------------------------------------------------
> ##D 
> ##D  alluvial_long( data, qu, mean_arr_delay, tailnum, fill_by = 'first_variable'
> ##D                , order_levels_value = c('on_time', 'late') )
> ##D 
> ##D  alluvial_long( data, qu, mean_arr_delay, tailnum, fill_by = 'first_variable'
> ##D                , order_levels_key = c('Q4', 'Q3', 'Q2', 'Q1') )
> ##D 
> ##D require(dplyr)
> ##D require(magrittr)
> ##D 
> ##D  order_by_carrier_size = data %>%
> ##D    group_by(carrier) %>%
> ##D    count() %>%
> ##D    arrange( desc(n) ) %>%
> ##D    .[['carrier']]
> ##D 
> ##D  alluvial_long( data, qu, mean_arr_delay, tailnum, carrier
> ##D                 , order_levels_fill = order_by_carrier_size )
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("alluvial_model_response")
> ### * alluvial_model_response
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: alluvial_model_response
> ### Title: create model response plot
> ### Aliases: alluvial_model_response
> 
> ### ** Examples
> 
> df = mtcars2[, ! names(mtcars2) %in% 'ids' ]
> m = randomForest::randomForest( disp ~ ., df)
> imp = m$importance
> dspace = get_data_space(df, imp, degree = 3)
Warning: There was 1 warning in `mutate()`.
ℹ In argument: `cyl = (function (f, na_level = "(Missing)") ...`.
Caused by warning:
! `fct_explicit_na()` was deprecated in forcats 1.0.0.
ℹ Please use `fct_na_value_to_level()` instead.
ℹ The deprecated feature was likely used in the easyalluvial package.
  Please report the issue to the authors.
> pred = predict(m, newdata = dspace)
> alluvial_model_response(pred, dspace, imp, degree = 3)
> 
> # partial dependency plotting method
> ## Not run: 
> ##D  pred = get_pdp_predictions(df, imp
> ##D                             , .f_predict = randomForest:::predict.randomForest
> ##D                             , m
> ##D                             , degree = 3
> ##D                             , bins = 5)
> ##D 
> ##D 
> ##D  alluvial_model_response(pred, dspace, imp, degree = 3, method = 'pdp')
> ##D  
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("alluvial_model_response_caret")
> ### * alluvial_model_response_caret
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: alluvial_model_response_caret
> ### Title: create model response plot for caret models
> ### Aliases: alluvial_model_response_caret
> 
> ### ** Examples
> 
> 
> if(check_pkg_installed("caret", raise_error = FALSE)) {
+   df = mtcars2[, ! names(mtcars2) %in% 'ids' ]
+ 
+   train = caret::train( disp ~ .,
+                         df,
+                         method = 'rf',
+                         trControl = caret::trainControl( method = 'none' ),
+                         importance = TRUE )
+ 
+   alluvial_model_response_caret(train, df, degree = 3)
+ }
> # partial dependency plotting method
> ## Not run: 
> ##D future::plan("multisession")
> ##D alluvial_model_response_caret(train, df, degree = 3, method = 'pdp', parallel = TRUE)
> ##D  
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("alluvial_model_response_parsnip")
> ### * alluvial_model_response_parsnip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: alluvial_model_response_parsnip
> ### Title: create model response plot for parsnip models
> ### Aliases: alluvial_model_response_parsnip
> 
> ### ** Examples
> 
> 
> if(check_pkg_installed("parsnip", raise_error = FALSE)) {
+   df = mtcars2[, ! names(mtcars2) %in% 'ids' ]
+ 
+   m = parsnip::rand_forest(mode = "regression") %>%
+      parsnip::set_engine("randomForest") %>%
+      parsnip::fit(disp ~ ., data = df)
+ 
+   alluvial_model_response_parsnip(m, df, degree = 3)
+ }
> ## Not run: 
> ##D # workflow --------------------------------- 
> ##D m <- parsnip::rand_forest(mode = "regression") %>%
> ##D   parsnip::set_engine("randomForest")
> ##D 
> ##D rec_prep = recipes::recipe(disp ~ ., df) %>%
> ##D   recipes::prep()
> ##D 
> ##D wf <- workflows::workflow() %>%
> ##D   workflows::add_model(m) %>%
> ##D   workflows::add_recipe(rec_prep) %>%
> ##D   parsnip::fit(df)
> ##D 
> ##D alluvial_model_response_parsnip(wf, df, degree = 3)
> ##D 
> ##D # partial dependence plotting method -----
> ##D future::plan("multisession")
> ##D alluvial_model_response_parsnip(m, df, degree = 3, method = 'pdp', parallel = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("alluvial_wide")
> ### * alluvial_wide
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: alluvial_wide
> ### Title: alluvial plot of data in wide format
> ### Aliases: alluvial_wide
> 
> ### ** Examples
> 
> ## Not run: 
> ##D alluvial_wide( data = mtcars2, id = ids
> ##D                 , max_variables = 3
> ##D                 , fill_by = 'first_variable' )#'
> ##D # more coloring variants----------------------
> ##D alluvial_wide( data = mtcars2, id = ids
> ##D                 , max_variables = 5
> ##D                 , fill_by = 'last_variable' )
> ##D 
> ##D alluvial_wide( data = mtcars2, id = ids
> ##D                 , max_variables = 5
> ##D                 , fill_by = 'all_flows' )
> ##D 
> ##D alluvial_wide( data = mtcars2, id = ids
> ##D                 , max_variables = 5
> ##D                 , fill_by = 'first_variable' )
> ##D 
> ##D # manually order variable values and colour by stratum value
> ##D 
> ##D alluvial_wide( data = mtcars2, id = ids
> ##D                  , max_variables = 5
> ##D                  , fill_by = 'values'
> ##D                  , order_levels = c('4', '8', '6') )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("check_pkg_installed")
> ### * check_pkg_installed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check_pkg_installed
> ### Title: check if package is installed
> ### Aliases: check_pkg_installed
> 
> ### ** Examples
> 
> check_pkg_installed("easyalluvial")
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("get_data_space")
> ### * get_data_space
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_data_space
> ### Title: calculate data space
> ### Aliases: get_data_space
> 
> ### ** Examples
> 
> df = mtcars2[, ! names(mtcars2) %in% 'ids' ]
> m = randomForest::randomForest( disp ~ ., df)
> imp = m$importance
> dspace = get_data_space(df, imp)
> 
> 
> 
> cleanEx()
> nameEx("get_pdp_predictions")
> ### * get_pdp_predictions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_pdp_predictions
> ### Title: get predictions compatible with the partial dependence plotting
> ###   method
> ### Aliases: get_pdp_predictions
> 
> ### ** Examples
> 
>  df = mtcars2[, ! names(mtcars2) %in% 'ids' ]
>  m = randomForest::randomForest( disp ~ ., df)
>  imp = m$importance
> 
>  pred = get_pdp_predictions(df, imp
+                             , m
+                             , degree = 3
+                             , bins = 5)
Getting partial dependence plot preditions. This can take a while. See easyalluvial::get_pdp_predictions() `Details` on how to use multiprocessing
> 
> # parallel processing --------------------------
> ## Not run: 
> ##D  future::plan("multisession")
> ##D  
> ##D  # note that we have to pass the predict method via .f_predict otherwise
> ##D  # it will not be available in the worker's environment.
> ##D  
> ##D  pred = get_pdp_predictions(df, imp
> ##D                             , m
> ##D                             , degree = 3
> ##D                             , bins = 5,
> ##D                             , parallel = TRUE
> ##D                             , .f_predict = randomForest:::predict.randomForest)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("manip_bin_numerics")
> ### * manip_bin_numerics
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: manip_bin_numerics
> ### Title: bin numerical columns
> ### Aliases: manip_bin_numerics
> 
> ### ** Examples
> 
> summary( mtcars2 )
      mpg        cyl         disp             hp             drat      
 Min.   :10.40   4:11   Min.   : 71.1   Min.   : 52.0   Min.   :2.760  
 1st Qu.:15.43   6: 7   1st Qu.:120.8   1st Qu.: 96.5   1st Qu.:3.080  
 Median :19.20   8:14   Median :196.3   Median :123.0   Median :3.695  
 Mean   :20.09          Mean   :230.7   Mean   :146.7   Mean   :3.597  
 3rd Qu.:22.80          3rd Qu.:326.0   3rd Qu.:180.0   3rd Qu.:3.920  
 Max.   :33.90          Max.   :472.0   Max.   :335.0   Max.   :4.930  
       wt             qsec       vs             am     gear   carb  
 Min.   :1.513   Min.   :14.50   V:18   automatic:19   3:15   1: 7  
 1st Qu.:2.581   1st Qu.:16.89   S:14   manual   :13   4:12   2:10  
 Median :3.325   Median :17.71                         5: 5   3: 3  
 Mean   :3.217   Mean   :17.85                                4:10  
 3rd Qu.:3.610   3rd Qu.:18.90                                6: 1  
 Max.   :5.424   Max.   :22.90                                8: 1  
     ids           
 Length:32         
 Class :character  
 Mode  :character  
                   
                   
                   
> summary( manip_bin_numerics(mtcars2) )
 mpg    cyl    disp     hp     drat     wt     qsec    vs             am    
 LL:3   4:11   LL: 9   LL: 5   LL: 9   LL: 5   LL: 4   V:18   automatic:19  
 ML:8   6: 7   ML: 7   ML:10   ML: 4   ML: 6   ML: 2   S:14   manual   :13  
 M :9   8:14   M : 2   M : 4   M :12   M :13   M :10                        
 MH:7          MH:10   MH: 9   MH: 6   MH: 5   MH: 7                        
 HH:5          HH: 4   HH: 4   HH: 1   HH: 3   HH: 9                        
                                                                            
 gear   carb       ids           
 3:15   1: 7   Length:32         
 4:12   2:10   Class :character  
 5: 5   3: 3   Mode  :character  
        4:10                     
        6: 1                     
        8: 1                     
> summary( manip_bin_numerics(mtcars2, bin_labels = 'mean'))
    mpg    cyl        disp         hp       drat       wt        qsec    vs    
 11.37:3   4:11   96.56 : 9   62.2  : 5   2.98: 9   1.81: 5   15   : 4   V:18  
 15.26:8   6: 7   155.39: 7   103.3 :10   3.18: 4   2.53: 6   16.15: 2   S:14  
 19.11:9   8:14   241.5 : 2   136.5 : 4   3.79:12   3.34:13   17.13:10         
 22.9 :7          317.14:10   190.56: 9   4.19: 6   3.85: 5   18.26: 7         
 30.88:5          443   : 4   272.25: 4   4.93: 1   5.34: 3   19.97: 9         
                                                                               
         am     gear   carb       ids           
 automatic:19   3:15   1: 7   Length:32         
 manual   :13   4:12   2:10   Class :character  
                5: 5   3: 3   Mode  :character  
                       4:10                     
                       6: 1                     
                       8: 1                     
> summary( manip_bin_numerics(mtcars2, bin_labels = 'cuts'
+   , scale = FALSE, center = FALSE, transform = FALSE))
          mpg     cyl            disp              hp              drat   
 (10.4,15.1]: 6   4:11   (70.7,151]:12   (51.8,94.4]: 7   (2.76,3.19]:11  
 (15.1,19.8]:12   6: 7   (151,231] : 5   (94.4,137] :10   (3.19,3.63]: 4  
 (19.8,24.5]: 8   8:14   (231,312] : 6   (137,179]  : 5   (3.63,4.06]:10  
 (24.5,29.2]: 2          (312,392] : 5   (179,222]  : 5   (4.06,4.5] : 6  
 (29.2,33.9]: 4          (392,472] : 4   (222,264]  : 5   (4.5,4.93] : 1  
                                                                          
           wt              qsec    vs             am     gear   carb  
 (1.51,2.26]: 6   (14.5,15.6]: 4   V:18   automatic:19   3:15   1: 7  
 (2.26,3.01]: 6   (15.6,16.8]: 3   S:14   manual   :13   4:12   2:10  
 (3.01,3.76]:13   (16.8,17.9]:10                         5: 5   3: 3  
 (3.76,4.5] : 4   (17.9,19.1]: 8                                4:10  
 (4.5,5.25] : 3   (19.1,20.2]: 7                                6: 1  
                                                                8: 1  
     ids           
 Length:32         
 Class :character  
 Mode  :character  
                   
                   
                   
> 
> 
> 
> cleanEx()
> nameEx("manip_factor_2_numeric")
> ### * manip_factor_2_numeric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: manip_factor_2_numeric
> ### Title: converts factor to numeric preserving numeric levels and order
> ###   in character levels.
> ### Aliases: manip_factor_2_numeric
> 
> ### ** Examples
> 
> fac_num = factor( c(1,3,8) )
> fac_chr = factor( c('foo','bar') )
> fac_chr_ordered = factor( c('a','b','c'), ordered = TRUE )
> 
> manip_factor_2_numeric( fac_num )
[1] 1 3 8
> manip_factor_2_numeric( fac_chr )
[1] 2 1
> manip_factor_2_numeric( fac_chr_ordered )
[1] 1 2 3
> # does not work for decimal numbers
> manip_factor_2_numeric(factor(c("A12", "B55", "10e4")))
[1] 2 3 1
> manip_factor_2_numeric(factor(c("1.56", "4.56", "8.4")))
[1] 1 2 3
> 
> 
> 
> cleanEx()
> nameEx("palette_filter")
> ### * palette_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: palette_filter
> ### Title: color filters for any vector of hex color values
> ### Aliases: palette_filter
> 
> ### ** Examples
> 
> 
> require(magrittr)
Loading required package: magrittr
> 
> palette_qualitative() %>%
+   palette_filter(thresh_similar = 0) %>%
+   palette_plot_intensity()
> 
> ## Not run: 
> ##D # more examples---------------------------
> ##D 
> ##D palette_qualitative() %>%
> ##D   palette_filter(thresh_similar = 25) %>%
> ##D   palette_plot_intensity()
> ##D 
> ##D palette_qualitative() %>%
> ##D   palette_filter(thresh_similar = 0, blues = FALSE) %>%
> ##D   palette_plot_intensity()
> ## End(Not run)
> 
> 
> 
> cleanEx()

detaching ‘package:magrittr’

> nameEx("palette_increase_length")
> ### * palette_increase_length
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: palette_increase_length
> ### Title: increases length of palette by repeating colours
> ### Aliases: palette_increase_length
> 
> ### ** Examples
> 
> 
> require(magrittr)
Loading required package: magrittr
> 
> length(palette_qualitative())
[1] 77
> 
> palette_qualitative() %>%
+   palette_increase_length(100) %>%
+   length()
[1] 100
> 
> 
> 
> cleanEx()

detaching ‘package:magrittr’

> nameEx("palette_plot_intensity")
> ### * palette_plot_intensity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: palette_plot_intensity
> ### Title: plot colour intensity of palette
> ### Aliases: palette_plot_intensity
> 
> ### ** Examples
> 
> ## Not run: 
> ##D if(interactive()){
> ##D palette_qualitative() %>%
> ##D   palette_filter( thresh = 25) %>%
> ##D   palette_plot_intensity()
> ##D  }
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("palette_plot_rgp")
> ### * palette_plot_rgp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: palette_plot_rgp
> ### Title: plot rgb values of palette
> ### Aliases: palette_plot_rgp
> 
> ### ** Examples
> 
> ## Not run: 
> ##D if(interactive()){
> ##D palette_qualitative() %>%
> ##D   palette_filter( thresh = 50) %>%
> ##D   palette_plot_rgp()
> ##D  }
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("palette_qualitative")
> ### * palette_qualitative
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: palette_qualitative
> ### Title: compose palette from qualitative RColorBrewer palettes
> ### Aliases: palette_qualitative
> 
> ### ** Examples
> 
> palette_qualitative()
 [1] "#FF0065" "#009850" "#A56F2B" "#005EAA" "#710500" "#7B5380" "#9DD1D1"
 [8] "#7FC97F" "#BEAED4" "#FDC086" "#FFFF99" "#386CB0" "#F0027F" "#BF5B17"
[15] "#666666" "#1B9E77" "#D95F02" "#7570B3" "#E7298A" "#66A61E" "#E6AB02"
[22] "#A6761D" "#A6CEE3" "#1F78B4" "#B2DF8A" "#33A02C" "#FB9A99" "#E31A1C"
[29] "#FDBF6F" "#FF7F00" "#CAB2D6" "#6A3D9A" "#B15928" "#FBB4AE" "#B3CDE3"
[36] "#CCEBC5" "#DECBE4" "#FED9A6" "#FFFFCC" "#E5D8BD" "#FDDAEC" "#F2F2F2"
[43] "#B3E2CD" "#FDCDAC" "#CBD5E8" "#F4CAE4" "#E6F5C9" "#FFF2AE" "#F1E2CC"
[50] "#CCCCCC" "#E41A1C" "#377EB8" "#4DAF4A" "#984EA3" "#FFFF33" "#A65628"
[57] "#F781BF" "#999999" "#66C2A5" "#FC8D62" "#8DA0CB" "#E78AC3" "#A6D854"
[64] "#FFD92F" "#E5C494" "#B3B3B3" "#8DD3C7" "#FFFFB3" "#BEBADA" "#FB8072"
[71] "#80B1D3" "#FDB462" "#B3DE69" "#FCCDE5" "#D9D9D9" "#BC80BD" "#FFED6F"
> 
> 
> 
> cleanEx()
> nameEx("plot_all_hists")
> ### * plot_all_hists
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_all_hists
> ### Title: plot marginal histograms of alluvial plot
> ### Aliases: plot_all_hists
> 
> ### ** Examples
> 
> ## Not run: 
> ##D p = alluvial_wide(mtcars2, max_variables = 3)
> ##D plot_all_hists(p, mtcars2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plot_condensation")
> ### * plot_condensation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_condensation
> ### Title: Plot dataframe condensation potential
> ### Aliases: plot_condensation
> 
> ### ** Examples
> 
> 
>  plot_condensation(mtcars2)
> 
>  plot_condensation(mtcars2, first = 'disp')
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_imp")
> ### * plot_imp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_imp
> ### Title: plot feature importance
> ### Aliases: plot_imp
> 
> ### ** Examples
> 
> ## Not run: 
> ##D df = mtcars2[, ! names(mtcars2) %in% 'ids' ]
> ##D 
> ##D train = caret::train( disp ~ .
> ##D                      , df
> ##D                      , method = 'rf'
> ##D                      , trControl = caret::trainControl( method = 'none' )
> ##D                      , importance = TRUE )
> ##D 
> ##D pred_train = caret::predict.train(train, df)
> ##D 
> ##D p = alluvial_model_response_caret(train, degree = 3, pred_train = pred_train)
> ##D 
> ##D plot_imp(p, mtcars2)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("tidy_imp")
> ### * tidy_imp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy_imp
> ### Title: tidy up dataframe containing model feature importance
> ### Aliases: tidy_imp
> 
> ### ** Examples
> 
> # randomforest
> df = mtcars2[, ! names(mtcars2) %in% 'ids' ]
> m = randomForest::randomForest( disp ~ ., df)
> imp = m$importance
> tidy_imp(imp, df)
# A tibble: 10 × 2
   vars      imp
   <chr>   <dbl>
 1 cyl   110910.
 2 mpg    78288.
 3 wt     76784.
 4 hp     75678.
 5 drat   51736.
 6 gear   19536.
 7 qsec   18067.
 8 vs     11807.
 9 carb    8116.
10 am      2625.
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.803 0.218 6.288 0.002 0.002 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
