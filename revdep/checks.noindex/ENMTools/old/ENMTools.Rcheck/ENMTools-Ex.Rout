
R version 4.2.3 (2023-03-15) -- "Shortstop Beagle"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ENMTools"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ENMTools')
Loading required package: dismo
Loading required package: raster
Loading required package: sp
The legacy packages maptools, rgdal, and rgeos, underpinning the sp package,
which was just loaded, will retire in October 2023.
Please refer to R-spatial evolution reports for details, especially
https://r-spatial.org/r/2023/05/15/evolution4.html.
It may be desirable to make the sf package available;
package maintainers should consider adding sf to Suggests:.
The sp package is now running under evolution status 2
     (status 2 uses the sf package in place of rgdal)
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("assert.extras")
> ### * assert.extras
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: assert.extras
> ### Title: Assert that the extra packages needed for an ENMTools function
> ###   are installed and available
> ### Aliases: assert.extras
> 
> ### ** Examples
> 
> if(check.extras("enmtools.gam")) {
+   assert.extras("enmtools.gam")
+ }
> 
> 
> 
> cleanEx()
> nameEx("background.raster.buffer")
> ### * background.raster.buffer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: background.raster.buffer
> ### Title: Takes a set of points, a buffer radius, and a mask and returns a
> ###   raster based on that buffer radius. Code modified from Elith and
> ###   Hijmans SDM with R tutorial
> ### Aliases: background.raster.buffer
> 
> ### ** Examples
> 
> library(ENMTools)
> background.raster.buffer(iberolacerta.clade$species$cyreni$presence.points, 100000, euro.worldclim)
class       : SpatRaster 
dimensions  : 54, 162, 1  (nrow, ncol, nlyr)
resolution  : 0.1666667, 0.1666667  (x, y)
extent      : -10, 17, 39, 48  (xmin, xmax, ymin, ymax)
coord. ref. : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs 
source(s)   : memory
name        : bio1 
min value   :    1 
max value   :    1 
> 
> 
> 
> cleanEx()
> nameEx("background.test")
> ### * background.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: background.test
> ### Title: background.test Conduct a background test (also called a
> ###   similarity test), as described in Warren et al. 2008. This test can
> ###   either be run as an asymmetric test (species.1 vs background of
> ###   species.2) or as a symmetric test (background of species.1 vs
> ###   background of species.2). For GLM, Bioclim, and Domain models the
> ###   replicates will be constructed from the background points supplied
> ###   for each species.  For Maxent, the replicates will be constructed
> ###   from the range rasters stored in the enmtools.species objects.
> ### Aliases: background.test
> ### Keywords: background enmtools equivalency hypothesis testing
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("calc.B1")
> ### * calc.B1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc.B1
> ### Title: calc.B1, Calculates standardized version of Levins (1968) B1
> ###   measure of niche breadth given a vector of suitabilities
> ### Aliases: calc.B1
> ### Keywords: breadth enm niche sdm
> 
> ### ** Examples
> 
> calc.B1(c(1, .001, .001))
[1] 0.01436898
> 
> 
> 
> cleanEx()
> nameEx("calc.B2")
> ### * calc.B2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc.B2
> ### Title: calc.B2, Calculates standardized version of Levins (1968) B2
> ###   measure of niche breadth given a vector of suitabilities
> ### Aliases: calc.B2
> ### Keywords: breadth enm niche sdm
> 
> ### ** Examples
> 
> calc.B2(c(1, .001, .001))
[1] 0.002000996
> 
> 
> 
> cleanEx()
> nameEx("check.clade")
> ### * check.clade
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.clade
> ### Title: Checking for complians of an enmtools.clade object
> ### Aliases: check.clade
> 
> ### ** Examples
> 
> check.clade(iberolacerta.clade)


An enmtools.clade object with 7 species

Species names: 
	 monticola 	 martinezricai 	 cyreni 	 horvathi 	 aurelioi 	 aranica 	 bonnali

Tree: 
$edge
      [,1] [,2]
 [1,]    8    9
 [2,]    9   10
 [3,]   10   11
 [4,]   11    1
 [5,]   11    2
 [6,]   10    3
 [7,]    9    4
 [8,]    8   12
 [9,]   12   13
[10,]   13    5
[11,]   13    6
[12,]   12    7

$edge.length
 [1] 0.171160773 0.002170761 0.073581360 0.008801026 0.008801026 0.082382386
 [7] 0.084553146 0.165346442 0.068997059 0.021370419 0.021370419 0.090367478

$Nnode
[1] 6

$tip.label
[1] "monticola"     "martinezricai" "cyreni"        "horvathi"     
[5] "aurelioi"      "aranica"       "bonnali"      

attr(,"class")
[1] "phylo"
attr(,"order")
[1] "cladewise"


Data Summary: 


|              |species.names |in.tree |presence |background |range  |
|:-------------|:-------------|:-------|:--------|:----------|:------|
|monticola     |monticola     |TRUE    |260      |0          |absent |
|martinezricai |martinezricai |TRUE    |3        |0          |absent |
|cyreni        |cyreni        |TRUE    |76       |0          |absent |
|horvathi      |horvathi      |TRUE    |4        |0          |absent |
|aurelioi      |aurelioi      |TRUE    |28       |0          |absent |
|aranica       |aranica       |TRUE    |14       |0          |absent |
|bonnali       |bonnali       |TRUE    |56       |0          |absent |

> 
> 
> 
> cleanEx()
> nameEx("check.env")
> ### * check.env
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.env
> ### Title: Automating some basic tasks for using a raster stack for
> ###   modeling. Checks rasters for same extent and resolution, and sets
> ###   values in each layer to NA if there is an NA in any other layer.
> ### Aliases: check.env
> 
> ### ** Examples
> 
> check.env(euro.worldclim)
class       : SpatRaster 
dimensions  : 54, 162, 19  (nrow, ncol, nlyr)
resolution  : 0.1666667, 0.1666667  (x, y)
extent      : -10, 17, 39, 48  (xmin, xmax, ymin, ymax)
coord. ref. : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs 
source(s)   : memory
names       : bio1, bio2, bio3, bio4, bio5, bio6, ... 
min values  :  -29,   49,   24, 2680,   75, -126, ... 
max values  :  181,  128,   45, 7719,  352,   87, ... 
> 
> 
> 
> cleanEx()
> nameEx("check.extras")
> ### * check.extras
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.extras
> ### Title: Check that the extra packages needed for an ENMTools function
> ###   are installed and available
> ### Aliases: check.extras
> 
> ### ** Examples
> 
> check.extras("enmtools.gam")
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("check.species")
> ### * check.species
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.species
> ### Title: Checking compliance for an object of class enmtools.species.
> ### Aliases: check.species
> 
> ### ** Examples
> 
> check.species(iberolacerta.clade$species$monticola)


Range raster: 
class       : SpatRaster 
dimensions  : 54, 162, 1  (nrow, ncol, nlyr)
resolution  : 0.1666667, 0.1666667  (x, y)
extent      : -10, 17, 39, 48  (xmin, xmax, ymin, ymax)
coord. ref. : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs 
source(s)   : memory
name        : bio1 
min value   :    1 
max value   :    1 


Presence points (first ten only): 

|         x|        y|
|---------:|--------:|
| -5.171215| 43.06957|
| -6.036635| 43.02531|
| -7.679727| 40.38852|
| -7.790437| 40.30959|
| -7.473340| 43.78935|
| -6.575039| 42.91070|
| -5.132756| 43.49572|
| -7.787378| 40.39362|
| -4.941888| 43.35310|
| -7.621731| 40.34170|


Background points not defined.

Species name:  monticola

> 
> 
> 
> cleanEx()
> nameEx("clamp.env")
> ### * clamp.env
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clamp.env
> ### Title: Takes an emtools.model object and a set of environment layers
> ###   and clamps the environment layers so that no variable falls outside
> ###   of the range available in the training data.
> ### Aliases: clamp.env
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("combine.species")
> ### * combine.species
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combine.species
> ### Title: Takes a list of enmtools.species objects and combines them into
> ###   a single enmtools.species object
> ### Aliases: combine.species
> 
> ### ** Examples
> 
> combine.species(iberolacerta.clade$species)


Range raster not defined.

Presence points (first ten only): 

|         x|        y|
|---------:|--------:|
| -5.171215| 43.06957|
| -6.036635| 43.02531|
| -7.679727| 40.38852|
| -7.790437| 40.30959|
| -7.473340| 43.78935|
| -6.575039| 42.91070|
| -5.132756| 43.49572|
| -7.787378| 40.39362|
| -4.941888| 43.35310|
| -7.621731| 40.34170|


Background points not defined.

Species name:  monticola + martinezricai + cyreni + horvathi + aurelioi + aranica + bonnali

> 
> 
> 
> cleanEx()
> nameEx("drop.species")
> ### * drop.species
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drop.species
> ### Title: Takes a an ENMTools clade object and a vector of species names.
> ###   Drops the species from the tree and removes data from the clade
> ###   object.
> ### Aliases: drop.species
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("enmtools.bc")
> ### * enmtools.bc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enmtools.bc
> ### Title: Takes an emtools.species object with presence and background
> ###   points, and builds a Bioclim model
> ### Aliases: enmtools.bc
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("enmtools.calibrate")
> ### * enmtools.calibrate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enmtools.calibrate
> ### Title: Takes an emtools.model object, and reformats it to run through
> ###   the CalibratR package, calculates Continuous Boyce Index, and runs a
> ###   Hosmer-Lemeshow goodness-of-fit test.  Can either do a full CalibratR
> ###   run or just return ECE/MCE statistics and plots.
> ### Aliases: enmtools.calibrate
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("enmtools.dm")
> ### * enmtools.dm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enmtools.dm
> ### Title: Takes an emtools.species object with presence and background
> ###   points, and builds a Domain model
> ### Aliases: enmtools.dm
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("enmtools.ecospat.bg")
> ### * enmtools.ecospat.bg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enmtools.ecospat.bg
> ### Title: enmtools.ecospat.bg, Runs an ecospat background/similarity test
> ###   using enmtool.species objects.
> ### Aliases: enmtools.ecospat.bg
> ### Keywords: enm niche plot sdm
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("enmtools.ecospat.id")
> ### * enmtools.ecospat.id
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enmtools.ecospat.id
> ### Title: enmtools.ecospat.id, Runs an ecospat identity test using
> ###   enmtool.species objects.
> ### Aliases: enmtools.ecospat.id
> ### Keywords: enm niche plot sdm
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("enmtools.gam")
> ### * enmtools.gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enmtools.gam
> ### Title: Takes an emtools.species object with presence and background
> ###   points, and builds a gam
> ### Aliases: enmtools.gam
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("enmtools.glm")
> ### * enmtools.glm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enmtools.glm
> ### Title: Takes an enmtools.species object with presence and background
> ###   points, and builds a GLM
> ### Aliases: enmtools.glm
> 
> ### ** Examples
> 
> enmtools.glm(iberolacerta.clade$species$monticola, env = euro.worldclim, f = pres ~ bio1 + bio9)


Formula:  presence ~ bio1 + bio9

Data table (top ten lines): 

|         x|        y| bio1| bio2| bio3| bio4| bio5| bio6| bio7| bio8| bio9| bio10| bio11| bio12| bio13| bio14| bio15| bio16| bio17| bio18| bio19| presence|
|---------:|--------:|----:|----:|----:|----:|----:|----:|----:|----:|----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|--------:|
| -5.171215| 43.06957|   78|  100|   40| 5056|  223|  -26|  249|   52|  145|   146|    18|   917|   113|    48|    24|   305|   169|   171|   251|        1|
| -6.036635| 43.02531|   76|  100|   40| 5052|  220|  -26|  246|   48|  143|   144|    16|  1012|   128|    46|    28|   345|   166|   171|   302|        1|
| -7.679727| 40.38852|  137|   94|   38| 5318|  281|   34|  247|   72|  208|   208|    72|  1143|   172|    11|    55|   465|    72|    72|   465|        1|
| -7.790437| 40.30959|  129|   88|   36| 5333|  271|   29|  242|   65|  200|   200|    65|  1231|   187|    12|    56|   504|    76|    76|   504|        1|
| -7.473340| 43.78935|  140|   76|   42| 3636|  237|   58|  179|  101|  185|   189|    95|   931|   122|    32|    34|   336|   122|   142|   298|        1|
| -6.575039| 42.91070|   84|   99|   40| 5134|  228|  -19|  247|   28|  152|   152|    23|  1012|   129|    39|    32|   358|   145|   145|   328|        1|
| -5.132756| 43.49572|  133|   78|   41| 3998|  235|   45|  190|  115|  184|   186|    84|   822|   110|    40|    28|   284|   145|   160|   213|        1|
| -7.787378| 40.39362|  137|   94|   38| 5318|  281|   34|  247|   72|  208|   208|    72|  1143|   172|    11|    55|   465|    72|    72|   465|        1|
| -4.941888| 43.35310|  128|   78|   40| 4073|  233|   39|  194|  111|  180|   183|    78|   843|   111|    41|    27|   291|   149|   164|   222|        1|
| -7.621731| 40.34170|  101|   76|   33| 5359|  236|    7|  229|   39|  173|   173|    39|  1514|   234|    15|    57|   621|    92|    92|   621|        1|


Model:  
Call:
glm(formula = f, family = "binomial", data = analysis.df[, -c(1, 
    2)], weights = weights)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.1071  -0.5925  -0.5220  -0.3814   1.5743  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept)  3.460240   0.642232   5.388 7.13e-08 ***
bio1        -0.016915   0.006147  -2.752  0.00593 ** 
bio9        -0.009225   0.005160  -1.788  0.07379 .  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 720.87  on 1259  degrees of freedom
Residual deviance: 680.09  on 1257  degrees of freedom
AIC: 338.31

Number of Fisher Scoring iterations: 4



Model fit (training data):  class          : ModelEvaluation 
n presences    : 260 
n absences     : 1000 
AUC            : 0.6902423 
cor            : 0.2067548 
max TPR+TNR at : -0.1332192 


Environment space model fit (training data):  class          : ModelEvaluation 
n presences    : 260 
n absences     : 10000 
AUC            : 0.30983 
cor            : -0.08995039 
max TPR+TNR at : 0.3509557 


Proportion of data wittheld for model fitting:  0

Model fit (test data):  [1] NA


Environment space model fit (test data):  [1] NA


Suitability:  
class       : SpatRaster 
dimensions  : 54, 162, 1  (nrow, ncol, nlyr)
resolution  : 0.1666667, 0.1666667  (x, y)
extent      : -10, 17, 39, 48  (xmin, xmax, ymin, ymax)
coord. ref. : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs 
source(s)   : memory
name        :      lyr1 
min value   : 0.1763098 
max value   : 0.9511159 


Notes:  
> 
> 
> 
> cleanEx()
> nameEx("enmtools.hypervolume")
> ### * enmtools.hypervolume
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enmtools.hypervolume
> ### Title: THIS FUNCTION IS CURRENTLY DISABLED.  Takes an emtools.species
> ###   object and environmental layers, and constructs a hypervolume using
> ###   the R package hypervolume
> ### Aliases: enmtools.hypervolume
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("enmtools.maxent")
> ### * enmtools.maxent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enmtools.maxent
> ### Title: Takes an emtools.species object with presence and background
> ###   points, and builds a maxent model
> ### Aliases: enmtools.maxent
> 
> ### ** Examples
> 
> if(check.extras("enmtools.maxent")) {
+     ## maxent is not working on some platforms so use try()
+     try(enmtools.maxent(iberolacerta.clade$species$monticola, env = euro.worldclim))
+ }
> 
> 
> 
> cleanEx()
> nameEx("enmtools.rf")
> ### * enmtools.rf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enmtools.rf
> ### Title: Takes an emtools.species object with presence and background
> ###   points, and builds a random forest model
> ### Aliases: enmtools.rf
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("enmtools.rf.ranger")
> ### * enmtools.rf.ranger
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enmtools.rf.ranger
> ### Title: Takes an emtools.species object with presence and background
> ###   points, and builds a random forest model using the 'probability mode'
> ###   in package 'ranger'
> ### Aliases: enmtools.rf.ranger
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("enmtools.vip")
> ### * enmtools.vip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enmtools.vip
> ### Title: Takes an enmtools.model object, and performs variable importance
> ###   analyses on it using methods from the vip package
> ### Aliases: enmtools.vip
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("env.breadth")
> ### * env.breadth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: env.breadth
> ### Title: Calculates breadth of a model in environment space using latin
> ###   hypercube sampling
> ### Aliases: env.breadth
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("env.evaluate")
> ### * env.evaluate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: env.evaluate
> ### Title: Calculates evaluation metrics (AUC, etc.) using latin hypercube
> ###   sampling in environment space
> ### Aliases: env.evaluate
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("env.overlap")
> ### * env.overlap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: env.overlap
> ### Title: Calculates overlap between models in environment space using
> ###   latin hypercube sampling
> ### Aliases: env.overlap
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("find.extras")
> ### * find.extras
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: find.extras
> ### Title: Find the extra packages needed for an ENMTools function
> ### Aliases: find.extras
> 
> ### ** Examples
> 
> find.extras("enmtools.calibrate")
[1] "ecospat"           "CalibratR"         "caret"            
[4] "ResourceSelection"
> 
> 
> 
> cleanEx()
> nameEx("find.extras.missing")
> ### * find.extras.missing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: find.extras.missing
> ### Title: Find the extra packages needed for an ENMTools function that are
> ###   currently missing (not available)
> ### Aliases: find.extras.missing
> 
> ### ** Examples
> 
> find.extras.missing("enmtools.calibrate")
NULL
> 
> 
> 
> cleanEx()
> nameEx("geog.range.overlap")
> ### * geog.range.overlap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geog.range.overlap
> ### Title: Takes two emtools.species objects with range rasters, calculates
> ###   overlap between them as in Fitzpatrick and Turelli 2006.  This metric
> ###   divides the area of overlap between two species ranges by the smaller
> ###   of the two areas of the species' individual ranges.  It therefore
> ###   ranges from 0 (no overlap) to 1 (ranges are the same or the smaller
> ###   species' range is contained entirely within the larger).
> ### Aliases: geog.range.overlap
> 
> ### ** Examples
> 
> cyreni <- iberolacerta.clade$species$cyreni
> monticola <- iberolacerta.clade$species$monticola
> cyreni$range <- background.raster.buffer(cyreni$presence.points, 100000, euro.worldclim)
> monticola$range <- background.raster.buffer(monticola$presence.points, 100000, euro.worldclim)
> geog.range.overlap(cyreni, monticola)
[1] 0.9771429
> 
> 
> 
> cleanEx()
> nameEx("hypervolume.overlap")
> ### * hypervolume.overlap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hypervolume.overlap
> ### Title: Takes an emtools.species object and environmental layers, and
> ###   constructs a hypervolume using the R package hypervolume
> ### Aliases: hypervolume.overlap
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("identity.test")
> ### * identity.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: identity.test
> ### Title: identity.test Conduct a niche identity/equivalency test as
> ###   described in Warren et al. 2008.
> ### Aliases: identity.test
> ### Keywords: enmtools equivalency hypothesis-testing identity
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("install.extras")
> ### * install.extras
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install.extras
> ### Title: install.extras
> ### Aliases: install.extras
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("marginal.plots")
> ### * marginal.plots
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: marginal.plots
> ### Title: marginal.plots Plots the marginal response of a model to an
> ###   environmental variable with all other variables held at their mean in
> ###   env
> ### Aliases: marginal.plots
> ### Keywords: enm plot response sdm
> 
> ### ** Examples
> 
> cyreni.glm <- enmtools.glm(iberolacerta.clade$species$cyreni,
+ f = pres ~ bio1 + bio12, euro.worldclim)
> marginal.plots(cyreni.glm, euro.worldclim, "bio1")
> 
> 
> 
> cleanEx()
> nameEx("multistack.pca")
> ### * multistack.pca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: multistack.pca
> ### Title: multistack.pca, simultaneous PCA on more than one stack of
> ###   environmental rasters
> ### Aliases: multistack.pca
> ### Keywords: environment pca raster
> 
> ### ** Examples
> 
> test1 <- terra::crop(euro.worldclim, terra::ext(-10, -5, 40, 43))
> test2 <- terra::crop(euro.worldclim, terra::ext(-5, 5, 40, 48))
> test3 <- terra::crop(euro.worldclim, terra::ext(5, 15, 44, 48))
> multistack.pca(test1, test2, test3)
$raster.stacks
$raster.stacks$test1
class       : SpatRaster 
dimensions  : 18, 30, 2  (nrow, ncol, nlyr)
resolution  : 0.1666667, 0.1666667  (x, y)
extent      : -10, -5, 40, 43  (xmin, xmax, ymin, ymax)
coord. ref. : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs 
source(s)   : memory
names       :       PC1,      PC2 
min values  : -6.450023, -1.89425 
max values  :  1.943752,  8.29479 

$raster.stacks$test2
class       : SpatRaster 
dimensions  : 48, 60, 2  (nrow, ncol, nlyr)
resolution  : 0.1666667, 0.1666667  (x, y)
extent      : -5, 5, 40, 48  (xmin, xmax, ymin, ymax)
coord. ref. : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs 
source(s)   : memory
names       :       PC1,       PC2 
min values  : -6.041141, -2.587892 
max values  :  6.282695,  6.070217 

$raster.stacks$test3
class       : SpatRaster 
dimensions  : 24, 60, 2  (nrow, ncol, nlyr)
resolution  : 0.1666667, 0.1666667  (x, y)
extent      : 5, 15, 44, 48  (xmin, xmax, ymin, ymax)
coord. ref. : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs 
source(s)   : memory
names       :       PC1,       PC2 
min values  : -2.393062, -3.787858 
max values  : 13.590301,  2.401896 


$pc.plots
$pc.plots$PC1

$pc.plots$PC2


$pca.object
Standard deviations (1, .., p=19):
 [1] 3.073685e+00 1.988451e+00 1.350081e+00 1.195085e+00 1.083428e+00
 [6] 8.520803e-01 4.644625e-01 3.480526e-01 1.972875e-01 1.704024e-01
[11] 1.232902e-01 9.772940e-02 8.058225e-02 6.650302e-02 6.468002e-02
[16] 4.660834e-02 2.691038e-02 1.217992e-02 1.753705e-15

Rotation (n x k) = (19 x 19):
              PC1          PC2          PC3         PC4          PC5
bio1  -0.28510219  0.124637298 -0.098385572 -0.29763738 -0.118392098
bio2  -0.21169450 -0.159382745  0.078677668  0.36987774 -0.343221214
bio3  -0.19054782  0.211994273  0.248273398  0.29888147 -0.052632804
bio4   0.02289396 -0.432666935 -0.228856882 -0.09196592 -0.311141434
bio5  -0.29803635 -0.044719859 -0.132401212 -0.14806481 -0.269414764
bio6  -0.25391275  0.263014874 -0.009962063 -0.27748198  0.021856903
bio7  -0.08742191 -0.403721956 -0.172237264  0.15288376 -0.405123030
bio8  -0.06824093 -0.222945430 -0.347358012 -0.33355316  0.337217728
bio9  -0.22043913  0.240291277  0.114112343  0.05909503 -0.247536360
bio10 -0.28508380  0.009700567 -0.158830775 -0.30474470 -0.199949536
bio11 -0.27238764  0.232486335 -0.029569676 -0.22779259 -0.015625419
bio12  0.28226691  0.180742328 -0.138445128 -0.07238469 -0.229374196
bio13  0.23381031  0.237204507 -0.346953880  0.02352833 -0.127579401
bio14  0.28201615 -0.024259717  0.209393537 -0.26069268 -0.201480484
bio15 -0.09187633  0.148965007 -0.560037435  0.37404029  0.161286862
bio16  0.24270815  0.229200421 -0.328647912  0.04597008 -0.135315419
bio17  0.27763542  0.021410247  0.208250267 -0.25760706 -0.250246069
bio18  0.29730429 -0.101866486 -0.075989067 -0.10370729  0.005704614
bio19  0.14393351  0.395073261 -0.094104006  0.04607808 -0.315816113
               PC6          PC7          PC8          PC9         PC10
bio1  -0.051449110 -0.131158758  0.143924941  0.073967425 -0.010445761
bio2  -0.420688682  0.025379758  0.010085689 -0.123418706  0.078311927
bio3  -0.562241348 -0.057261009  0.098563256  0.138382201 -0.122812766
bio4   0.186318840 -0.059841120 -0.016522235  0.203591112 -0.255292114
bio5  -0.024528880 -0.094650787  0.004467662 -0.053620364  0.002834363
bio6  -0.020515621 -0.129249803  0.050444477 -0.007690346 -0.113910993
bio7  -0.007690256  0.035295604 -0.059188533 -0.065010939  0.151728861
bio8  -0.507160458  0.456894614 -0.353265014 -0.063848510 -0.056357229
bio9   0.289145827  0.828080287  0.151218274  0.063898931 -0.109581028
bio10  0.012690937 -0.131139449  0.117297876  0.033919257 -0.018007240
bio11 -0.072089532 -0.083347140  0.115416323 -0.130710247  0.165299954
bio12 -0.097865720  0.006151292 -0.067394953  0.011443248  0.084075261
bio13 -0.103770476  0.054521297  0.073504596  0.198458070  0.526082878
bio14 -0.107698898 -0.013998980  0.074126536 -0.408241843 -0.152781193
bio15  0.111452898 -0.035893369  0.218261726 -0.599573387 -0.196348741
bio16 -0.093444893  0.021227886  0.133799484  0.257519549  0.070598881
bio17 -0.090477314  0.114819300  0.073279108 -0.469376995  0.216110152
bio18 -0.246753029  0.055710462  0.598560200  0.181020194 -0.463647273
bio19 -0.010738698 -0.092395815 -0.586311414  0.008716427 -0.471465651
              PC11         PC12        PC13          PC14        PC15
bio1  -0.034456690  0.206886664 -0.01284071  0.4464129661  0.08088142
bio2   0.153116994 -0.155744242 -0.24742393 -0.1172279865 -0.07564291
bio3  -0.380993174  0.241107113  0.26778237 -0.0436711777  0.07503909
bio4  -0.455048325  0.226447088  0.05129921 -0.3010660498  0.03096881
bio5   0.148955023 -0.310954821  0.02222215 -0.2699780781 -0.10334960
bio6  -0.006506268 -0.285147417 -0.04663805 -0.5181776350 -0.13250679
bio7   0.216750065 -0.064970563  0.09157594  0.2946207078  0.02735548
bio8  -0.030102861  0.005208689  0.02150914  0.0062716473 -0.02343394
bio9  -0.042526592 -0.025584346  0.04647538  0.0008419025  0.05200260
bio10 -0.092175609  0.193261752  0.02102903  0.1046246698  0.05910288
bio11  0.166326014  0.061519454 -0.02595963  0.1581845672  0.06166796
bio12  0.415086713  0.187897060  0.62137745 -0.2712638205  0.28530663
bio13 -0.289911142 -0.153595644 -0.35040315 -0.0953086957  0.41116158
bio14 -0.355981023 -0.527296389  0.23970547  0.2403227278  0.17114076
bio15 -0.106449052  0.095424923  0.05514415 -0.0370568773  0.04949991
bio16 -0.092246140 -0.143937396  0.20234642  0.1890588359 -0.73768163
bio17 -0.048719525  0.479794208 -0.25221276 -0.1824172250 -0.30878036
bio18  0.322391715 -0.008331213 -0.27851115  0.0022295976  0.13095664
bio19  0.076410379  0.049567771 -0.31299840  0.1392785915  0.05241318
              PC16          PC17          PC18          PC19
bio1   0.137856450  6.235920e-01  0.2947907674 -5.983719e-15
bio2   0.577962621  7.979480e-02 -0.0331718514 -1.214970e-15
bio3  -0.337981196 -6.668600e-02  0.0213602991  2.299346e-15
bio4   0.195176919 -1.430318e-01  0.3135444171 -2.916413e-17
bio5  -0.385651212  9.070480e-02  0.0560384468 -6.493344e-01
bio6  -0.059317327  1.373875e-01  0.0361924878  6.023089e-01
bio7  -0.462377991 -5.137018e-02  0.0314196607  4.643154e-01
bio8   0.002392857 -6.607291e-05  0.0019723178  7.128270e-17
bio9   0.016424861 -1.016154e-04  0.0006969097 -5.472555e-17
bio10  0.116879494 -2.063481e-01 -0.7816623837  3.247753e-15
bio11  0.125939153 -6.895976e-01  0.4433052121 -3.688563e-16
bio12  0.179380588  9.166577e-02  0.0022606573 -5.124164e-16
bio13 -0.084922094  2.744011e-02 -0.0065036297  3.115013e-16
bio14  0.099460535 -3.077201e-02 -0.0088435820  2.908482e-16
bio15 -0.013388134  5.417382e-02  0.0012704453 -4.356442e-16
bio16  0.084684510 -6.687843e-02  0.0029240510  4.297730e-16
bio17 -0.159403530  7.744002e-02  0.0115999728 -1.997191e-16
bio18 -0.111016094 -6.010879e-02  0.0016211703 -8.205807e-17
bio19 -0.066538489 -6.981831e-02 -0.0011540041  8.740176e-17

> 
> 
> 
> cleanEx()
> nameEx("point.overlap")
> ### * point.overlap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: point.overlap
> ### Title: Takes two emtools.species objects with range rasters, calculates
> ###   overlap between them as in Cardillo and Warren 2016
> ### Aliases: point.overlap
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("rangebreak.blob")
> ### * rangebreak.blob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rangebreak.blob
> ### Title: rangebreak.blob Conduct a blob rangebreak test as described in
> ###   Glor and Warren 2011.
> ### Aliases: rangebreak.blob
> ### Keywords: barrier biogeography enmtools hypothesis-testing rangebreak
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("rangebreak.linear")
> ### * rangebreak.linear
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rangebreak.linear
> ### Title: rangebreak.linear Conduct a linear rangebreak test as described
> ###   in Glor and Warren 2011.
> ### Aliases: rangebreak.linear
> ### Keywords: barrier biogeography enmtools hypothesis-testing rangebreak
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("rangebreak.ribbon")
> ### * rangebreak.ribbon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rangebreak.ribbon
> ### Title: rangebreak.ribbon Conduct a ribbon rangebreak test as described
> ###   in Glor and Warren 2011.
> ### Aliases: rangebreak.ribbon
> ### Keywords: barrier biogeography enmtools hypothesis-testing rangebreak
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("raster.breadth")
> ### * raster.breadth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: raster.breadth
> ### Title: raster.breadth, applies measures of niche breadth to an ENM
> ### Aliases: raster.breadth
> ### Keywords: keywords
> 
> ### ** Examples
> 
> aurelioi.glm <- enmtools.glm(iberolacerta.clade$species$aurelioi, euro.worldclim,
+ f = pres ~ bio1 + bio12)
> raster.breadth(aurelioi.glm)
$B1
[1] 0.9583557

$B2
[1] 0.571383

> 
> 
> 
> cleanEx()
> nameEx("raster.cor")
> ### * raster.cor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: raster.cor
> ### Title: Calculates the correlation coefficient between two rasters.
> ### Aliases: raster.cor
> 
> ### ** Examples
> 
> data(euro.worldclim)
Warning in data(euro.worldclim) : data set ‘euro.worldclim’ not found
> raster.cor(euro.worldclim[[1]], euro.worldclim[[2]])
[1] 0.07391386
> 
> 
> 
> cleanEx()
> nameEx("raster.cor.matrix")
> ### * raster.cor.matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: raster.cor.matrix
> ### Title: Takes a raster stack and returns a data frame containing Pearson
> ###   correlation coefficients between the included rasters
> ### Aliases: raster.cor.matrix
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("raster.cor.plot")
> ### * raster.cor.plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: raster.cor.plot
> ### Title: Takes a raster stack and returns a data frame containing Pearson
> ###   correlation coefficients between the included rasters
> ### Aliases: raster.cor.plot
> 
> ### ** Examples
> 
> data(euro.worldclim)
Warning in data(euro.worldclim) : data set ‘euro.worldclim’ not found
> raster.cor.plot(euro.worldclim)
$cor.mds.plot

$cor.heatmap

> 
> 
> 
> cleanEx()
> nameEx("raster.overlap")
> ### * raster.overlap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: raster.overlap
> ### Title: raster.overlap, measures overlap between two ENMs
> ### Aliases: raster.overlap
> ### Keywords: keywords
> 
> ### ** Examples
> 
> aurelioi.glm <- enmtools.glm(iberolacerta.clade$species$aurelioi,
+ euro.worldclim, f = pres ~ bio1 + bio12)
> aranica.glm <- enmtools.glm(iberolacerta.clade$species$aranica,
+ euro.worldclim, f = pres ~ bio1 + bio12)
> raster.overlap(aurelioi.glm, aranica.glm)
$D
[1] 0.8143451

$I
[1] 0.9763998

$rank.cor
[1] 0.9000932

> 
> 
> 
> cleanEx()
> nameEx("raster.pca")
> ### * raster.pca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: raster.pca
> ### Title: raster.pca, PCA on a set of environmental rasters
> ### Aliases: raster.pca
> ### Keywords: environment pca raster
> 
> ### ** Examples
> 
> env.pca <- raster.pca(euro.worldclim, 2)
> 
> 
> 
> cleanEx()
> nameEx("raster.resid")
> ### * raster.resid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: raster.resid
> ### Title: raster.resid Measure standardized residuals from a linear
> ###   regression between two rasters.
> ### Aliases: raster.resid
> ### Keywords: correlation raster residuals
> 
> ### ** Examples
> 
> data(euro.worldclim)
Warning in data(euro.worldclim) : data set ‘euro.worldclim’ not found
> raster.resid(euro.worldclim[[1]], euro.worldclim[[2]])
$residuals
class       : SpatRaster 
dimensions  : 54, 162, 1  (nrow, ncol, nlyr)
resolution  : 0.1666667, 0.1666667  (x, y)
extent      : -10, 17, 39, 48  (xmin, xmax, ymin, ymax)
coord. ref. : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs 
source(s)   : memory
name        :       bio2 
min value   : -1.3142972 
max value   :  0.7983361 

$lm

Call:
lm(formula = x ~ y)

Coefficients:
(Intercept)            y  
    63.7862       0.5179  


> 
> 
> 
> cleanEx()
> nameEx("raster.standardize")
> ### * raster.standardize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: raster.standardize
> ### Title: raster.standardize, standardizes all values in a raster file
> ### Aliases: raster.standardize
> ### Keywords: keywords
> 
> ### ** Examples
> 
> raster.standardize(euro.worldclim[[1]])
class       : SpatRaster 
dimensions  : 54, 162, 1  (nrow, ncol, nlyr)
resolution  : 0.1666667, 0.1666667  (x, y)
extent      : -10, 17, 39, 48  (xmin, xmax, ymin, ymax)
coord. ref. : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs 
source(s)   : memory
name        :          bio1 
min value   : -4.809335e-05 
max value   :  3.001688e-04 
> 
> 
> 
> cleanEx()
> nameEx("threespace.plot")
> ### * threespace.plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: threespace.plot
> ### Title: threespace.plot, A plot that compares the environmental
> ###   distribution of presence points, background points, and the set of
> ###   supplied environmental layers.
> ### Aliases: threespace.plot
> ### Keywords: background comparison environment extrapolation pca presence
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("trimdupes.by.raster")
> ### * trimdupes.by.raster
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trimdupes.by.raster
> ### Title: Takes a set of points and a raster mask and returns a data frame
> ###   trimmed so that only one point is returned per grid cell in the mask
> ###   raster.
> ### Aliases: trimdupes.by.raster
> 
> ### ** Examples
> 
> pts <- iberolacerta.clade$species$monticola$presence.points
> trimdupes.by.raster(pts, euro.worldclim)
 class       : SpatVector 
 geometry    : points 
 dimensions  : 111, 1  (geometries, attributes)
 extent      : -9.083333, 0.08333333, 40.25, 43.75  (xmin, xmax, ymin, ymax)
 coord. ref. : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs 
 names       :  last
 type        : <num>
 values      :     1
                   1
                   1
> 
> 
> 
> cleanEx()
> nameEx("visualize.enm")
> ### * visualize.enm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visualize.enm
> ### Title: visualize.enm, Makes a heatmap of suitability of habitat in
> ###   environment space according to a given model
> ### Aliases: visualize.enm
> ### Keywords: enm niche plot sdm
> 
> ### ** Examples
> 
> aurelioi.glm <- enmtools.glm(iberolacerta.clade$species$aurelioi, euro.worldclim,
+ f = pres ~ poly(bio1, 4) + poly(bio12, 4))
> visualize.enm(aurelioi.glm, euro.worldclim, layers = c("bio1", "bio12"))
$background.plot
Warning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.
ℹ Please use `after_stat(density)` instead.
ℹ The deprecated feature was likely used in the ENMTools package.
  Please report the issue to the authors.
Warning: Removed 396 rows containing missing values (`geom_raster()`).

$suit.plot

> 
> 
> 
> cleanEx()
> nameEx("visualize.overlap")
> ### * visualize.overlap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visualize.overlap
> ### Title: visualize.overlap, Makes a contour map of suitability of habitat
> ###   in environment space for two models
> ### Aliases: visualize.overlap
> ### Keywords: enm niche overlap plot sdm
> 
> ### ** Examples
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  9.771 0.413 10.359 0.001 0.002 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
